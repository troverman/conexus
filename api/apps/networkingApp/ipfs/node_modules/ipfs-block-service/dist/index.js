(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["IpfsBlockService"] = factory();
	else
		root["IpfsBlockService"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(2),
    map = _require.map;
/**
 * BlockService is a hybrid block datastore. It stores data in a local
 * datastore and may retrieve data from a remote Exchange.
 * It uses an internal `datastore.Datastore` instance to store values.
 */


var BlockService =
/*#__PURE__*/
function () {
  /**
   * Create a new BlockService
   *
   * @param {IPFSRepo} ipfsRepo
   */
  function BlockService(ipfsRepo) {
    _classCallCheck(this, BlockService);

    this._repo = ipfsRepo;
    this._bitswap = null;
  }
  /**
   * Add a bitswap instance that communicates with the
   * network to retreive blocks that are not in the local store.
   *
   * If the node is online all requests for blocks first
   * check locally and afterwards ask the network for the blocks.
   *
   * @param {Bitswap} bitswap
   * @returns {void}
   */


  _createClass(BlockService, [{
    key: "setExchange",
    value: function setExchange(bitswap) {
      this._bitswap = bitswap;
    }
    /**
     * Go offline, i.e. drop the reference to bitswap.
     *
     * @returns {void}
     */

  }, {
    key: "unsetExchange",
    value: function unsetExchange() {
      this._bitswap = null;
    }
    /**
     * Is the blockservice online, i.e. is bitswap present.
     *
     * @returns {bool}
     */

  }, {
    key: "hasExchange",
    value: function hasExchange() {
      return this._bitswap != null;
    }
    /**
     * Put a block to the underlying datastore.
     *
     * @param {Block} block
     * @returns {Promise}
     */

  }, {
    key: "put",
    value: function put(block) {
      if (this.hasExchange()) {
        return this._bitswap.put(block);
      } else {
        return this._repo.blocks.put(block);
      }
    }
    /**
     * Put a multiple blocks to the underlying datastore.
     *
     * @param {Array<Block>} blocks
     * @returns {Promise}
     */

  }, {
    key: "putMany",
    value: function putMany(blocks) {
      if (this.hasExchange()) {
        return this._bitswap.putMany(blocks);
      } else {
        return this._repo.blocks.putMany(blocks);
      }
    }
    /**
     * Get a block by cid.
     *
     * @param {CID} cid
     * @returns {Promise<Block>}
     */

  }, {
    key: "get",
    value: function get(cid) {
      if (this.hasExchange()) {
        return this._bitswap.get(cid);
      } else {
        return this._repo.blocks.get(cid);
      }
    }
    /**
     * Get multiple blocks back from an array of cids.
     *
     * @param {Array<CID>} cids
     * @returns {Iterator<Block>}
     */

  }, {
    key: "getMany",
    value: function getMany(cids) {
      var _this = this;

      if (!Array.isArray(cids)) {
        throw new Error('first arg must be an array of cids');
      }

      if (this.hasExchange()) {
        return this._bitswap.getMany(cids);
      } else {
        var getRepoBlocks = map(function (cid) {
          return _this._repo.blocks.get(cid);
        });
        return getRepoBlocks(cids);
      }
    }
    /**
     * Delete a block from the blockstore.
     *
     * @param {CID} cid
     * @returns {Promise}
     */

  }, {
    key: "delete",
    value: function _delete(cid) {
      return this._repo.blocks["delete"](cid);
    }
  }]);

  return BlockService;
}();

module.exports = BlockService;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.batch = batch;
exports.buffer = buffer;
exports.collect = collect;
exports.concat = concat;
exports.consume = consume;
exports.filter = filter;
exports.flatMap = flatMap;
exports.flatten = flatten;
exports.flatTransform = flatTransform;
exports.fromStream = fromStream;
exports.getIterator = getIterator;
exports.map = map;
exports.merge = merge;
exports.parallelFlatMap = parallelFlatMap;
exports.parallelMap = parallelMap;
exports.parallelMerge = parallelMerge;
exports.pipeline = pipeline;
exports.reduce = reduce;
exports.take = take;
exports.tap = tap;
exports.time = time;
exports.transform = transform;
exports.writeToStream = writeToStream;

var _regenerator = _interopRequireDefault(__webpack_require__(4));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _marked =
/*#__PURE__*/
_regenerator["default"].mark(_syncBatch),
    _marked2 =
/*#__PURE__*/
_regenerator["default"].mark(syncBuffer),
    _marked3 =
/*#__PURE__*/
_regenerator["default"].mark(_syncConcat),
    _marked4 =
/*#__PURE__*/
_regenerator["default"].mark(_syncTake),
    _marked5 =
/*#__PURE__*/
_regenerator["default"].mark(_syncTime);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator],
      i = 0;
  if (m) return m.call(o);
  return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}

function _batch(size, iterable) {
  return __asyncGenerator(this, arguments,
  /*#__PURE__*/
  _regenerator["default"].mark(function _batch_1() {
    var e_1, _a, dataBatch, iterable_1, iterable_1_1, data;

    return _regenerator["default"].wrap(function _batch_1$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            dataBatch = [];
            _context.prev = 1;
            iterable_1 = __asyncValues(iterable);

          case 3:
            _context.next = 5;
            return __await(iterable_1.next());

          case 5:
            iterable_1_1 = _context.sent;

            if (iterable_1_1.done) {
              _context.next = 17;
              break;
            }

            data = iterable_1_1.value;
            dataBatch.push(data);

            if (!(dataBatch.length === size)) {
              _context.next = 15;
              break;
            }

            _context.next = 12;
            return __await(dataBatch);

          case 12:
            _context.next = 14;
            return _context.sent;

          case 14:
            dataBatch = [];

          case 15:
            _context.next = 3;
            break;

          case 17:
            _context.next = 22;
            break;

          case 19:
            _context.prev = 19;
            _context.t0 = _context["catch"](1);
            e_1 = {
              error: _context.t0
            };

          case 22:
            _context.prev = 22;
            _context.prev = 23;

            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1["return"]))) {
              _context.next = 27;
              break;
            }

            _context.next = 27;
            return __await(_a.call(iterable_1));

          case 27:
            _context.prev = 27;

            if (!e_1) {
              _context.next = 30;
              break;
            }

            throw e_1.error;

          case 30:
            return _context.finish(27);

          case 31:
            return _context.finish(22);

          case 32:
            if (!(dataBatch.length > 0)) {
              _context.next = 37;
              break;
            }

            _context.next = 35;
            return __await(dataBatch);

          case 35:
            _context.next = 37;
            return _context.sent;

          case 37:
          case "end":
            return _context.stop();
        }
      }
    }, _batch_1, null, [[1, 19, 22, 32], [23,, 27, 31]]);
  }));
}

function _syncBatch(size, iterable) {
  var dataBatch, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, data;

  return _regenerator["default"].wrap(function _syncBatch$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          dataBatch = [];
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context2.prev = 4;
          _iterator = iterable[Symbol.iterator]();

        case 6:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context2.next = 16;
            break;
          }

          data = _step.value;
          dataBatch.push(data);

          if (!(dataBatch.length === size)) {
            _context2.next = 13;
            break;
          }

          _context2.next = 12;
          return dataBatch;

        case 12:
          dataBatch = [];

        case 13:
          _iteratorNormalCompletion = true;
          _context2.next = 6;
          break;

        case 16:
          _context2.next = 22;
          break;

        case 18:
          _context2.prev = 18;
          _context2.t0 = _context2["catch"](4);
          _didIteratorError = true;
          _iteratorError = _context2.t0;

        case 22:
          _context2.prev = 22;
          _context2.prev = 23;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 25:
          _context2.prev = 25;

          if (!_didIteratorError) {
            _context2.next = 28;
            break;
          }

          throw _iteratorError;

        case 28:
          return _context2.finish(25);

        case 29:
          return _context2.finish(22);

        case 30:
          if (!(dataBatch.length > 0)) {
            _context2.next = 33;
            break;
          }

          _context2.next = 33;
          return dataBatch;

        case 33:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked, null, [[4, 18, 22, 30], [23,, 25, 29]]);
}

function batch(size, iterable) {
  if (iterable === undefined) {
    return function (curriedIterable) {
      return batch(size, curriedIterable);
    };
  }

  if (iterable[Symbol.asyncIterator]) {
    return _batch(size, iterable);
  }

  return _syncBatch(size, iterable);
}

function getIterator(iterable) {
  if (typeof iterable.next === 'function') {
    return iterable;
  }

  if (typeof iterable[Symbol.iterator] === 'function') {
    return iterable[Symbol.iterator]();
  }

  if (typeof iterable[Symbol.asyncIterator] === 'function') {
    return iterable[Symbol.asyncIterator]();
  }

  throw new TypeError('"values" does not to conform to any of the iterator or iterable protocols');
}

function defer() {
  var reject;
  var resolve;
  var promise = new Promise(function (resolveFunc, rejectFunc) {
    resolve = resolveFunc;
    reject = rejectFunc;
  });
  return {
    promise: promise,
    reject: reject,
    resolve: resolve
  };
} /// <reference lib="esnext.asynciterable" />


function _buffer(size, iterable) {
  var iterator = getIterator(iterable);
  var resultQueue = [];
  var readQueue = [];
  var reading = false;
  var ended = false;

  function fulfillReadQueue() {
    while (readQueue.length > 0 && resultQueue.length > 0) {
      var readDeferred = readQueue.shift();

      var _resultQueue$shift = resultQueue.shift(),
          error = _resultQueue$shift.error,
          value = _resultQueue$shift.value;

      if (error) {
        readDeferred.reject(error);
      } else {
        readDeferred.resolve({
          done: false,
          value: value
        });
      }
    }

    while (readQueue.length > 0 && ended) {
      var _readQueue$shift = readQueue.shift(),
          resolve = _readQueue$shift.resolve;

      resolve({
        done: true,
        value: undefined
      });
    }
  }

  function fillQueue() {
    return _fillQueue.apply(this, arguments);
  }

  function _fillQueue() {
    _fillQueue = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee() {
      var _ref, done, value;

      return _regenerator["default"].wrap(function _callee$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!ended) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return");

            case 2:
              if (!reading) {
                _context3.next = 4;
                break;
              }

              return _context3.abrupt("return");

            case 4:
              if (!(resultQueue.length >= size)) {
                _context3.next = 6;
                break;
              }

              return _context3.abrupt("return");

            case 6:
              reading = true;
              _context3.prev = 7;
              _context3.next = 10;
              return iterator.next();

            case 10:
              _ref = _context3.sent;
              done = _ref.done;
              value = _ref.value;

              if (done) {
                ended = true;
              } else {
                resultQueue.push({
                  value: value
                });
              }

              _context3.next = 20;
              break;

            case 16:
              _context3.prev = 16;
              _context3.t0 = _context3["catch"](7);
              ended = true;
              resultQueue.push({
                error: _context3.t0
              });

            case 20:
              fulfillReadQueue();
              reading = false;
              fillQueue();

            case 23:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee, null, [[7, 16]]);
    }));
    return _fillQueue.apply(this, arguments);
  }

  function next() {
    return _next2.apply(this, arguments);
  }

  function _next2() {
    _next2 = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee2() {
      var _resultQueue$shift2, error, value, deferred;

      return _regenerator["default"].wrap(function _callee2$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!(resultQueue.length > 0)) {
                _context4.next = 6;
                break;
              }

              _resultQueue$shift2 = resultQueue.shift(), error = _resultQueue$shift2.error, value = _resultQueue$shift2.value;

              if (!error) {
                _context4.next = 4;
                break;
              }

              throw error;

            case 4:
              fillQueue();
              return _context4.abrupt("return", {
                done: false,
                value: value
              });

            case 6:
              if (!ended) {
                _context4.next = 8;
                break;
              }

              return _context4.abrupt("return", {
                done: true,
                value: undefined
              });

            case 8:
              deferred = defer();
              readQueue.push(deferred);
              fillQueue();
              return _context4.abrupt("return", deferred.promise);

            case 12:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee2);
    }));
    return _next2.apply(this, arguments);
  }

  var asyncIterableIterator = _defineProperty({
    next: next
  }, Symbol.asyncIterator, function () {
    return asyncIterableIterator;
  });

  return asyncIterableIterator;
}

function syncBuffer(size, iterable) {
  var valueQueue, e, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, value, _i, _valueQueue, _value;

  return _regenerator["default"].wrap(function syncBuffer$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          valueQueue = [];
          _context5.prev = 1;
          _iteratorNormalCompletion2 = true;
          _didIteratorError2 = false;
          _iteratorError2 = undefined;
          _context5.prev = 5;
          _iterator2 = iterable[Symbol.iterator]();

        case 7:
          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
            _context5.next = 17;
            break;
          }

          value = _step2.value;
          valueQueue.push(value);

          if (!(valueQueue.length <= size)) {
            _context5.next = 12;
            break;
          }

          return _context5.abrupt("continue", 14);

        case 12:
          _context5.next = 14;
          return valueQueue.shift();

        case 14:
          _iteratorNormalCompletion2 = true;
          _context5.next = 7;
          break;

        case 17:
          _context5.next = 23;
          break;

        case 19:
          _context5.prev = 19;
          _context5.t0 = _context5["catch"](5);
          _didIteratorError2 = true;
          _iteratorError2 = _context5.t0;

        case 23:
          _context5.prev = 23;
          _context5.prev = 24;

          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }

        case 26:
          _context5.prev = 26;

          if (!_didIteratorError2) {
            _context5.next = 29;
            break;
          }

          throw _iteratorError2;

        case 29:
          return _context5.finish(26);

        case 30:
          return _context5.finish(23);

        case 31:
          _context5.next = 36;
          break;

        case 33:
          _context5.prev = 33;
          _context5.t1 = _context5["catch"](1);
          e = _context5.t1;

        case 36:
          _i = 0, _valueQueue = valueQueue;

        case 37:
          if (!(_i < _valueQueue.length)) {
            _context5.next = 44;
            break;
          }

          _value = _valueQueue[_i];
          _context5.next = 41;
          return _value;

        case 41:
          _i++;
          _context5.next = 37;
          break;

        case 44:
          if (!e) {
            _context5.next = 46;
            break;
          }

          throw e;

        case 46:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked2, null, [[1, 33], [5, 19, 23, 31], [24,, 26, 30]]);
}

function buffer(size, iterable) {
  if (iterable === undefined) {
    return function (curriedIterable) {
      return buffer(size, curriedIterable);
    };
  }

  if (iterable[Symbol.asyncIterator]) {
    return _buffer(size, iterable);
  }

  return syncBuffer(size, iterable);
}

function _collect(_x) {
  return _collect2.apply(this, arguments);
}

function _collect2() {
  _collect2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee11(iterable) {
    var e_1, _a, values, iterable_1, iterable_1_1, _value13;

    return _regenerator["default"].wrap(function _callee11$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            values = [];
            _context28.prev = 1;
            iterable_1 = __asyncValues(iterable);

          case 3:
            _context28.next = 5;
            return iterable_1.next();

          case 5:
            iterable_1_1 = _context28.sent;

            if (iterable_1_1.done) {
              _context28.next = 11;
              break;
            }

            _value13 = iterable_1_1.value;
            values.push(_value13);

          case 9:
            _context28.next = 3;
            break;

          case 11:
            _context28.next = 16;
            break;

          case 13:
            _context28.prev = 13;
            _context28.t0 = _context28["catch"](1);
            e_1 = {
              error: _context28.t0
            };

          case 16:
            _context28.prev = 16;
            _context28.prev = 17;

            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1["return"]))) {
              _context28.next = 21;
              break;
            }

            _context28.next = 21;
            return _a.call(iterable_1);

          case 21:
            _context28.prev = 21;

            if (!e_1) {
              _context28.next = 24;
              break;
            }

            throw e_1.error;

          case 24:
            return _context28.finish(21);

          case 25:
            return _context28.finish(16);

          case 26:
            return _context28.abrupt("return", values);

          case 27:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee11, null, [[1, 13, 16, 26], [17,, 21, 25]]);
  }));
  return _collect2.apply(this, arguments);
}

function collect(iterable) {
  if (iterable[Symbol.asyncIterator]) {
    return _collect(iterable);
  }

  return Array.from(iterable);
}

function _concat(iterables) {
  return __asyncGenerator(this, arguments,
  /*#__PURE__*/
  _regenerator["default"].mark(function _concat_1() {
    var e_1, _a, iterables_1, iterables_1_1, iterable;

    return _regenerator["default"].wrap(function _concat_1$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.prev = 0;
            iterables_1 = __asyncValues(iterables);

          case 2:
            _context6.next = 4;
            return __await(iterables_1.next());

          case 4:
            iterables_1_1 = _context6.sent;

            if (iterables_1_1.done) {
              _context6.next = 14;
              break;
            }

            iterable = iterables_1_1.value;
            _context6.t0 = __await;
            return _context6.delegateYield(__asyncDelegator(__asyncValues(iterable)), "t1", 9);

          case 9:
            _context6.t2 = _context6.t1;
            _context6.next = 12;
            return (0, _context6.t0)(_context6.t2);

          case 12:
            _context6.next = 2;
            break;

          case 14:
            _context6.next = 19;
            break;

          case 16:
            _context6.prev = 16;
            _context6.t3 = _context6["catch"](0);
            e_1 = {
              error: _context6.t3
            };

          case 19:
            _context6.prev = 19;
            _context6.prev = 20;

            if (!(iterables_1_1 && !iterables_1_1.done && (_a = iterables_1["return"]))) {
              _context6.next = 24;
              break;
            }

            _context6.next = 24;
            return __await(_a.call(iterables_1));

          case 24:
            _context6.prev = 24;

            if (!e_1) {
              _context6.next = 27;
              break;
            }

            throw e_1.error;

          case 27:
            return _context6.finish(24);

          case 28:
            return _context6.finish(19);

          case 29:
          case "end":
            return _context6.stop();
        }
      }
    }, _concat_1, null, [[0, 16, 19, 29], [20,, 24, 28]]);
  }));
}

function _syncConcat(iterables) {
  var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, iterable;

  return _regenerator["default"].wrap(function _syncConcat$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          _iteratorNormalCompletion3 = true;
          _didIteratorError3 = false;
          _iteratorError3 = undefined;
          _context7.prev = 3;
          _iterator3 = iterables[Symbol.iterator]();

        case 5:
          if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
            _context7.next = 11;
            break;
          }

          iterable = _step3.value;
          return _context7.delegateYield(iterable, "t0", 8);

        case 8:
          _iteratorNormalCompletion3 = true;
          _context7.next = 5;
          break;

        case 11:
          _context7.next = 17;
          break;

        case 13:
          _context7.prev = 13;
          _context7.t1 = _context7["catch"](3);
          _didIteratorError3 = true;
          _iteratorError3 = _context7.t1;

        case 17:
          _context7.prev = 17;
          _context7.prev = 18;

          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }

        case 20:
          _context7.prev = 20;

          if (!_didIteratorError3) {
            _context7.next = 23;
            break;
          }

          throw _iteratorError3;

        case 23:
          return _context7.finish(20);

        case 24:
          return _context7.finish(17);

        case 25:
        case "end":
          return _context7.stop();
      }
    }
  }, _marked3, null, [[3, 13, 17, 25], [18,, 20, 24]]);
}

function concat() {
  for (var _len = arguments.length, iterables = new Array(_len), _key = 0; _key < _len; _key++) {
    iterables[_key] = arguments[_key];
  }

  var hasAnyAsync = iterables.find(function (itr) {
    return itr[Symbol.asyncIterator] !== undefined;
  });

  if (hasAnyAsync) {
    return _concat(iterables);
  } else {
    return _syncConcat(iterables);
  }
}

function _consume(_x2) {
  return _consume2.apply(this, arguments);
}

function _consume2() {
  _consume2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee12(iterable) {
    var e_1, _a, iterable_1, iterable_1_1, _val2;

    return _regenerator["default"].wrap(function _callee12$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.prev = 0;
            iterable_1 = __asyncValues(iterable);

          case 2:
            _context29.next = 4;
            return iterable_1.next();

          case 4:
            iterable_1_1 = _context29.sent;

            if (iterable_1_1.done) {
              _context29.next = 9;
              break;
            }

            _val2 = iterable_1_1.value;

          case 7:
            _context29.next = 2;
            break;

          case 9:
            _context29.next = 14;
            break;

          case 11:
            _context29.prev = 11;
            _context29.t0 = _context29["catch"](0);
            e_1 = {
              error: _context29.t0
            };

          case 14:
            _context29.prev = 14;
            _context29.prev = 15;

            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1["return"]))) {
              _context29.next = 19;
              break;
            }

            _context29.next = 19;
            return _a.call(iterable_1);

          case 19:
            _context29.prev = 19;

            if (!e_1) {
              _context29.next = 22;
              break;
            }

            throw e_1.error;

          case 22:
            return _context29.finish(19);

          case 23:
            return _context29.finish(14);

          case 24:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee12, null, [[0, 11, 14, 24], [15,, 19, 23]]);
  }));
  return _consume2.apply(this, arguments);
}

function consume(iterable) {
  if (iterable[Symbol.asyncIterator]) {
    return _consume(iterable);
  }
}

function _filter(filterFunc, iterable) {
  return __asyncGenerator(this, arguments,
  /*#__PURE__*/
  _regenerator["default"].mark(function _filter_1() {
    var e_1, _a, iterable_1, iterable_1_1, _data;

    return _regenerator["default"].wrap(function _filter_1$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.prev = 0;
            iterable_1 = __asyncValues(iterable);

          case 2:
            _context8.next = 4;
            return __await(iterable_1.next());

          case 4:
            iterable_1_1 = _context8.sent;

            if (iterable_1_1.done) {
              _context8.next = 16;
              break;
            }

            _data = iterable_1_1.value;
            _context8.next = 9;
            return __await(filterFunc(_data));

          case 9:
            if (!_context8.sent) {
              _context8.next = 14;
              break;
            }

            _context8.next = 12;
            return __await(_data);

          case 12:
            _context8.next = 14;
            return _context8.sent;

          case 14:
            _context8.next = 2;
            break;

          case 16:
            _context8.next = 21;
            break;

          case 18:
            _context8.prev = 18;
            _context8.t0 = _context8["catch"](0);
            e_1 = {
              error: _context8.t0
            };

          case 21:
            _context8.prev = 21;
            _context8.prev = 22;

            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1["return"]))) {
              _context8.next = 26;
              break;
            }

            _context8.next = 26;
            return __await(_a.call(iterable_1));

          case 26:
            _context8.prev = 26;

            if (!e_1) {
              _context8.next = 29;
              break;
            }

            throw e_1.error;

          case 29:
            return _context8.finish(26);

          case 30:
            return _context8.finish(21);

          case 31:
          case "end":
            return _context8.stop();
        }
      }
    }, _filter_1, null, [[0, 18, 21, 31], [22,, 26, 30]]);
  }));
}

function filter(filterFunc, iterable) {
  if (iterable === undefined) {
    return function (curriedIterable) {
      return _filter(filterFunc, curriedIterable);
    };
  }

  return _filter(filterFunc, iterable);
}

function flatten(iterable) {
  return __asyncGenerator(this, arguments,
  /*#__PURE__*/
  _regenerator["default"].mark(function flatten_1() {
    var e_1, _a, iterable_1, iterable_1_1, maybeItr;

    return _regenerator["default"].wrap(function flatten_1$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.prev = 0;
            iterable_1 = __asyncValues(iterable);

          case 2:
            _context9.next = 4;
            return __await(iterable_1.next());

          case 4:
            iterable_1_1 = _context9.sent;

            if (iterable_1_1.done) {
              _context9.next = 21;
              break;
            }

            maybeItr = iterable_1_1.value;

            if (!(maybeItr && typeof maybeItr !== 'string' && (maybeItr[Symbol.iterator] || maybeItr[Symbol.asyncIterator]))) {
              _context9.next = 15;
              break;
            }

            _context9.t0 = __await;
            return _context9.delegateYield(__asyncDelegator(__asyncValues(flatten(maybeItr))), "t1", 10);

          case 10:
            _context9.t2 = _context9.t1;
            _context9.next = 13;
            return (0, _context9.t0)(_context9.t2);

          case 13:
            _context9.next = 19;
            break;

          case 15:
            _context9.next = 17;
            return __await(maybeItr);

          case 17:
            _context9.next = 19;
            return _context9.sent;

          case 19:
            _context9.next = 2;
            break;

          case 21:
            _context9.next = 26;
            break;

          case 23:
            _context9.prev = 23;
            _context9.t3 = _context9["catch"](0);
            e_1 = {
              error: _context9.t3
            };

          case 26:
            _context9.prev = 26;
            _context9.prev = 27;

            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1["return"]))) {
              _context9.next = 31;
              break;
            }

            _context9.next = 31;
            return __await(_a.call(iterable_1));

          case 31:
            _context9.prev = 31;

            if (!e_1) {
              _context9.next = 34;
              break;
            }

            throw e_1.error;

          case 34:
            return _context9.finish(31);

          case 35:
            return _context9.finish(26);

          case 36:
          case "end":
            return _context9.stop();
        }
      }
    }, flatten_1, null, [[0, 23, 26, 36], [27,, 31, 35]]);
  }));
}

function _map(func, iterable) {
  return __asyncGenerator(this, arguments,
  /*#__PURE__*/
  _regenerator["default"].mark(function _map_1() {
    var e_1, _a, iterable_1, iterable_1_1, val;

    return _regenerator["default"].wrap(function _map_1$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.prev = 0;
            iterable_1 = __asyncValues(iterable);

          case 2:
            _context10.next = 4;
            return __await(iterable_1.next());

          case 4:
            iterable_1_1 = _context10.sent;

            if (iterable_1_1.done) {
              _context10.next = 17;
              break;
            }

            val = iterable_1_1.value;
            _context10.t0 = __await;
            _context10.next = 10;
            return __await(func(val));

          case 10:
            _context10.t1 = _context10.sent;
            _context10.next = 13;
            return (0, _context10.t0)(_context10.t1);

          case 13:
            _context10.next = 15;
            return _context10.sent;

          case 15:
            _context10.next = 2;
            break;

          case 17:
            _context10.next = 22;
            break;

          case 19:
            _context10.prev = 19;
            _context10.t2 = _context10["catch"](0);
            e_1 = {
              error: _context10.t2
            };

          case 22:
            _context10.prev = 22;
            _context10.prev = 23;

            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1["return"]))) {
              _context10.next = 27;
              break;
            }

            _context10.next = 27;
            return __await(_a.call(iterable_1));

          case 27:
            _context10.prev = 27;

            if (!e_1) {
              _context10.next = 30;
              break;
            }

            throw e_1.error;

          case 30:
            return _context10.finish(27);

          case 31:
            return _context10.finish(22);

          case 32:
          case "end":
            return _context10.stop();
        }
      }
    }, _map_1, null, [[0, 19, 22, 32], [23,, 27, 31]]);
  }));
}

function map(func, iterable) {
  if (iterable === undefined) {
    return function (curriedIterable) {
      return _map(func, curriedIterable);
    };
  }

  return _map(func, iterable);
}

function flatMap(func, iterable) {
  if (iterable === undefined) {
    return function (curriedIterable) {
      return flatMap(func, curriedIterable);
    };
  }

  return filter(function (i) {
    return i !== undefined && i !== null;
  }, flatten(map(func, iterable)));
}

function _flatTransform(concurrency, func, iterable) {
  var iterator = getIterator(iterable);
  var resultQueue = [];
  var readQueue = [];
  var ended = false;
  var reading = false;
  var inflightCount = 0;
  var lastError = null;

  function fulfillReadQueue() {
    while (readQueue.length > 0 && resultQueue.length > 0) {
      var _readQueue$shift2 = readQueue.shift(),
          resolve = _readQueue$shift2.resolve;

      var _value2 = resultQueue.shift();

      resolve({
        done: false,
        value: _value2
      });
    }

    while (readQueue.length > 0 && inflightCount === 0 && ended) {
      var _readQueue$shift3 = readQueue.shift(),
          resolve = _readQueue$shift3.resolve,
          reject = _readQueue$shift3.reject;

      if (lastError) {
        reject(lastError);
        lastError = null;
      } else {
        resolve({
          done: true,
          value: undefined
        });
      }
    }
  }

  function fillQueue() {
    return _fillQueue2.apply(this, arguments);
  }

  function _fillQueue2() {
    _fillQueue2 = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee3() {
      var _ref2, done, _value3;

      return _regenerator["default"].wrap(function _callee3$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              if (!ended) {
                _context11.next = 3;
                break;
              }

              fulfillReadQueue();
              return _context11.abrupt("return");

            case 3:
              if (!reading) {
                _context11.next = 5;
                break;
              }

              return _context11.abrupt("return");

            case 5:
              if (!(inflightCount + resultQueue.length >= concurrency)) {
                _context11.next = 7;
                break;
              }

              return _context11.abrupt("return");

            case 7:
              reading = true;
              inflightCount++;
              _context11.prev = 9;
              _context11.next = 12;
              return iterator.next();

            case 12:
              _ref2 = _context11.sent;
              done = _ref2.done;
              _value3 = _ref2.value;

              if (done) {
                ended = true;
                inflightCount--;
                fulfillReadQueue();
              } else {
                mapAndQueue(_value3);
              }

              _context11.next = 24;
              break;

            case 18:
              _context11.prev = 18;
              _context11.t0 = _context11["catch"](9);
              ended = true;
              inflightCount--;
              lastError = _context11.t0;
              fulfillReadQueue();

            case 24:
              reading = false;
              fillQueue();

            case 26:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee3, null, [[9, 18]]);
    }));
    return _fillQueue2.apply(this, arguments);
  }

  function mapAndQueue(_x3) {
    return _mapAndQueue.apply(this, arguments);
  }

  function _mapAndQueue() {
    _mapAndQueue = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee4(itrValue) {
      var e_1, _a, _value4, _b, _c, asyncVal;

      return _regenerator["default"].wrap(function _callee4$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _context12.prev = 0;
              _context12.next = 3;
              return func(itrValue);

            case 3:
              _value4 = _context12.sent;

              if (!(_value4 && _value4[Symbol.asyncIterator])) {
                _context12.next = 32;
                break;
              }

              _context12.prev = 5;
              _b = __asyncValues(_value4);

            case 7:
              _context12.next = 9;
              return _b.next();

            case 9:
              _c = _context12.sent;

              if (_c.done) {
                _context12.next = 15;
                break;
              }

              asyncVal = _c.value;
              resultQueue.push(asyncVal);

            case 13:
              _context12.next = 7;
              break;

            case 15:
              _context12.next = 20;
              break;

            case 17:
              _context12.prev = 17;
              _context12.t0 = _context12["catch"](5);
              e_1 = {
                error: _context12.t0
              };

            case 20:
              _context12.prev = 20;
              _context12.prev = 21;

              if (!(_c && !_c.done && (_a = _b["return"]))) {
                _context12.next = 25;
                break;
              }

              _context12.next = 25;
              return _a.call(_b);

            case 25:
              _context12.prev = 25;

              if (!e_1) {
                _context12.next = 28;
                break;
              }

              throw e_1.error;

            case 28:
              return _context12.finish(25);

            case 29:
              return _context12.finish(20);

            case 30:
              _context12.next = 33;
              break;

            case 32:
              resultQueue.push(_value4);

            case 33:
              _context12.next = 39;
              break;

            case 35:
              _context12.prev = 35;
              _context12.t1 = _context12["catch"](0);
              ended = true;
              lastError = _context12.t1;

            case 39:
              inflightCount--;
              fulfillReadQueue();
              fillQueue();

            case 42:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee4, null, [[0, 35], [5, 17, 20, 30], [21,, 25, 29]]);
    }));
    return _mapAndQueue.apply(this, arguments);
  }

  function next() {
    return _next3.apply(this, arguments);
  }

  function _next3() {
    _next3 = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee5() {
      var deferred, value;
      return _regenerator["default"].wrap(function _callee5$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              if (!(resultQueue.length === 0)) {
                _context13.next = 5;
                break;
              }

              deferred = defer();
              readQueue.push(deferred);
              fillQueue();
              return _context13.abrupt("return", deferred.promise);

            case 5:
              value = resultQueue.shift();
              fillQueue();
              return _context13.abrupt("return", {
                done: false,
                value: value
              });

            case 8:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee5);
    }));
    return _next3.apply(this, arguments);
  }

  var asyncIterableIterator = _defineProperty({
    next: next
  }, Symbol.asyncIterator, function () {
    return asyncIterableIterator;
  });

  return asyncIterableIterator;
}

function flatTransform(concurrency, func, iterable) {
  if (func === undefined) {
    return function (curriedFunc, curriedIterable) {
      return curriedIterable ? flatTransform(concurrency, curriedFunc, curriedIterable) : flatTransform(concurrency, curriedFunc);
    };
  }

  if (iterable === undefined) {
    return function (curriedIterable) {
      return flatTransform(concurrency, func, curriedIterable);
    };
  }

  return filter(function (i) {
    return i !== undefined && i !== null;
  }, flatten(_flatTransform(concurrency, func, iterable)));
}

function onceReadable(_x4) {
  return _onceReadable.apply(this, arguments);
}

function _onceReadable() {
  _onceReadable = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee13(stream) {
    return _regenerator["default"].wrap(function _callee13$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            return _context30.abrupt("return", new Promise(function (resolve) {
              stream.once('readable', function () {
                resolve();
              });
            }));

          case 1:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee13);
  }));
  return _onceReadable.apply(this, arguments);
}

function _fromStream(stream) {
  return __asyncGenerator(this, arguments,
  /*#__PURE__*/
  _regenerator["default"].mark(function _fromStream_1() {
    var _data2;

    return _regenerator["default"].wrap(function _fromStream_1$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            if (false) {}

            _data2 = stream.read();

            if (!(_data2 !== null)) {
              _context14.next = 8;
              break;
            }

            _context14.next = 5;
            return __await(_data2);

          case 5:
            _context14.next = 7;
            return _context14.sent;

          case 7:
            return _context14.abrupt("continue", 0);

          case 8:
            if (!stream._readableState.ended) {
              _context14.next = 12;
              break;
            }

            _context14.next = 11;
            return __await(void 0);

          case 11:
            return _context14.abrupt("return", _context14.sent);

          case 12:
            _context14.next = 14;
            return __await(onceReadable(stream));

          case 14:
            _context14.next = 0;
            break;

          case 16:
          case "end":
            return _context14.stop();
        }
      }
    }, _fromStream_1);
  }));
}

function fromStream(stream) {
  if (typeof stream[Symbol.asyncIterator] === 'function') {
    return stream;
  }

  return _fromStream(stream);
}

function merge() {
  for (var _len2 = arguments.length, iterables = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    iterables[_key2] = arguments[_key2];
  }

  return __asyncGenerator(this, arguments,
  /*#__PURE__*/
  _regenerator["default"].mark(function merge_1() {
    var sources, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, iterator, nextVal;

    return _regenerator["default"].wrap(function merge_1$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            sources = new Set(iterables.map(getIterator));

          case 1:
            if (!(sources.size > 0)) {
              _context15.next = 39;
              break;
            }

            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            _context15.prev = 5;
            _iterator4 = sources[Symbol.iterator]();

          case 7:
            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
              _context15.next = 23;
              break;
            }

            iterator = _step4.value;
            _context15.next = 11;
            return __await(iterator.next());

          case 11:
            nextVal = _context15.sent;

            if (!nextVal.done) {
              _context15.next = 16;
              break;
            }

            sources["delete"](iterator);
            _context15.next = 20;
            break;

          case 16:
            _context15.next = 18;
            return __await(nextVal.value);

          case 18:
            _context15.next = 20;
            return _context15.sent;

          case 20:
            _iteratorNormalCompletion4 = true;
            _context15.next = 7;
            break;

          case 23:
            _context15.next = 29;
            break;

          case 25:
            _context15.prev = 25;
            _context15.t0 = _context15["catch"](5);
            _didIteratorError4 = true;
            _iteratorError4 = _context15.t0;

          case 29:
            _context15.prev = 29;
            _context15.prev = 30;

            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }

          case 32:
            _context15.prev = 32;

            if (!_didIteratorError4) {
              _context15.next = 35;
              break;
            }

            throw _iteratorError4;

          case 35:
            return _context15.finish(32);

          case 36:
            return _context15.finish(29);

          case 37:
            _context15.next = 1;
            break;

          case 39:
          case "end":
            return _context15.stop();
        }
      }
    }, merge_1, null, [[5, 25, 29, 37], [30,, 32, 36]]);
  }));
}

function pipeline(firstFn) {
  var previousFn = firstFn();

  for (var _len3 = arguments.length, fns = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    fns[_key3 - 1] = arguments[_key3];
  }

  for (var _i2 = 0, _fns = fns; _i2 < _fns.length; _i2++) {
    var func = _fns[_i2];
    previousFn = func(previousFn);
  }

  return previousFn;
}

function _parallelMap(concurrency, func, iterable) {
  return __asyncGenerator(this, arguments,
  /*#__PURE__*/
  _regenerator["default"].mark(function _parallelMap_1() {
    var transformError, wrapFunc, stopOnError, output, itr, _ref3, _value6, done, val;

    return _regenerator["default"].wrap(function _parallelMap_1$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            transformError = null;

            wrapFunc = function wrapFunc(value) {
              return {
                value: func(value)
              };
            };

            stopOnError = function stopOnError(source) {
              return __asyncGenerator(this, arguments,
              /*#__PURE__*/
              _regenerator["default"].mark(function _callee6() {
                var e_1, _a, source_1, source_1_1, _value5;

                return _regenerator["default"].wrap(function _callee6$(_context16) {
                  while (1) {
                    switch (_context16.prev = _context16.next) {
                      case 0:
                        _context16.prev = 0;
                        source_1 = __asyncValues(source);

                      case 2:
                        _context16.next = 4;
                        return __await(source_1.next());

                      case 4:
                        source_1_1 = _context16.sent;

                        if (source_1_1.done) {
                          _context16.next = 17;
                          break;
                        }

                        _value5 = source_1_1.value;

                        if (!transformError) {
                          _context16.next = 11;
                          break;
                        }

                        _context16.next = 10;
                        return __await(void 0);

                      case 10:
                        return _context16.abrupt("return", _context16.sent);

                      case 11:
                        _context16.next = 13;
                        return __await(_value5);

                      case 13:
                        _context16.next = 15;
                        return _context16.sent;

                      case 15:
                        _context16.next = 2;
                        break;

                      case 17:
                        _context16.next = 22;
                        break;

                      case 19:
                        _context16.prev = 19;
                        _context16.t0 = _context16["catch"](0);
                        e_1 = {
                          error: _context16.t0
                        };

                      case 22:
                        _context16.prev = 22;
                        _context16.prev = 23;

                        if (!(source_1_1 && !source_1_1.done && (_a = source_1["return"]))) {
                          _context16.next = 27;
                          break;
                        }

                        _context16.next = 27;
                        return __await(_a.call(source_1));

                      case 27:
                        _context16.prev = 27;

                        if (!e_1) {
                          _context16.next = 30;
                          break;
                        }

                        throw e_1.error;

                      case 30:
                        return _context16.finish(27);

                      case 31:
                        return _context16.finish(22);

                      case 32:
                      case "end":
                        return _context16.stop();
                    }
                  }
                }, _callee6, null, [[0, 19, 22, 32], [23,, 27, 31]]);
              }));
            };

            output = pipeline(function () {
              return iterable;
            }, buffer(1), stopOnError, map(wrapFunc), buffer(concurrency));
            itr = getIterator(output);

          case 5:
            if (false) {}

            _context17.next = 8;
            return __await(itr.next());

          case 8:
            _ref3 = _context17.sent;
            _value6 = _ref3.value;
            done = _ref3.done;

            if (!done) {
              _context17.next = 13;
              break;
            }

            return _context17.abrupt("break", 29);

          case 13:
            _context17.prev = 13;
            _context17.next = 16;
            return __await(_value6.value);

          case 16:
            val = _context17.sent;

            if (transformError) {
              _context17.next = 22;
              break;
            }

            _context17.next = 20;
            return __await(val);

          case 20:
            _context17.next = 22;
            return _context17.sent;

          case 22:
            _context17.next = 27;
            break;

          case 24:
            _context17.prev = 24;
            _context17.t0 = _context17["catch"](13);
            transformError = _context17.t0;

          case 27:
            _context17.next = 5;
            break;

          case 29:
            if (!transformError) {
              _context17.next = 31;
              break;
            }

            throw transformError;

          case 31:
          case "end":
            return _context17.stop();
        }
      }
    }, _parallelMap_1, null, [[13, 24]]);
  }));
}

function parallelMap(concurrency, func, iterable) {
  if (func === undefined) {
    return function (curriedFunc, curriedIterable) {
      return parallelMap(concurrency, curriedFunc, curriedIterable);
    };
  }

  if (iterable === undefined) {
    return function (curriedIterable) {
      return parallelMap(concurrency, func, curriedIterable);
    };
  }

  return _parallelMap(concurrency, func, iterable);
}

function parallelFlatMap(concurrency, func, iterable) {
  if (func === undefined) {
    return function (curriedFunc, curriedIterable) {
      return curriedIterable ? parallelFlatMap(concurrency, curriedFunc, curriedIterable) : parallelFlatMap(concurrency, curriedFunc);
    };
  }

  if (iterable === undefined) {
    return function (curriedIterable) {
      return parallelFlatMap(concurrency, func, curriedIterable);
    };
  }

  return filter(function (i) {
    return i !== undefined && i !== null;
  }, flatten(parallelMap(concurrency, func, iterable)));
}

function parallelMerge() {
  for (var _len4 = arguments.length, iterables = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    iterables[_key4] = arguments[_key4];
  }

  return __asyncGenerator(this, arguments,
  /*#__PURE__*/
  _regenerator["default"].mark(function parallelMerge_1() {
    var inputs, concurrentWork, values, queueNext, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, input, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _step6$value, _value7;

    return _regenerator["default"].wrap(function parallelMerge_1$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            inputs = iterables.map(getIterator);
            concurrentWork = new Set();
            values = new Map();

            queueNext = function queueNext(input) {
              var nextVal = Promise.resolve(input.next()).then(
              /*#__PURE__*/
              function () {
                var _ref5 = _asyncToGenerator(
                /*#__PURE__*/
                _regenerator["default"].mark(function _callee7(_ref4) {
                  var done, value;
                  return _regenerator["default"].wrap(function _callee7$(_context18) {
                    while (1) {
                      switch (_context18.prev = _context18.next) {
                        case 0:
                          done = _ref4.done, value = _ref4.value;

                          if (!done) {
                            values.set(input, value);
                          }

                          concurrentWork["delete"](nextVal);

                        case 3:
                        case "end":
                          return _context18.stop();
                      }
                    }
                  }, _callee7);
                }));

                return function (_x5) {
                  return _ref5.apply(this, arguments);
                };
              }());
              concurrentWork.add(nextVal);
            };

            _iteratorNormalCompletion5 = true;
            _didIteratorError5 = false;
            _iteratorError5 = undefined;
            _context19.prev = 7;

            for (_iterator5 = inputs[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              input = _step5.value;
              queueNext(input);
            }

            _context19.next = 15;
            break;

          case 11:
            _context19.prev = 11;
            _context19.t0 = _context19["catch"](7);
            _didIteratorError5 = true;
            _iteratorError5 = _context19.t0;

          case 15:
            _context19.prev = 15;
            _context19.prev = 16;

            if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
              _iterator5["return"]();
            }

          case 18:
            _context19.prev = 18;

            if (!_didIteratorError5) {
              _context19.next = 21;
              break;
            }

            throw _iteratorError5;

          case 21:
            return _context19.finish(18);

          case 22:
            return _context19.finish(15);

          case 23:
            if (false) {}

            if (!(concurrentWork.size === 0)) {
              _context19.next = 28;
              break;
            }

            _context19.next = 27;
            return __await(void 0);

          case 27:
            return _context19.abrupt("return", _context19.sent);

          case 28:
            _context19.next = 30;
            return __await(Promise.race(concurrentWork));

          case 30:
            _iteratorNormalCompletion6 = true;
            _didIteratorError6 = false;
            _iteratorError6 = undefined;
            _context19.prev = 33;
            _iterator6 = values[Symbol.iterator]();

          case 35:
            if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
              _context19.next = 46;
              break;
            }

            _step6$value = _slicedToArray(_step6.value, 2), input = _step6$value[0], _value7 = _step6$value[1];
            values["delete"](input);
            _context19.next = 40;
            return __await(_value7);

          case 40:
            _context19.next = 42;
            return _context19.sent;

          case 42:
            queueNext(input);

          case 43:
            _iteratorNormalCompletion6 = true;
            _context19.next = 35;
            break;

          case 46:
            _context19.next = 52;
            break;

          case 48:
            _context19.prev = 48;
            _context19.t1 = _context19["catch"](33);
            _didIteratorError6 = true;
            _iteratorError6 = _context19.t1;

          case 52:
            _context19.prev = 52;
            _context19.prev = 53;

            if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
              _iterator6["return"]();
            }

          case 55:
            _context19.prev = 55;

            if (!_didIteratorError6) {
              _context19.next = 58;
              break;
            }

            throw _iteratorError6;

          case 58:
            return _context19.finish(55);

          case 59:
            return _context19.finish(52);

          case 60:
            _context19.next = 23;
            break;

          case 62:
          case "end":
            return _context19.stop();
        }
      }
    }, parallelMerge_1, null, [[7, 11, 15, 23], [16,, 18, 22], [33, 48, 52, 60], [53,, 55, 59]]);
  }));
}

function _reduce(_x6, _x7, _x8) {
  return _reduce2.apply(this, arguments);
}

function _reduce2() {
  _reduce2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee14(func, start, iterable) {
    var e_1, _a, value, iterable_1, iterable_1_1, nextItem;

    return _regenerator["default"].wrap(function _callee14$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            value = start;
            _context31.prev = 1;
            iterable_1 = __asyncValues(iterable);

          case 3:
            _context31.next = 5;
            return iterable_1.next();

          case 5:
            iterable_1_1 = _context31.sent;

            if (iterable_1_1.done) {
              _context31.next = 13;
              break;
            }

            nextItem = iterable_1_1.value;
            _context31.next = 10;
            return func(value, nextItem);

          case 10:
            value = _context31.sent;

          case 11:
            _context31.next = 3;
            break;

          case 13:
            _context31.next = 18;
            break;

          case 15:
            _context31.prev = 15;
            _context31.t0 = _context31["catch"](1);
            e_1 = {
              error: _context31.t0
            };

          case 18:
            _context31.prev = 18;
            _context31.prev = 19;

            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1["return"]))) {
              _context31.next = 23;
              break;
            }

            _context31.next = 23;
            return _a.call(iterable_1);

          case 23:
            _context31.prev = 23;

            if (!e_1) {
              _context31.next = 26;
              break;
            }

            throw e_1.error;

          case 26:
            return _context31.finish(23);

          case 27:
            return _context31.finish(18);

          case 28:
            return _context31.abrupt("return", value);

          case 29:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee14, null, [[1, 15, 18, 28], [19,, 23, 27]]);
  }));
  return _reduce2.apply(this, arguments);
}

function reduce(func, start, iterable) {
  if (start === undefined) {
    return function (curriedStart, curriedIterable) {
      return curriedIterable ? reduce(func, curriedStart, curriedIterable) : reduce(func, curriedStart);
    };
  }

  if (iterable === undefined) {
    return function (curriedIterable) {
      return reduce(func, start, curriedIterable);
    };
  }

  return _reduce(func, start, iterable);
}

function _take(count, iterable) {
  return __asyncGenerator(this, arguments,
  /*#__PURE__*/
  _regenerator["default"].mark(function _take_1() {
    var e_1, _a, taken, iterable_1, iterable_1_1, val;

    return _regenerator["default"].wrap(function _take_1$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            taken = 0;
            _context20.prev = 1;
            iterable_1 = __asyncValues(iterable);

          case 3:
            _context20.next = 5;
            return __await(iterable_1.next());

          case 5:
            iterable_1_1 = _context20.sent;

            if (iterable_1_1.done) {
              _context20.next = 23;
              break;
            }

            val = iterable_1_1.value;
            _context20.t0 = __await;
            _context20.next = 11;
            return __await(val);

          case 11:
            _context20.t1 = _context20.sent;
            _context20.next = 14;
            return (0, _context20.t0)(_context20.t1);

          case 14:
            _context20.next = 16;
            return _context20.sent;

          case 16:
            taken++;

            if (!(taken >= count)) {
              _context20.next = 21;
              break;
            }

            _context20.next = 20;
            return __await(void 0);

          case 20:
            return _context20.abrupt("return", _context20.sent);

          case 21:
            _context20.next = 3;
            break;

          case 23:
            _context20.next = 28;
            break;

          case 25:
            _context20.prev = 25;
            _context20.t2 = _context20["catch"](1);
            e_1 = {
              error: _context20.t2
            };

          case 28:
            _context20.prev = 28;
            _context20.prev = 29;

            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1["return"]))) {
              _context20.next = 33;
              break;
            }

            _context20.next = 33;
            return __await(_a.call(iterable_1));

          case 33:
            _context20.prev = 33;

            if (!e_1) {
              _context20.next = 36;
              break;
            }

            throw e_1.error;

          case 36:
            return _context20.finish(33);

          case 37:
            return _context20.finish(28);

          case 38:
          case "end":
            return _context20.stop();
        }
      }
    }, _take_1, null, [[1, 25, 28, 38], [29,, 33, 37]]);
  }));
}

function _syncTake(count, iterable) {
  var taken, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, val;

  return _regenerator["default"].wrap(function _syncTake$(_context21) {
    while (1) {
      switch (_context21.prev = _context21.next) {
        case 0:
          taken = 0;
          _iteratorNormalCompletion7 = true;
          _didIteratorError7 = false;
          _iteratorError7 = undefined;
          _context21.prev = 4;
          _iterator7 = iterable[Symbol.iterator]();

        case 6:
          if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
            _context21.next = 16;
            break;
          }

          val = _step7.value;
          _context21.next = 10;
          return val;

        case 10:
          taken++;

          if (!(taken >= count)) {
            _context21.next = 13;
            break;
          }

          return _context21.abrupt("return");

        case 13:
          _iteratorNormalCompletion7 = true;
          _context21.next = 6;
          break;

        case 16:
          _context21.next = 22;
          break;

        case 18:
          _context21.prev = 18;
          _context21.t0 = _context21["catch"](4);
          _didIteratorError7 = true;
          _iteratorError7 = _context21.t0;

        case 22:
          _context21.prev = 22;
          _context21.prev = 23;

          if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
            _iterator7["return"]();
          }

        case 25:
          _context21.prev = 25;

          if (!_didIteratorError7) {
            _context21.next = 28;
            break;
          }

          throw _iteratorError7;

        case 28:
          return _context21.finish(25);

        case 29:
          return _context21.finish(22);

        case 30:
        case "end":
          return _context21.stop();
      }
    }
  }, _marked4, null, [[4, 18, 22, 30], [23,, 25, 29]]);
}

function take(count, iterable) {
  if (iterable === undefined) {
    return function (curriedIterable) {
      return take(count, curriedIterable);
    };
  }

  if (iterable[Symbol.asyncIterator]) {
    return _take(count, iterable);
  }

  return _syncTake(count, iterable);
}

function _asyncTap(func, iterable) {
  return __asyncGenerator(this, arguments,
  /*#__PURE__*/
  _regenerator["default"].mark(function _asyncTap_1() {
    var e_1, _a, iterable_1, iterable_1_1, _val;

    return _regenerator["default"].wrap(function _asyncTap_1$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            _context22.prev = 0;
            iterable_1 = __asyncValues(iterable);

          case 2:
            _context22.next = 4;
            return __await(iterable_1.next());

          case 4:
            iterable_1_1 = _context22.sent;

            if (iterable_1_1.done) {
              _context22.next = 15;
              break;
            }

            _val = iterable_1_1.value;
            _context22.next = 9;
            return __await(func(_val));

          case 9:
            _context22.next = 11;
            return __await(_val);

          case 11:
            _context22.next = 13;
            return _context22.sent;

          case 13:
            _context22.next = 2;
            break;

          case 15:
            _context22.next = 20;
            break;

          case 17:
            _context22.prev = 17;
            _context22.t0 = _context22["catch"](0);
            e_1 = {
              error: _context22.t0
            };

          case 20:
            _context22.prev = 20;
            _context22.prev = 21;

            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1["return"]))) {
              _context22.next = 25;
              break;
            }

            _context22.next = 25;
            return __await(_a.call(iterable_1));

          case 25:
            _context22.prev = 25;

            if (!e_1) {
              _context22.next = 28;
              break;
            }

            throw e_1.error;

          case 28:
            return _context22.finish(25);

          case 29:
            return _context22.finish(20);

          case 30:
          case "end":
            return _context22.stop();
        }
      }
    }, _asyncTap_1, null, [[0, 17, 20, 30], [21,, 25, 29]]);
  }));
}

function tap(func, iterable) {
  if (iterable === undefined) {
    return function (curriedIterable) {
      return _asyncTap(func, curriedIterable);
    };
  }

  return _asyncTap(func, iterable);
}

function addTime(a, b) {
  var seconds = a[0] + b[0];
  var nanoseconds = a[1] + b[1];

  if (nanoseconds >= 1000000000) {
    var remainder = nanoseconds % 1000000000;
    seconds += (nanoseconds - remainder) / 1000000000;
    nanoseconds = remainder;
  }

  return [seconds, nanoseconds];
}

function _asyncTime(config, iterable) {
  return __asyncGenerator(this, arguments,
  /*#__PURE__*/
  _regenerator["default"].mark(function _asyncTime_1() {
    var itr, total, start, _ref6, _value8, done, delta;

    return _regenerator["default"].wrap(function _asyncTime_1$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            itr = iterable[Symbol.asyncIterator]();
            total = [0, 0];

          case 2:
            if (false) {}

            start = process.hrtime();
            _context23.next = 6;
            return __await(itr.next());

          case 6:
            _ref6 = _context23.sent;
            _value8 = _ref6.value;
            done = _ref6.done;
            delta = process.hrtime(start);
            total = addTime(total, delta);

            if (config.progress) {
              config.progress(delta, total);
            }

            if (!done) {
              _context23.next = 17;
              break;
            }

            if (config.total) {
              config.total(total);
            }

            _context23.next = 16;
            return __await(_value8);

          case 16:
            return _context23.abrupt("return", _context23.sent);

          case 17:
            _context23.next = 19;
            return __await(_value8);

          case 19:
            _context23.next = 21;
            return _context23.sent;

          case 21:
            _context23.next = 2;
            break;

          case 23:
          case "end":
            return _context23.stop();
        }
      }
    }, _asyncTime_1);
  }));
}

function _syncTime(config, iterable) {
  var itr, total, start, _itr$next, _value9, done, delta;

  return _regenerator["default"].wrap(function _syncTime$(_context24) {
    while (1) {
      switch (_context24.prev = _context24.next) {
        case 0:
          itr = iterable[Symbol.iterator]();
          total = [0, 0];

        case 2:
          if (false) {}

          start = process.hrtime();
          _itr$next = itr.next(), _value9 = _itr$next.value, done = _itr$next.done;
          delta = process.hrtime(start);
          total = addTime(total, delta);

          if (config.progress) {
            config.progress(delta, total);
          }

          if (!done) {
            _context24.next = 11;
            break;
          }

          if (config.total) {
            config.total(total);
          }

          return _context24.abrupt("return", _value9);

        case 11:
          _context24.next = 13;
          return _value9;

        case 13:
          _context24.next = 2;
          break;

        case 15:
        case "end":
          return _context24.stop();
      }
    }
  }, _marked5);
}

function time() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var iterable = arguments.length > 1 ? arguments[1] : undefined;

  if (iterable === undefined) {
    return function (curriedIterable) {
      return time(config, curriedIterable);
    };
  }

  if (iterable[Symbol.asyncIterator] !== undefined) {
    return _asyncTime(config, iterable);
  } else {
    return _syncTime(config, iterable);
  }
}

function _transform(concurrency, func, iterable) {
  var iterator = getIterator(iterable);
  var resultQueue = [];
  var readQueue = [];
  var ended = false;
  var reading = false;
  var inflightCount = 0;
  var lastError = null;

  function fulfillReadQueue() {
    while (readQueue.length > 0 && resultQueue.length > 0) {
      var _readQueue$shift4 = readQueue.shift(),
          resolve = _readQueue$shift4.resolve;

      var _value10 = resultQueue.shift();

      resolve({
        done: false,
        value: _value10
      });
    }

    while (readQueue.length > 0 && inflightCount === 0 && ended) {
      var _readQueue$shift5 = readQueue.shift(),
          resolve = _readQueue$shift5.resolve,
          reject = _readQueue$shift5.reject;

      if (lastError) {
        reject(lastError);
        lastError = null;
      } else {
        resolve({
          done: true,
          value: undefined
        });
      }
    }
  }

  function fillQueue() {
    return _fillQueue3.apply(this, arguments);
  }

  function _fillQueue3() {
    _fillQueue3 = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee8() {
      var _ref7, _done, _value11;

      return _regenerator["default"].wrap(function _callee8$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              if (!ended) {
                _context25.next = 3;
                break;
              }

              fulfillReadQueue();
              return _context25.abrupt("return");

            case 3:
              if (!reading) {
                _context25.next = 5;
                break;
              }

              return _context25.abrupt("return");

            case 5:
              if (!(inflightCount + resultQueue.length >= concurrency)) {
                _context25.next = 7;
                break;
              }

              return _context25.abrupt("return");

            case 7:
              reading = true;
              inflightCount++;
              _context25.prev = 9;
              _context25.next = 12;
              return iterator.next();

            case 12:
              _ref7 = _context25.sent;
              _done = _ref7.done;
              _value11 = _ref7.value;

              if (_done) {
                ended = true;
                inflightCount--;
                fulfillReadQueue();
              } else {
                mapAndQueue(_value11);
              }

              _context25.next = 24;
              break;

            case 18:
              _context25.prev = 18;
              _context25.t0 = _context25["catch"](9);
              ended = true;
              inflightCount--;
              lastError = _context25.t0;
              fulfillReadQueue();

            case 24:
              reading = false;
              fillQueue();

            case 26:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee8, null, [[9, 18]]);
    }));
    return _fillQueue3.apply(this, arguments);
  }

  function mapAndQueue(_x9) {
    return _mapAndQueue2.apply(this, arguments);
  }

  function _mapAndQueue2() {
    _mapAndQueue2 = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee9(itrValue) {
      var _value12;

      return _regenerator["default"].wrap(function _callee9$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              _context26.prev = 0;
              _context26.next = 3;
              return func(itrValue);

            case 3:
              _value12 = _context26.sent;
              resultQueue.push(_value12);
              _context26.next = 11;
              break;

            case 7:
              _context26.prev = 7;
              _context26.t0 = _context26["catch"](0);
              ended = true;
              lastError = _context26.t0;

            case 11:
              inflightCount--;
              fulfillReadQueue();
              fillQueue();

            case 14:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee9, null, [[0, 7]]);
    }));
    return _mapAndQueue2.apply(this, arguments);
  }

  function next() {
    return _next4.apply(this, arguments);
  }

  function _next4() {
    _next4 = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee10() {
      var deferred, value;
      return _regenerator["default"].wrap(function _callee10$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              if (!(resultQueue.length === 0)) {
                _context27.next = 5;
                break;
              }

              deferred = defer();
              readQueue.push(deferred);
              fillQueue();
              return _context27.abrupt("return", deferred.promise);

            case 5:
              value = resultQueue.shift();
              fillQueue();
              return _context27.abrupt("return", {
                done: false,
                value: value
              });

            case 8:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee10);
    }));
    return _next4.apply(this, arguments);
  }

  var asyncIterableIterator = _defineProperty({
    next: next
  }, Symbol.asyncIterator, function () {
    return asyncIterableIterator;
  });

  return asyncIterableIterator;
}

function transform(concurrency, func, iterable) {
  if (func === undefined) {
    return function (curriedFunc, curriedIterable) {
      return curriedIterable ? transform(concurrency, curriedFunc, curriedIterable) : transform(concurrency, curriedFunc);
    };
  }

  if (iterable === undefined) {
    return function (curriedIterable) {
      return transform(concurrency, func, curriedIterable);
    };
  }

  return _transform(concurrency, func, iterable);
}

function once(event, stream) {
  return new Promise(function (resolve) {
    stream.once(event, resolve);
  });
}

function _writeToStream(_x10, _x11) {
  return _writeToStream2.apply(this, arguments);
}

function _writeToStream2() {
  _writeToStream2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee15(stream, iterable) {
    var e_1, _a, errorListener, error, errorPromise, iterable_1, iterable_1_1, _value14;

    return _regenerator["default"].wrap(function _callee15$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            errorPromise = new Promise(function (resolve, reject) {
              errorListener = function errorListener(err) {
                error = err;
                reject(err);
              };

              stream.once('error', errorListener);
            });
            _context32.prev = 1;
            iterable_1 = __asyncValues(iterable);

          case 3:
            _context32.next = 5;
            return iterable_1.next();

          case 5:
            iterable_1_1 = _context32.sent;

            if (iterable_1_1.done) {
              _context32.next = 15;
              break;
            }

            _value14 = iterable_1_1.value;

            if (!(stream.write(_value14) === false)) {
              _context32.next = 11;
              break;
            }

            _context32.next = 11;
            return Promise.race([errorPromise, once('drain', stream)]);

          case 11:
            if (!error) {
              _context32.next = 13;
              break;
            }

            return _context32.abrupt("return", errorPromise);

          case 13:
            _context32.next = 3;
            break;

          case 15:
            _context32.next = 20;
            break;

          case 17:
            _context32.prev = 17;
            _context32.t0 = _context32["catch"](1);
            e_1 = {
              error: _context32.t0
            };

          case 20:
            _context32.prev = 20;
            _context32.prev = 21;

            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1["return"]))) {
              _context32.next = 25;
              break;
            }

            _context32.next = 25;
            return _a.call(iterable_1);

          case 25:
            _context32.prev = 25;

            if (!e_1) {
              _context32.next = 28;
              break;
            }

            throw e_1.error;

          case 28:
            return _context32.finish(25);

          case 29:
            return _context32.finish(20);

          case 30:
            stream.removeListener('error', errorListener);

            if (!error) {
              _context32.next = 33;
              break;
            }

            return _context32.abrupt("return", errorPromise);

          case 33:
          case "end":
            return _context32.stop();
        }
      }
    }, _callee15, null, [[1, 17, 20, 30], [21,, 25, 29]]);
  }));
  return _writeToStream2.apply(this, arguments);
}

function writeToStream(stream, iterable) {
  if (iterable === undefined) {
    return function (curriedIterable) {
      return _writeToStream(stream, curriedIterable);
    };
  }

  return _writeToStream(stream, iterable);
} /// <reference lib="esnext.asynciterable" />


if (Symbol.asyncIterator === undefined) {
  Symbol.asyncIterator = Symbol["for"]('asyncIterator');
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(5);


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;

      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
( false ? undefined : _typeof(module)) === "object" ? module.exports : {});

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)(module)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ })
/******/ ]);
});
//# sourceMappingURL=index.js.map