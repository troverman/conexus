declare module ASModule {
  type i8 = number;
  type i16 = number;
  type i32 = number;
  type u8 = number;
  type u16 = number;
  type u32 = number;
  type f32 = number;
  type f64 = number;
  type bool = any;
  const MAX_BLENGTH: i32;
  const HEADER_SIZE: u32;
  function allocateUnsafe(byteLength: i32): u32;
  function abort(message: u32, fileName: u32, lineNumber: u32, columnNumber: u32): void;
  var HEAP_BASE: u32;
  namespace memory {
    function compare(vl: u32, vr: u32, n: u32): i32;
    function allocate(size: u32): u32;
    function free(ptr: u32): void;
    function reset(): void;
  }
  function memcmp(vl: u32, vr: u32, n: u32): i32;
  function memset(dest: u32, c: u8, n: u32): void;
  const HEADER_SIZE: u32;
  const MAX_LENGTH: i32;
  enum CharCode {
    PLUS = 43,
    MINUS = 45,
    DOT = 46,
    _0 = 48,
    _1 = 49,
    _2 = 50,
    _3 = 51,
    _4 = 52,
    _5 = 53,
    _6 = 54,
    _7 = 55,
    _8 = 56,
    _9 = 57,
    A = 65,
    B = 66,
    E = 69,
    N = 78,
    O = 79,
    X = 88,
    Z = 90,
    a = 97,
    b = 98,
    e = 101,
    n = 110,
    o = 111,
    x = 120,
    z = 122,
  }
  var tables_initialized: bool;
  var modTable: u32;
  var outTable: u32;
  function degree(polynom: U64): i32;
  function mod(x: U64, p: U64): U64;
  function rabin_init(h: u32): u32;
  class Rabin {
    constructor(average_bits: u32, minsize: u32, maxsize: u32, window_size: i32);
    constructor(average_bits: u32, minsize: u32, maxsize: u32, window_size: i32);
    fingerprint(buf: u32, lengths: u32): void;
  }
  function computeSize(byteLength: i32): u32;
  const AL_MASK: u32;
  const MAX_SIZE_32: u32;
  var startOffset: u32;
  var offset: u32;
  function __memory_allocate(size: u32): u32;
  function __memory_free(ptr: u32): void;
  function __memory_reset(): void;
  const AL_BITS: u32;
  const AL_SIZE: u32;
}
export default ASModule;
