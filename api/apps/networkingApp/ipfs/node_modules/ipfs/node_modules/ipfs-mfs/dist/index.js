(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["IpfsMfs"] = factory();
	else
		root["IpfsMfs"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 127);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(136);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */


var base64 = __webpack_require__(161);

var ieee754 = __webpack_require__(162);

var isArray = __webpack_require__(79);

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
/*
 * Export kMaxLength after typed array support is determined.
 */

exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function foo() {
        return 42;
      }
    };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }

    that.length = length;
  }

  return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  } // Common case.


  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }

    return allocUnsafe(this, arg);
  }

  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.

Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;

  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(that, size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }

  return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }

  return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }

  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }

  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }

      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;

  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }

  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  } // must be an even number of digits


  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;

    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    } // legacy write(string, encoding, offset, length) - remove in v0.13

  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';

  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);

    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (code < 256) {
        val = code;
      }
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function createError(msg, code, props) {
  var err = msg instanceof Error ? msg : new Error(msg);
  var key;

  if (_typeof(code) === 'object') {
    props = code;
  } else if (code != null) {
    err.code = code;
  }

  if (props) {
    for (key in props) {
      err[key] = props[key];
    }
  }

  return err;
}

module.exports = createError;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  var _console;

  // This hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return (typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {} // Swallow
  // XXX (@Qix-) should we be logging these?
  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = __webpack_require__(240)(exports);
var formatters = module.exports.formatters;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var protons = __webpack_require__(91);

var pb = protons(__webpack_require__(220)); // encode/decode

var unixfsData = pb.Data; // const unixfsMetadata = pb.MetaData // encode/decode

var types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];
var dirTypes = ['directory', 'hamt-sharded-directory'];

function Data(type, data) {
  var _this = this;

  if (!(this instanceof Data)) {
    return new Data(type, data);
  }

  if (types.indexOf(type) === -1) {
    throw new Error('Type: ' + type + ' is not valid');
  }

  this.type = type;
  this.data = data;
  this.blockSizes = [];

  this.addBlockSize = function (size) {
    _this.blockSizes.push(size);
  };

  this.removeBlockSize = function (index) {
    _this.blockSizes.splice(index, 1);
  }; // data.length + blockSizes


  this.fileSize = function () {
    if (dirTypes.indexOf(_this.type) >= 0) {
      // dirs don't have file size
      return undefined;
    }

    var sum = 0;

    _this.blockSizes.forEach(function (size) {
      sum += size;
    });

    if (data) {
      sum += data.length;
    }

    return sum;
  }; // encode to protobuf


  this.marshal = function () {
    var type;

    switch (_this.type) {
      case 'raw':
        type = unixfsData.DataType.Raw;
        break;

      case 'directory':
        type = unixfsData.DataType.Directory;
        break;

      case 'file':
        type = unixfsData.DataType.File;
        break;

      case 'metadata':
        type = unixfsData.DataType.Metadata;
        break;

      case 'symlink':
        type = unixfsData.DataType.Symlink;
        break;

      case 'hamt-sharded-directory':
        type = unixfsData.DataType.HAMTShard;
        break;

      default:
        throw new Error("Unkown type: \"".concat(_this.type, "\""));
    }

    var fileSize = _this.fileSize();

    var data = _this.data;

    if (!_this.data || !_this.data.length) {
      data = undefined;
    }

    var blockSizes = _this.blockSizes;

    if (!_this.blockSizes || !_this.blockSizes.length) {
      blockSizes = undefined;
    }

    return unixfsData.encode({
      Type: type,
      Data: data,
      filesize: fileSize,
      blocksizes: blockSizes,
      hashType: _this.hashType,
      fanout: _this.fanout
    });
  };
} // decode from protobuf https://github.com/ipfs/go-ipfs/blob/master/unixfs/format.go#L24


Data.unmarshal = function (marsheled) {
  var decoded = unixfsData.decode(marsheled);

  if (!decoded.Data) {
    decoded.Data = undefined;
  }

  var obj = new Data(types[decoded.Type], decoded.Data);
  obj.blockSizes = decoded.blocksizes;
  return obj;
};

exports = module.exports = Data;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;

      var TempCtor = function TempCtor() {};

      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  };
}

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Key = __webpack_require__(160).Key;

var FILE_TYPES = {
  file: 0,
  directory: 1,
  'hamt-sharded-directory': 1
};
module.exports = {
  FILE_SEPARATOR: '/',
  MFS_ROOT_KEY: new Key('/local/filesroot'),
  MAX_CHUNK_SIZE: 262144,
  MAX_LINKS: 174,
  FILE_TYPES: FILE_TYPES
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Multihash implementation in JavaScript.
 *
 * @module multihash
 */


var bs58 = __webpack_require__(194);

var cs = __webpack_require__(195);

exports.names = cs.names;
exports.codes = cs.codes;
exports.defaultLengths = cs.defaultLengths;

var varint = __webpack_require__(12);
/**
 * Convert the given multihash to a hex encoded string.
 *
 * @param {Buffer} hash
 * @returns {string}
 */


exports.toHexString = function toHexString(hash) {
  if (!Buffer.isBuffer(hash)) {
    throw new Error('must be passed a buffer');
  }

  return hash.toString('hex');
};
/**
 * Convert the given hex encoded string to a multihash.
 *
 * @param {string} hash
 * @returns {Buffer}
 */


exports.fromHexString = function fromHexString(hash) {
  return Buffer.from(hash, 'hex');
};
/**
 * Convert the given multihash to a base58 encoded string.
 *
 * @param {Buffer} hash
 * @returns {string}
 */


exports.toB58String = function toB58String(hash) {
  if (!Buffer.isBuffer(hash)) {
    throw new Error('must be passed a buffer');
  }

  return bs58.encode(hash);
};
/**
 * Convert the given base58 encoded string to a multihash.
 *
 * @param {string|Buffer} hash
 * @returns {Buffer}
 */


exports.fromB58String = function fromB58String(hash) {
  var encoded = hash;

  if (Buffer.isBuffer(hash)) {
    encoded = hash.toString();
  }

  return Buffer.from(bs58.decode(encoded));
};
/**
 * Decode a hash from the given multihash.
 *
 * @param {Buffer} buf
 * @returns {{code: number, name: string, length: number, digest: Buffer}} result
 */


exports.decode = function decode(buf) {
  if (!Buffer.isBuffer(buf)) {
    throw new Error('multihash must be a Buffer');
  }

  if (buf.length < 3) {
    throw new Error('multihash too short. must be > 3 bytes.');
  }

  var code = varint.decode(buf);

  if (!exports.isValidCode(code)) {
    throw new Error("multihash unknown function code: 0x".concat(code.toString(16)));
  }

  buf = buf.slice(varint.decode.bytes);
  var len = varint.decode(buf);

  if (len < 1) {
    throw new Error("multihash invalid length: 0x".concat(len.toString(16)));
  }

  buf = buf.slice(varint.decode.bytes);

  if (buf.length !== len) {
    throw new Error("multihash length inconsistent: 0x".concat(buf.toString('hex')));
  }

  return {
    code: code,
    name: cs.codes[code],
    length: len,
    digest: buf
  };
};
/**
 *  Encode a hash digest along with the specified function code.
 *
 * > **Note:** the length is derived from the length of the digest itself.
 *
 * @param {Buffer} digest
 * @param {string|number} code
 * @param {number} [length]
 * @returns {Buffer}
 */


exports.encode = function encode(digest, code, length) {
  if (!digest || code === undefined) {
    throw new Error('multihash encode requires at least two args: digest, code');
  } // ensure it's a hashfunction code.


  var hashfn = exports.coerceCode(code);

  if (!Buffer.isBuffer(digest)) {
    throw new Error('digest should be a Buffer');
  }

  if (length == null) {
    length = digest.length;
  }

  if (length && digest.length !== length) {
    throw new Error('digest length should be equal to specified length.');
  }

  return Buffer.concat([Buffer.from(varint.encode(hashfn)), Buffer.from(varint.encode(length)), digest]);
};
/**
 * Converts a hash function name into the matching code.
 * If passed a number it will return the number if it's a valid code.
 * @param {string|number} name
 * @returns {number}
 */


exports.coerceCode = function coerceCode(name) {
  var code = name;

  if (typeof name === 'string') {
    if (cs.names[name] === undefined) {
      throw new Error("Unrecognized hash function named: ".concat(name));
    }

    code = cs.names[name];
  }

  if (typeof code !== 'number') {
    throw new Error("Hash function code should be a number. Got: ".concat(code));
  }

  if (cs.codes[code] === undefined && !exports.isAppCode(code)) {
    throw new Error("Unrecognized function code: ".concat(code));
  }

  return code;
};
/**
 * Checks wether a code is part of the app range
 *
 * @param {number} code
 * @returns {boolean}
 */


exports.isAppCode = function appCode(code) {
  return code > 0 && code < 0x10;
};
/**
 * Checks whether a multihash code is valid.
 *
 * @param {number} code
 * @returns {boolean}
 */


exports.isValidCode = function validCode(code) {
  if (exports.isAppCode(code)) {
    return true;
  }

  if (cs.codes[code]) {
    return true;
  }

  return false;
};
/**
 * Check if the given buffer is a valid multihash. Throws an error if it is not valid.
 *
 * @param {Buffer} multihash
 * @returns {undefined}
 * @throws {Error}
 */


function validate(multihash) {
  exports.decode(multihash); // throws if bad.
}

exports.validate = validate;
/**
 * Returns a prefix from a valid multihash. Throws an error if it is not valid.
 *
 * @param {Buffer} multihash
 * @returns {undefined}
 * @throws {Error}
 */

exports.prefix = function prefix(multihash) {
  validate(multihash);
  return multihash.slice(0, 2);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var errCode = __webpack_require__(2);

module.exports = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaults = arguments.length > 1 ? arguments[1] : undefined;

  if (Array.isArray(options)) {
    options = options.filter(function (arg) {
      return _typeof(arg) === 'object';
    }).pop() || {};
  }

  var output = {};

  for (var key in defaults) {
    if (options[key] !== null && options[key] !== undefined) {
      output[key] = options[key];
    } else {
      output[key] = defaults[key];
    }
  }

  var format = output.format || output.codec;

  if (format && isNaN(format)) {
    output.format = format;
    delete output.codec;
  } // support legacy go arguments


  if (options.count !== undefined) {
    output.length = options.count;
  }

  if (options.p !== undefined) {
    output.parents = options.p;
  }

  if (options.l !== undefined) {
    output["long"] = options.l;
  }

  if (!output.length && output.length !== 0) {
    output.length = Infinity;
  }

  if (output.offset < 0) {
    throw errCode(new Error('cannot have negative write offset'), 'ERR_INVALID_PARAMS');
  }

  if (output.length < 0) {
    throw errCode(new Error('cannot have negative byte count'), 'ERR_INVALID_PARAMS');
  }

  return output;
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var mh = __webpack_require__(9);

var multibase = __webpack_require__(199);

var multicodec = __webpack_require__(15);

var codecs = __webpack_require__(52);

var CIDUtil = __webpack_require__(209);

var withIs = __webpack_require__(29);
/**
 * @typedef {Object} SerializedCID
 * @param {string} codec
 * @param {number} version
 * @param {Buffer} multihash
 */

/**
 * Test if the given input is a CID.
 * @function isCID
 * @memberof CID
 * @static
 * @param {any} other
 * @returns {bool}
 */

/**
 * Class representing a CID `<mbase><version><mcodec><mhash>`
 * , as defined in [ipld/cid](https://github.com/multiformats/cid).
 * @class CID
 */


var CID =
/*#__PURE__*/
function () {
  /**
   * Create a new CID.
   *
   * The algorithm for argument input is roughly:
   * ```
   * if (cid)
   *   -> create a copy
   * else if (str)
   *   if (1st char is on multibase table) -> CID String
   *   else -> bs58 encoded multihash
   * else if (Buffer)
   *   if (1st byte is 0 or 1) -> CID
   *   else -> multihash
   * else if (Number)
   *   -> construct CID by parts
   * ```
   *
   * @param {string|Buffer|CID} version
   * @param {string} [codec]
   * @param {Buffer} [multihash]
   * @param {string} [multibaseName]
   *
   * @example
   * new CID(<version>, <codec>, <multihash>, <multibaseName>)
   * new CID(<cidStr>)
   * new CID(<cid.buffer>)
   * new CID(<multihash>)
   * new CID(<bs58 encoded multihash>)
   * new CID(<cid>)
   */
  function CID(version, codec, multihash, multibaseName) {
    _classCallCheck(this, CID);

    if (_CID.isCID(version)) {
      // version is an exising CID instance
      var cid = version;
      this.version = cid.version;
      this.codec = cid.codec;
      this.multihash = Buffer.from(cid.multihash); // Default guard for when a CID < 0.7 is passed with no multibaseName

      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32');
      return;
    }

    if (typeof version === 'string') {
      // e.g. 'base32' or false
      var baseName = multibase.isEncoded(version);

      if (baseName) {
        // version is a CID String encoded with multibase, so v1
        var _cid = multibase.decode(version);

        this.version = parseInt(_cid.slice(0, 1).toString('hex'), 16);
        this.codec = multicodec.getCodec(_cid.slice(1));
        this.multihash = multicodec.rmPrefix(_cid.slice(1));
        this.multibaseName = baseName;
      } else {
        // version is a base58btc string multihash, so v0
        this.version = 0;
        this.codec = 'dag-pb';
        this.multihash = mh.fromB58String(version);
        this.multibaseName = 'base58btc';
      }

      CID.validateCID(this);
      Object.defineProperty(this, 'string', {
        value: version
      });
      return;
    }

    if (Buffer.isBuffer(version)) {
      var firstByte = version.slice(0, 1);
      var v = parseInt(firstByte.toString('hex'), 16);

      if (v === 1) {
        // version is a CID buffer
        var _cid2 = version;
        this.version = v;
        this.codec = multicodec.getCodec(_cid2.slice(1));
        this.multihash = multicodec.rmPrefix(_cid2.slice(1));
        this.multibaseName = 'base32';
      } else {
        // version is a raw multihash buffer, so v0
        this.version = 0;
        this.codec = 'dag-pb';
        this.multihash = version;
        this.multibaseName = 'base58btc';
      }

      CID.validateCID(this);
      return;
    } // otherwise, assemble the CID from the parameters

    /**
     * @type {number}
     */


    this.version = version;
    /**
     * @type {string}
     */

    this.codec = codec;
    /**
     * @type {Buffer}
     */

    this.multihash = multihash;
    /**
     * @type {string}
     */

    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32');
    CID.validateCID(this);
  }
  /**
   * The CID as a `Buffer`
   *
   * @return {Buffer}
   * @readonly
   *
   * @memberOf CID
   */


  _createClass(CID, [{
    key: "toV0",

    /**
     * Convert to a CID of version `0`.
     *
     * @returns {CID}
     */
    value: function toV0() {
      if (this.codec !== 'dag-pb') {
        throw new Error('Cannot convert a non dag-pb CID to CIDv0');
      }

      var _mh$decode = mh.decode(this.multihash),
          name = _mh$decode.name,
          length = _mh$decode.length;

      if (name !== 'sha2-256') {
        throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');
      }

      if (length !== 32) {
        throw new Error('Cannot convert non 32 byte multihash CID to CIDv0');
      }

      return new _CID(0, this.codec, this.multihash);
    }
    /**
     * Convert to a CID of version `1`.
     *
     * @returns {CID}
     */

  }, {
    key: "toV1",
    value: function toV1() {
      return new _CID(1, this.codec, this.multihash);
    }
    /**
     * Encode the CID into a string.
     *
     * @param {string} [base=this.multibaseName] - Base encoding to use.
     * @returns {string}
     */

  }, {
    key: "toBaseEncodedString",
    value: function toBaseEncodedString() {
      var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.multibaseName;

      if (this.string && base === this.multibaseName) {
        return this.string;
      }

      var str = null;

      if (this.version === 0) {
        if (base !== 'base58btc') {
          throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()');
        }

        str = mh.toB58String(this.multihash);
      } else if (this.version === 1) {
        str = multibase.encode(base, this.buffer).toString();
      } else {
        throw new Error('unsupported version');
      }

      if (base === this.multibaseName) {
        // cache the string value
        Object.defineProperty(this, 'string', {
          value: str
        });
      }

      return str;
    }
  }, {
    key: "toString",
    value: function toString(base) {
      return this.toBaseEncodedString(base);
    }
    /**
     * Serialize to a plain object.
     *
     * @returns {SerializedCID}
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        codec: this.codec,
        version: this.version,
        hash: this.multihash
      };
    }
    /**
     * Compare equality with another CID.
     *
     * @param {CID} other
     * @returns {bool}
     */

  }, {
    key: "equals",
    value: function equals(other) {
      return this.codec === other.codec && this.version === other.version && this.multihash.equals(other.multihash);
    }
    /**
     * Test if the given input is a valid CID object.
     * Throws if it is not.
     *
     * @param {any} other
     * @returns {void}
     */

  }, {
    key: "buffer",
    get: function get() {
      var buffer = this._buffer;

      if (!buffer) {
        if (this.version === 0) {
          buffer = this.multihash;
        } else if (this.version === 1) {
          buffer = Buffer.concat([Buffer.from('01', 'hex'), multicodec.getCodeVarint(this.codec), this.multihash]);
        } else {
          throw new Error('unsupported version');
        } // Cache this buffer so it doesn't have to be recreated


        Object.defineProperty(this, '_buffer', {
          value: buffer
        });
      }

      return buffer;
    }
    /**
     * Get the prefix of the CID.
     *
     * @returns {Buffer}
     * @readonly
     */

  }, {
    key: "prefix",
    get: function get() {
      return Buffer.concat([Buffer.from("0".concat(this.version), 'hex'), multicodec.getCodeVarint(this.codec), mh.prefix(this.multihash)]);
    }
  }], [{
    key: "validateCID",
    value: function validateCID(other) {
      var errorMsg = CIDUtil.checkCIDComponents(other);

      if (errorMsg) {
        throw new Error(errorMsg);
      }
    }
  }]);

  return CID;
}();

var _CID = withIs(CID, {
  className: 'CID',
  symbolName: '@ipld/js-cid/CID'
});

_CID.codecs = codecs;
module.exports = _CID;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  encode: __webpack_require__(196),
  decode: __webpack_require__(197),
  encodingLength: __webpack_require__(198)
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.DAGNode = __webpack_require__(30);
exports.DAGLink = __webpack_require__(19);
/*
 * Functions to fulfil IPLD Format interface
 * https://github.com/ipld/interface-ipld-format
 */

exports.resolver = __webpack_require__(239);
exports.util = __webpack_require__(32);
exports.codec = exports.util.codec;
exports.defaultHashAlg = exports.util.defaultHashAlg;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? undefined : _typeof2(exports)) === 'object' && ( false ? undefined : _typeof2(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(void 0, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // identity function for calling harmony imports with the correct context

      /******/

      __webpack_require__.i = function (value) {
        return value;
      };
      /******/

      /******/
      // define getter function for harmony exports

      /******/


      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            /******/
            configurable: false,

            /******/
            enumerable: true,

            /******/
            get: getter
            /******/

          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = 32);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer, process) {
        // Load modules
        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
          return _typeof2(obj);
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
        };

        var Assert = __webpack_require__(17);

        var Crypto = __webpack_require__(15);

        var Path = __webpack_require__(37);

        var Util = __webpack_require__(16);

        var Escape = __webpack_require__(18); // Declare internals


        var internals = {}; // Clone object or array

        exports.clone = function (obj, seen) {
          if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null) {
            return obj;
          }

          seen = seen || new Map();
          var lookup = seen.get(obj);

          if (lookup) {
            return lookup;
          }

          var newObj = void 0;
          var cloneDeep = false;

          if (!Array.isArray(obj)) {
            if (Buffer.isBuffer(obj)) {
              newObj = Buffer.from(obj);
            } else if (obj instanceof Date) {
              newObj = new Date(obj.getTime());
            } else if (obj instanceof RegExp) {
              newObj = new RegExp(obj);
            } else {
              var proto = Object.getPrototypeOf(obj);

              if (proto && proto.isImmutable) {
                newObj = obj;
              } else {
                newObj = Object.create(proto);
                cloneDeep = true;
              }
            }
          } else {
            newObj = [];
            cloneDeep = true;
          }

          seen.set(obj, newObj);

          if (cloneDeep) {
            var keys = Object.getOwnPropertyNames(obj);

            for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];
              var descriptor = Object.getOwnPropertyDescriptor(obj, key);

              if (descriptor && (descriptor.get || descriptor.set)) {
                Object.defineProperty(newObj, key, descriptor);
              } else {
                newObj[key] = exports.clone(obj[key], seen);
              }
            }
          }

          return newObj;
        }; // Merge all the properties of source into target, source wins in conflict, and by default null and undefined from source are applied

        /*eslint-disable */


        exports.merge = function (target, source, isNullOverride
        /* = true */
        , isMergeArrays
        /* = true */
        ) {
          /*eslint-enable */
          exports.assert(target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object', 'Invalid target value: must be an object');
          exports.assert(source === null || source === undefined || (typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object', 'Invalid source value: must be null, undefined, or an object');

          if (!source) {
            return target;
          }

          if (Array.isArray(source)) {
            exports.assert(Array.isArray(target), 'Cannot merge array onto an object');

            if (isMergeArrays === false) {
              // isMergeArrays defaults to true
              target.length = 0; // Must not change target assignment
            }

            for (var i = 0; i < source.length; ++i) {
              target.push(exports.clone(source[i]));
            }

            return target;
          }

          var keys = Object.keys(source);

          for (var _i = 0; _i < keys.length; ++_i) {
            var key = keys[_i];

            if (key === '__proto__') {
              continue;
            }

            var value = source[key];

            if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
              if (!target[key] || _typeof(target[key]) !== 'object' || Array.isArray(target[key]) !== Array.isArray(value) || value instanceof Date || Buffer.isBuffer(value) || value instanceof RegExp) {
                target[key] = exports.clone(value);
              } else {
                exports.merge(target[key], value, isNullOverride, isMergeArrays);
              }
            } else {
              if (value !== null && value !== undefined) {
                // Explicit to preserve empty strings
                target[key] = value;
              } else if (isNullOverride !== false) {
                // Defaults to true
                target[key] = value;
              }
            }
          }

          return target;
        }; // Apply options to a copy of the defaults


        exports.applyToDefaults = function (defaults, options, isNullOverride) {
          exports.assert(defaults && (typeof defaults === 'undefined' ? 'undefined' : _typeof(defaults)) === 'object', 'Invalid defaults value: must be an object');
          exports.assert(!options || options === true || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object', 'Invalid options value: must be true, falsy or an object');

          if (!options) {
            // If no options, return null
            return null;
          }

          var copy = exports.clone(defaults);

          if (options === true) {
            // If options is set to true, use defaults
            return copy;
          }

          return exports.merge(copy, options, isNullOverride === true, false);
        }; // Clone an object except for the listed keys which are shallow copied


        exports.cloneWithShallow = function (source, keys) {
          if (!source || (typeof source === 'undefined' ? 'undefined' : _typeof(source)) !== 'object') {
            return source;
          }

          var storage = internals.store(source, keys); // Move shallow copy items to storage

          var copy = exports.clone(source); // Deep copy the rest

          internals.restore(copy, source, storage); // Shallow copy the stored items and restore

          return copy;
        };

        internals.store = function (source, keys) {
          var storage = {};

          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            var value = exports.reach(source, key);

            if (value !== undefined) {
              storage[key] = value;
              internals.reachSet(source, key, undefined);
            }
          }

          return storage;
        };

        internals.restore = function (copy, source, storage) {
          var keys = Object.keys(storage);

          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            internals.reachSet(copy, key, storage[key]);
            internals.reachSet(source, key, storage[key]);
          }
        };

        internals.reachSet = function (obj, key, value) {
          var path = key.split('.');
          var ref = obj;

          for (var i = 0; i < path.length; ++i) {
            var segment = path[i];

            if (i + 1 === path.length) {
              ref[segment] = value;
            }

            ref = ref[segment];
          }
        }; // Apply options to defaults except for the listed keys which are shallow copied from option without merging


        exports.applyToDefaultsWithShallow = function (defaults, options, keys) {
          exports.assert(defaults && (typeof defaults === 'undefined' ? 'undefined' : _typeof(defaults)) === 'object', 'Invalid defaults value: must be an object');
          exports.assert(!options || options === true || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object', 'Invalid options value: must be true, falsy or an object');
          exports.assert(keys && Array.isArray(keys), 'Invalid keys');

          if (!options) {
            // If no options, return null
            return null;
          }

          var copy = exports.cloneWithShallow(defaults, keys);

          if (options === true) {
            // If options is set to true, use defaults
            return copy;
          }

          var storage = internals.store(options, keys); // Move shallow copy items to storage

          exports.merge(copy, options, false, false); // Deep copy the rest

          internals.restore(copy, options, storage); // Shallow copy the stored items and restore

          return copy;
        }; // Deep object or array comparison


        exports.deepEqual = function (obj, ref, options, seen) {
          options = options || {
            prototype: true
          };
          var type = typeof obj === 'undefined' ? 'undefined' : _typeof(obj);

          if (type !== (typeof ref === 'undefined' ? 'undefined' : _typeof(ref))) {
            return false;
          }

          if (type !== 'object' || obj === null || ref === null) {
            if (obj === ref) {
              // Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql
              return obj !== 0 || 1 / obj === 1 / ref; // -0 / +0
            }

            return obj !== obj && ref !== ref; // NaN
          }

          seen = seen || [];

          if (seen.indexOf(obj) !== -1) {
            return true; // If previous comparison failed, it would have stopped execution
          }

          seen.push(obj);

          if (Array.isArray(obj)) {
            if (!Array.isArray(ref)) {
              return false;
            }

            if (!options.part && obj.length !== ref.length) {
              return false;
            }

            for (var i = 0; i < obj.length; ++i) {
              if (options.part) {
                var found = false;

                for (var j = 0; j < ref.length; ++j) {
                  if (exports.deepEqual(obj[i], ref[j], options)) {
                    found = true;
                    break;
                  }
                }

                return found;
              }

              if (!exports.deepEqual(obj[i], ref[i], options)) {
                return false;
              }
            }

            return true;
          }

          if (Buffer.isBuffer(obj)) {
            if (!Buffer.isBuffer(ref)) {
              return false;
            }

            if (obj.length !== ref.length) {
              return false;
            }

            for (var _i2 = 0; _i2 < obj.length; ++_i2) {
              if (obj[_i2] !== ref[_i2]) {
                return false;
              }
            }

            return true;
          }

          if (obj instanceof Date) {
            return ref instanceof Date && obj.getTime() === ref.getTime();
          }

          if (obj instanceof RegExp) {
            return ref instanceof RegExp && obj.toString() === ref.toString();
          }

          if (options.prototype) {
            if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {
              return false;
            }
          }

          var keys = Object.getOwnPropertyNames(obj);

          if (!options.part && keys.length !== Object.getOwnPropertyNames(ref).length) {
            return false;
          }

          for (var _i3 = 0; _i3 < keys.length; ++_i3) {
            var key = keys[_i3];
            var descriptor = Object.getOwnPropertyDescriptor(obj, key);

            if (descriptor.get) {
              if (!exports.deepEqual(descriptor, Object.getOwnPropertyDescriptor(ref, key), options, seen)) {
                return false;
              }
            } else if (!exports.deepEqual(obj[key], ref[key], options, seen)) {
              return false;
            }
          }

          return true;
        }; // Remove duplicate items from array


        exports.unique = function (array, key) {
          var result = void 0;

          if (key) {
            result = [];
            var index = new Set();
            array.forEach(function (item) {
              var identifier = item[key];

              if (!index.has(identifier)) {
                index.add(identifier);
                result.push(item);
              }
            });
          } else {
            result = Array.from(new Set(array));
          }

          return result;
        }; // Convert array into object


        exports.mapToObject = function (array, key) {
          if (!array) {
            return null;
          }

          var obj = {};

          for (var i = 0; i < array.length; ++i) {
            if (key) {
              if (array[i][key]) {
                obj[array[i][key]] = true;
              }
            } else {
              obj[array[i]] = true;
            }
          }

          return obj;
        }; // Find the common unique items in two arrays


        exports.intersect = function (array1, array2, justFirst) {
          if (!array1 || !array2) {
            return [];
          }

          var common = [];
          var hash = Array.isArray(array1) ? exports.mapToObject(array1) : array1;
          var found = {};

          for (var i = 0; i < array2.length; ++i) {
            if (hash[array2[i]] && !found[array2[i]]) {
              if (justFirst) {
                return array2[i];
              }

              common.push(array2[i]);
              found[array2[i]] = true;
            }
          }

          return justFirst ? null : common;
        }; // Test if the reference contains the values


        exports.contain = function (ref, values, options) {
          /*
              string -> string(s)
              array -> item(s)
              object -> key(s)
              object -> object (key:value)
          */
          var valuePairs = null;

          if ((typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) === 'object' && (typeof values === 'undefined' ? 'undefined' : _typeof(values)) === 'object' && !Array.isArray(ref) && !Array.isArray(values)) {
            valuePairs = values;
            values = Object.keys(values);
          } else {
            values = [].concat(values);
          }

          options = options || {}; // deep, once, only, part

          exports.assert(typeof ref === 'string' || (typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) === 'object', 'Reference must be string or an object');
          exports.assert(values.length, 'Values array cannot be empty');
          var compare = void 0;
          var compareFlags = void 0;

          if (options.deep) {
            compare = exports.deepEqual;
            var hasOnly = options.hasOwnProperty('only');
            var hasPart = options.hasOwnProperty('part');
            compareFlags = {
              prototype: hasOnly ? options.only : hasPart ? !options.part : false,
              part: hasOnly ? !options.only : hasPart ? options.part : true
            };
          } else {
            compare = function compare(a, b) {
              return a === b;
            };
          }

          var misses = false;
          var matches = new Array(values.length);

          for (var i = 0; i < matches.length; ++i) {
            matches[i] = 0;
          }

          if (typeof ref === 'string') {
            var pattern = '(';

            for (var _i4 = 0; _i4 < values.length; ++_i4) {
              var value = values[_i4];
              exports.assert(typeof value === 'string', 'Cannot compare string reference to non-string value');
              pattern += (_i4 ? '|' : '') + exports.escapeRegex(value);
            }

            var regex = new RegExp(pattern + ')', 'g');
            var leftovers = ref.replace(regex, function ($0, $1) {
              var index = values.indexOf($1);
              ++matches[index];
              return ''; // Remove from string
            });
            misses = !!leftovers;
          } else if (Array.isArray(ref)) {
            for (var _i5 = 0; _i5 < ref.length; ++_i5) {
              var matched = false;

              for (var j = 0; j < values.length && matched === false; ++j) {
                matched = compare(values[j], ref[_i5], compareFlags) && j;
              }

              if (matched !== false) {
                ++matches[matched];
              } else {
                misses = true;
              }
            }
          } else {
            var keys = Object.getOwnPropertyNames(ref);

            for (var _i6 = 0; _i6 < keys.length; ++_i6) {
              var key = keys[_i6];
              var pos = values.indexOf(key);

              if (pos !== -1) {
                if (valuePairs && !compare(valuePairs[key], ref[key], compareFlags)) {
                  return false;
                }

                ++matches[pos];
              } else {
                misses = true;
              }
            }
          }

          var result = false;

          for (var _i7 = 0; _i7 < matches.length; ++_i7) {
            result = result || !!matches[_i7];

            if (options.once && matches[_i7] > 1 || !options.part && !matches[_i7]) {
              return false;
            }
          }

          if (options.only && misses) {
            return false;
          }

          return result;
        }; // Flatten array


        exports.flatten = function (array, target) {
          var result = target || [];

          for (var i = 0; i < array.length; ++i) {
            if (Array.isArray(array[i])) {
              exports.flatten(array[i], result);
            } else {
              result.push(array[i]);
            }
          }

          return result;
        }; // Convert an object key chain string ('a.b.c') to reference (object[a][b][c])


        exports.reach = function (obj, chain, options) {
          if (chain === false || chain === null || typeof chain === 'undefined') {
            return obj;
          }

          options = options || {};

          if (typeof options === 'string') {
            options = {
              separator: options
            };
          }

          var path = chain.split(options.separator || '.');
          var ref = obj;

          for (var i = 0; i < path.length; ++i) {
            var key = path[i];

            if (key[0] === '-' && Array.isArray(ref)) {
              key = key.slice(1, key.length);
              key = ref.length - key;
            }

            if (!ref || !(((typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) === 'object' || typeof ref === 'function') && key in ref) || (typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) !== 'object' && options.functions === false) {
              // Only object and function can have properties
              exports.assert(!options.strict || i + 1 === path.length, 'Missing segment', key, 'in reach path ', chain);
              exports.assert((typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);
              ref = options["default"];
              break;
            }

            ref = ref[key];
          }

          return ref;
        };

        exports.reachTemplate = function (obj, template, options) {
          return template.replace(/{([^}]+)}/g, function ($0, chain) {
            var value = exports.reach(obj, chain, options);
            return value === undefined || value === null ? '' : value;
          });
        };

        exports.formatStack = function (stack) {
          var trace = [];

          for (var i = 0; i < stack.length; ++i) {
            var item = stack[i];
            trace.push([item.getFileName(), item.getLineNumber(), item.getColumnNumber(), item.getFunctionName(), item.isConstructor()]);
          }

          return trace;
        };

        exports.formatTrace = function (trace) {
          var display = [];

          for (var i = 0; i < trace.length; ++i) {
            var row = trace[i];
            display.push((row[4] ? 'new ' : '') + row[3] + ' (' + row[0] + ':' + row[1] + ':' + row[2] + ')');
          }

          return display;
        };

        exports.callStack = function (slice) {
          // http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi
          var v8 = Error.prepareStackTrace;

          Error.prepareStackTrace = function (_, stack) {
            return stack;
          };

          var capture = {};
          Error.captureStackTrace(capture, this);
          var stack = capture.stack;
          Error.prepareStackTrace = v8;
          var trace = exports.formatStack(stack);
          return trace.slice(1 + slice);
        };

        exports.displayStack = function (slice) {
          var trace = exports.callStack(slice === undefined ? 1 : slice + 1);
          return exports.formatTrace(trace);
        };

        exports.abortThrow = false;

        exports.abort = function (message, hideStack) {
          if (process.env.NODE_ENV === 'test' || exports.abortThrow === true) {
            throw new Error(message || 'Unknown error');
          }

          var stack = '';

          if (!hideStack) {
            stack = exports.displayStack(1).join('\n\t');
          }

          console.log('ABORT: ' + message + '\n\t' + stack);
          process.exit(1);
        };

        exports.assert = function (condition) {
          if (condition) {
            return;
          }

          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          if (args.length === 1 && args[0] instanceof Error) {
            throw args[0];
          }

          var msgs = args.filter(function (arg) {
            return arg !== '';
          }).map(function (arg) {
            return typeof arg === 'string' ? arg : arg instanceof Error ? arg.message : exports.stringify(arg);
          });
          throw new Assert.AssertionError({
            message: msgs.join(' ') || 'Unknown error',
            actual: false,
            expected: true,
            operator: '==',
            stackStartFunction: exports.assert
          });
        };

        exports.Bench = function () {
          this.ts = 0;
          this.reset();
        };

        exports.Bench.prototype.reset = function () {
          this.ts = exports.Bench.now();
        };

        exports.Bench.prototype.elapsed = function () {
          return exports.Bench.now() - this.ts;
        };

        exports.Bench.now = function () {
          var ts = process.hrtime();
          return ts[0] * 1e3 + ts[1] / 1e6;
        }; // Escape string for Regex construction


        exports.escapeRegex = function (string) {
          // Escape ^$.*+-?=!:|\/()[]{},
          return string.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, '\\$&');
        }; // Base64url (RFC 4648) encode


        exports.base64urlEncode = function (value, encoding) {
          exports.assert(typeof value === 'string' || Buffer.isBuffer(value), 'value must be string or buffer');
          var buf = Buffer.isBuffer(value) ? value : Buffer.from(value, encoding || 'binary');
          return buf.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
        }; // Base64url (RFC 4648) decode


        exports.base64urlDecode = function (value, encoding) {
          if (typeof value !== 'string') {
            throw new Error('Value not a string');
          }

          if (!/^[\w\-]*$/.test(value)) {
            throw new Error('Invalid character');
          }

          var buf = Buffer.from(value, 'base64');
          return encoding === 'buffer' ? buf : buf.toString(encoding || 'binary');
        }; // Escape attribute value for use in HTTP header


        exports.escapeHeaderAttribute = function (attribute) {
          // Allowed value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9, \, "
          exports.assert(/^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~\"\\]*$/.test(attribute), 'Bad attribute value (' + attribute + ')');
          return attribute.replace(/\\/g, '\\\\').replace(/\"/g, '\\"'); // Escape quotes and slash
        };

        exports.escapeHtml = function (string) {
          return Escape.escapeHtml(string);
        };

        exports.escapeJavaScript = function (string) {
          return Escape.escapeJavaScript(string);
        };

        exports.escapeJson = function (string) {
          return Escape.escapeJson(string);
        };

        exports.once = function (method) {
          if (method._hoekOnce) {
            return method;
          }

          var once = false;

          var wrapped = function wrapped() {
            if (!once) {
              once = true;

              for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }

              method.apply(null, args);
            }
          };

          wrapped._hoekOnce = true;
          return wrapped;
        };

        exports.isInteger = Number.isSafeInteger;

        exports.ignore = function () {};

        exports.inherits = Util.inherits;
        exports.format = Util.format;

        exports.transform = function (source, transform, options) {
          exports.assert(source === null || source === undefined || (typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' || Array.isArray(source), 'Invalid source object: must be null, undefined, an object, or an array');
          var separator = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options !== null ? options.separator || '.' : '.';

          if (Array.isArray(source)) {
            var results = [];

            for (var i = 0; i < source.length; ++i) {
              results.push(exports.transform(source[i], transform, options));
            }

            return results;
          }

          var result = {};
          var keys = Object.keys(transform);

          for (var _i8 = 0; _i8 < keys.length; ++_i8) {
            var key = keys[_i8];
            var path = key.split(separator);
            var sourcePath = transform[key];
            exports.assert(typeof sourcePath === 'string', 'All mappings must be "." delineated strings');
            var segment = void 0;
            var res = result;

            while (path.length > 1) {
              segment = path.shift();

              if (!res[segment]) {
                res[segment] = {};
              }

              res = res[segment];
            }

            segment = path.shift();
            res[segment] = exports.reach(source, sourcePath, options);
          }

          return result;
        };

        exports.uniqueFilename = function (path, extension) {
          if (extension) {
            extension = extension[0] !== '.' ? '.' + extension : extension;
          } else {
            extension = '';
          }

          path = Path.resolve(path);
          var name = [Date.now(), process.pid, Crypto.randomBytes(8).toString('hex')].join('-') + extension;
          return Path.join(path, name);
        };

        exports.stringify = function () {
          try {
            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }

            return JSON.stringify.apply(null, args);
          } catch (err) {
            return '[Cannot display object: ' + err.message + ']';
          }
        };

        exports.shallow = function (source) {
          var target = {};
          var keys = Object.keys(source);

          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            target[key] = source[key];
          }

          return target;
        };

        exports.wait = function (timeout) {
          return new Promise(function (resolve) {
            return setTimeout(resolve, timeout);
          });
        };

        exports.block = function () {
          return new Promise(exports.ignore);
        };
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(3).Buffer, __webpack_require__(7));
      /***/
    },
    /* 1 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {};

      exports.create = function (key, options) {
        Hoek.assert(typeof key === 'string', 'Invalid reference key:', key);
        var settings = Hoek.clone(options); // options can be reused and modified

        var ref = function ref(value, validationOptions) {
          return Hoek.reach(ref.isContext ? validationOptions.context : value, ref.key, settings);
        };

        ref.isContext = key[0] === (settings && settings.contextPrefix || '$');
        ref.key = ref.isContext ? key.slice(1) : key;
        ref.path = ref.key.split(settings && settings.separator || '.');
        ref.depth = ref.path.length;
        ref.root = ref.path[0];
        ref.isJoi = true;

        ref.toString = function () {
          return (ref.isContext ? 'context:' : 'ref:') + ref.key;
        };

        return ref;
      };

      exports.isRef = function (ref) {
        return typeof ref === 'function' && ref.isJoi;
      };

      exports.push = function (array, ref) {
        if (exports.isRef(ref) && !ref.isContext) {
          array.push(ref.root);
        }
      };
      /***/

    },
    /* 2 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
      };

      var _createClass = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var Hoek = __webpack_require__(0);

      var Settings = __webpack_require__(11);

      var Ref = __webpack_require__(1);

      var Errors = __webpack_require__(6);

      var Alternatives = null; // Delay-loaded to prevent circular dependencies

      var Cast = null; // Declare internals

      var internals = {
        Set: __webpack_require__(9)
      };
      internals.defaults = {
        abortEarly: true,
        convert: true,
        allowUnknown: false,
        skipFunctions: false,
        stripUnknown: false,
        language: {},
        presence: 'optional',
        strip: false,
        noDefaults: false,
        escapeHtml: false // context: null

      };

      module.exports = internals.Any = function () {
        function _class() {
          _classCallCheck(this, _class);

          Cast = Cast || __webpack_require__(4);
          this.isJoi = true;
          this._type = 'any';
          this._settings = null;
          this._valids = new internals.Set();
          this._invalids = new internals.Set();
          this._tests = [];
          this._refs = [];
          this._flags = {
            /*
             presence: 'optional',                   // optional, required, forbidden, ignore
             allowOnly: false,
             allowUnknown: undefined,
             default: undefined,
             forbidden: false,
             encoding: undefined,
             insensitive: false,
             trim: false,
             normalize: undefined,                   // NFC, NFD, NFKC, NFKD
             case: undefined,                        // upper, lower
             empty: undefined,
             func: false,
             raw: false
             */
          };
          this._description = null;
          this._unit = null;
          this._notes = [];
          this._tags = [];
          this._examples = [];
          this._meta = [];
          this._inner = {}; // Hash of arrays of immutable objects
        }

        _class.prototype._init = function _init() {
          return this;
        };

        _class.prototype.createError = function createError(type, context, state, options) {
          var flags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this._flags;
          return Errors.create(type, context, state, options, flags);
        };

        _class.prototype.createOverrideError = function createOverrideError(type, context, state, options, message, template) {
          return Errors.create(type, context, state, options, this._flags, message, template);
        };

        _class.prototype.checkOptions = function checkOptions(options) {
          var Schemas = __webpack_require__(21);

          var result = Schemas.options.validate(options);

          if (result.error) {
            throw new Error(result.error.details[0].message);
          }
        };

        _class.prototype.clone = function clone() {
          var obj = Object.create(Object.getPrototypeOf(this));
          obj.isJoi = true;
          obj._currentJoi = this._currentJoi;
          obj._type = this._type;
          obj._settings = this._settings;
          obj._baseType = this._baseType;
          obj._valids = this._valids.slice();
          obj._invalids = this._invalids.slice();
          obj._tests = this._tests.slice();
          obj._refs = this._refs.slice();
          obj._flags = Hoek.clone(this._flags);
          obj._description = this._description;
          obj._unit = this._unit;
          obj._notes = this._notes.slice();
          obj._tags = this._tags.slice();
          obj._examples = this._examples.slice();
          obj._meta = this._meta.slice();
          obj._inner = {};
          var inners = Object.keys(this._inner);

          for (var i = 0; i < inners.length; ++i) {
            var key = inners[i];
            obj._inner[key] = this._inner[key] ? this._inner[key].slice() : null;
          }

          return obj;
        };

        _class.prototype.concat = function concat(schema) {
          Hoek.assert(schema instanceof internals.Any, 'Invalid schema object');
          Hoek.assert(this._type === 'any' || schema._type === 'any' || schema._type === this._type, 'Cannot merge type', this._type, 'with another type:', schema._type);
          var obj = this.clone();

          if (this._type === 'any' && schema._type !== 'any') {
            // Reset values as if we were "this"
            var tmpObj = schema.clone();
            var keysToRestore = ['_settings', '_valids', '_invalids', '_tests', '_refs', '_flags', '_description', '_unit', '_notes', '_tags', '_examples', '_meta', '_inner'];

            for (var i = 0; i < keysToRestore.length; ++i) {
              tmpObj[keysToRestore[i]] = obj[keysToRestore[i]];
            }

            obj = tmpObj;
          }

          obj._settings = obj._settings ? Settings.concat(obj._settings, schema._settings) : schema._settings;

          obj._valids.merge(schema._valids, schema._invalids);

          obj._invalids.merge(schema._invalids, schema._valids);

          obj._tests = obj._tests.concat(schema._tests);
          obj._refs = obj._refs.concat(schema._refs);
          Hoek.merge(obj._flags, schema._flags);
          obj._description = schema._description || obj._description;
          obj._unit = schema._unit || obj._unit;
          obj._notes = obj._notes.concat(schema._notes);
          obj._tags = obj._tags.concat(schema._tags);
          obj._examples = obj._examples.concat(schema._examples);
          obj._meta = obj._meta.concat(schema._meta);
          var inners = Object.keys(schema._inner);
          var isObject = obj._type === 'object';

          for (var _i = 0; _i < inners.length; ++_i) {
            var key = inners[_i];
            var source = schema._inner[key];

            if (source) {
              var target = obj._inner[key];

              if (target) {
                if (isObject && key === 'children') {
                  var keys = {};

                  for (var j = 0; j < target.length; ++j) {
                    keys[target[j].key] = j;
                  }

                  for (var _j = 0; _j < source.length; ++_j) {
                    var sourceKey = source[_j].key;

                    if (keys[sourceKey] >= 0) {
                      target[keys[sourceKey]] = {
                        key: sourceKey,
                        schema: target[keys[sourceKey]].schema.concat(source[_j].schema)
                      };
                    } else {
                      target.push(source[_j]);
                    }
                  }
                } else {
                  obj._inner[key] = obj._inner[key].concat(source);
                }
              } else {
                obj._inner[key] = source.slice();
              }
            }
          }

          return obj;
        };

        _class.prototype._test = function _test(name, arg, func, options) {
          var obj = this.clone();

          obj._tests.push({
            func: func,
            name: name,
            arg: arg,
            options: options
          });

          return obj;
        };

        _class.prototype.options = function options(_options) {
          Hoek.assert(!_options.context, 'Cannot override context');
          this.checkOptions(_options);
          var obj = this.clone();
          obj._settings = Settings.concat(obj._settings, _options);
          return obj;
        };

        _class.prototype.strict = function strict(isStrict) {
          var obj = this.clone();
          var convert = isStrict === undefined ? false : !isStrict;
          obj._settings = Settings.concat(obj._settings, {
            convert: convert
          });
          return obj;
        };

        _class.prototype.raw = function raw(isRaw) {
          var value = isRaw === undefined ? true : isRaw;

          if (this._flags.raw === value) {
            return this;
          }

          var obj = this.clone();
          obj._flags.raw = value;
          return obj;
        };

        _class.prototype.error = function error(err) {
          Hoek.assert(err && (err instanceof Error || typeof err === 'function'), 'Must provide a valid Error object or a function');
          var obj = this.clone();
          obj._flags.error = err;
          return obj;
        };

        _class.prototype.allow = function allow() {
          for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
            values[_key] = arguments[_key];
          }

          var obj = this.clone();
          values = Hoek.flatten(values);

          for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            Hoek.assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');

            obj._invalids.remove(value);

            obj._valids.add(value, obj._refs);
          }

          return obj;
        };

        _class.prototype.valid = function valid() {
          var obj = this.allow.apply(this, arguments);
          obj._flags.allowOnly = true;
          return obj;
        };

        _class.prototype.invalid = function invalid() {
          for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            values[_key2] = arguments[_key2];
          }

          var obj = this.clone();
          values = Hoek.flatten(values);

          for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            Hoek.assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');

            obj._valids.remove(value);

            obj._invalids.add(value, obj._refs);
          }

          return obj;
        };

        _class.prototype.required = function required() {
          if (this._flags.presence === 'required') {
            return this;
          }

          var obj = this.clone();
          obj._flags.presence = 'required';
          return obj;
        };

        _class.prototype.optional = function optional() {
          if (this._flags.presence === 'optional') {
            return this;
          }

          var obj = this.clone();
          obj._flags.presence = 'optional';
          return obj;
        };

        _class.prototype.forbidden = function forbidden() {
          if (this._flags.presence === 'forbidden') {
            return this;
          }

          var obj = this.clone();
          obj._flags.presence = 'forbidden';
          return obj;
        };

        _class.prototype.strip = function strip() {
          if (this._flags.strip) {
            return this;
          }

          var obj = this.clone();
          obj._flags.strip = true;
          return obj;
        };

        _class.prototype.applyFunctionToChildren = function applyFunctionToChildren(children, fn, args, root) {
          children = [].concat(children);

          if (children.length !== 1 || children[0] !== '') {
            root = root ? root + '.' : '';
            var extraChildren = (children[0] === '' ? children.slice(1) : children).map(function (child) {
              return root + child;
            });
            throw new Error('unknown key(s) ' + extraChildren.join(', '));
          }

          return this[fn].apply(this, args);
        };

        _class.prototype["default"] = function _default(value, description) {
          if (typeof value === 'function' && !Ref.isRef(value)) {
            if (!value.description && description) {
              value.description = description;
            }

            if (!this._flags.func) {
              Hoek.assert(typeof value.description === 'string' && value.description.length > 0, 'description must be provided when default value is a function');
            }
          }

          var obj = this.clone();
          obj._flags["default"] = value;
          Ref.push(obj._refs, value);
          return obj;
        };

        _class.prototype.empty = function empty(schema) {
          var obj = this.clone();

          if (schema === undefined) {
            delete obj._flags.empty;
          } else {
            obj._flags.empty = Cast.schema(this._currentJoi, schema);
          }

          return obj;
        };

        _class.prototype.when = function when(condition, options) {
          Hoek.assert(options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object', 'Invalid options');
          Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of "then" or "otherwise"');
          var then = options.hasOwnProperty('then') ? this.concat(Cast.schema(this._currentJoi, options.then)) : undefined;
          var otherwise = options.hasOwnProperty('otherwise') ? this.concat(Cast.schema(this._currentJoi, options.otherwise)) : undefined;
          Alternatives = Alternatives || __webpack_require__(10);
          var alternativeOptions = {
            then: then,
            otherwise: otherwise
          };

          if (Object.prototype.hasOwnProperty.call(options, 'is')) {
            alternativeOptions.is = options.is;
          }

          var obj = Alternatives.when(condition, alternativeOptions);
          obj._flags.presence = 'ignore';
          obj._baseType = this;
          return obj;
        };

        _class.prototype.description = function description(desc) {
          Hoek.assert(desc && typeof desc === 'string', 'Description must be a non-empty string');
          var obj = this.clone();
          obj._description = desc;
          return obj;
        };

        _class.prototype.notes = function notes(_notes) {
          Hoek.assert(_notes && (typeof _notes === 'string' || Array.isArray(_notes)), 'Notes must be a non-empty string or array');
          var obj = this.clone();
          obj._notes = obj._notes.concat(_notes);
          return obj;
        };

        _class.prototype.tags = function tags(_tags) {
          Hoek.assert(_tags && (typeof _tags === 'string' || Array.isArray(_tags)), 'Tags must be a non-empty string or array');
          var obj = this.clone();
          obj._tags = obj._tags.concat(_tags);
          return obj;
        };

        _class.prototype.meta = function meta(_meta) {
          Hoek.assert(_meta !== undefined, 'Meta cannot be undefined');
          var obj = this.clone();
          obj._meta = obj._meta.concat(_meta);
          return obj;
        };

        _class.prototype.example = function example() {
          Hoek.assert(arguments.length === 1, 'Missing example');
          var value = arguments.length <= 0 ? undefined : arguments[0];
          var obj = this.clone();

          obj._examples.push(value);

          return obj;
        };

        _class.prototype.unit = function unit(name) {
          Hoek.assert(name && typeof name === 'string', 'Unit name must be a non-empty string');
          var obj = this.clone();
          obj._unit = name;
          return obj;
        };

        _class.prototype._prepareEmptyValue = function _prepareEmptyValue(value) {
          if (typeof value === 'string' && this._flags.trim) {
            return value.trim();
          }

          return value;
        };

        _class.prototype._validate = function _validate(value, state, options, reference) {
          var _this = this;

          var originalValue = value; // Setup state and settings

          state = state || {
            key: '',
            path: [],
            parent: null,
            reference: reference
          };

          if (this._settings) {
            options = Settings.concat(options, this._settings);
          }

          var errors = [];

          var finish = function finish() {
            var finalValue = void 0;

            if (value !== undefined) {
              finalValue = _this._flags.raw ? originalValue : value;
            } else if (options.noDefaults) {
              finalValue = value;
            } else if (Ref.isRef(_this._flags["default"])) {
              finalValue = _this._flags["default"](state.parent, options);
            } else if (typeof _this._flags["default"] === 'function' && !(_this._flags.func && !_this._flags["default"].description)) {
              var args = void 0;

              if (state.parent !== null && _this._flags["default"].length > 0) {
                args = [Hoek.clone(state.parent), options];
              }

              var defaultValue = internals._try(_this._flags["default"], args);

              finalValue = defaultValue.value;

              if (defaultValue.error) {
                errors.push(_this.createError('any.default', {
                  error: defaultValue.error
                }, state, options));
              }
            } else {
              finalValue = Hoek.clone(_this._flags["default"]);
            }

            if (errors.length && typeof _this._flags.error === 'function') {
              var change = _this._flags.error.call(_this, errors);

              if (typeof change === 'string') {
                errors = [_this.createOverrideError('override', {
                  reason: errors
                }, state, options, change)];
              } else {
                errors = [].concat(change).map(function (err) {
                  return err instanceof Error ? err : _this.createOverrideError(err.type || 'override', err.context, state, options, err.message, err.template);
                });
              }
            }

            return {
              value: _this._flags.strip ? undefined : finalValue,
              finalValue: finalValue,
              errors: errors.length ? errors : null
            };
          };

          if (this._coerce) {
            var coerced = this._coerce.call(this, value, state, options);

            if (coerced.errors) {
              value = coerced.value;
              errors = errors.concat(coerced.errors);
              return finish(); // Coerced error always aborts early
            }

            value = coerced.value;
          }

          if (this._flags.empty && !this._flags.empty._validate(this._prepareEmptyValue(value), null, internals.defaults).errors) {
            value = undefined;
          } // Check presence requirements


          var presence = this._flags.presence || options.presence;

          if (presence === 'optional') {
            if (value === undefined) {
              var isDeepDefault = this._flags.hasOwnProperty('default') && this._flags["default"] === undefined;

              if (isDeepDefault && this._type === 'object') {
                value = {};
              } else {
                return finish();
              }
            }
          } else if (presence === 'required' && value === undefined) {
            errors.push(this.createError('any.required', null, state, options));
            return finish();
          } else if (presence === 'forbidden') {
            if (value === undefined) {
              return finish();
            }

            errors.push(this.createError('any.unknown', null, state, options));
            return finish();
          } // Check allowed and denied values using the original value


          if (this._valids.has(value, state, options, this._flags.insensitive)) {
            return finish();
          }

          if (this._invalids.has(value, state, options, this._flags.insensitive)) {
            errors.push(this.createError(value === '' ? 'any.empty' : 'any.invalid', {
              value: value,
              invalids: this._invalids.values({
                stripUndefined: true
              })
            }, state, options));

            if (options.abortEarly || value === undefined) {
              // No reason to keep validating missing value
              return finish();
            }
          } // Convert value and validate type


          if (this._base) {
            var base = this._base.call(this, value, state, options);

            if (base.errors) {
              value = base.value;
              errors = errors.concat(base.errors);
              return finish(); // Base error always aborts early
            }

            if (base.value !== value) {
              value = base.value; // Check allowed and denied values using the converted value

              if (this._valids.has(value, state, options, this._flags.insensitive)) {
                return finish();
              }

              if (this._invalids.has(value, state, options, this._flags.insensitive)) {
                errors.push(this.createError(value === '' ? 'any.empty' : 'any.invalid', {
                  value: value,
                  invalids: this._invalids.values({
                    stripUndefined: true
                  })
                }, state, options));

                if (options.abortEarly) {
                  return finish();
                }
              }
            }
          } // Required values did not match


          if (this._flags.allowOnly) {
            errors.push(this.createError('any.allowOnly', {
              value: value,
              valids: this._valids.values({
                stripUndefined: true
              })
            }, state, options));

            if (options.abortEarly) {
              return finish();
            }
          } // Validate tests


          for (var i = 0; i < this._tests.length; ++i) {
            var test = this._tests[i];
            var ret = test.func.call(this, value, state, options);

            if (ret instanceof Errors.Err) {
              errors.push(ret);

              if (options.abortEarly) {
                return finish();
              }
            } else {
              value = ret;
            }
          }

          return finish();
        };

        _class.prototype._validateWithOptions = function _validateWithOptions(value, options, callback) {
          if (options) {
            this.checkOptions(options);
          }

          var settings = Settings.concat(internals.defaults, options);

          var result = this._validate(value, null, settings);

          var errors = Errors.process(result.errors, value);

          if (callback) {
            return callback(errors, result.value);
          }

          return {
            error: errors,
            value: result.value,
            then: function then(resolve, reject) {
              if (errors) {
                return Promise.reject(errors)["catch"](reject);
              }

              return Promise.resolve(result.value).then(resolve);
            },
            "catch": function _catch(reject) {
              if (errors) {
                return Promise.reject(errors)["catch"](reject);
              }

              return Promise.resolve(result.value);
            }
          };
        };

        _class.prototype.validate = function validate(value, options, callback) {
          if (typeof options === 'function') {
            return this._validateWithOptions(value, null, options);
          }

          return this._validateWithOptions(value, options, callback);
        };

        _class.prototype.describe = function describe() {
          var _this2 = this;

          var description = {
            type: this._type
          };
          var flags = Object.keys(this._flags);

          if (flags.length) {
            if (['empty', 'default', 'lazy', 'label'].some(function (flag) {
              return _this2._flags.hasOwnProperty(flag);
            })) {
              description.flags = {};

              for (var i = 0; i < flags.length; ++i) {
                var flag = flags[i];

                if (flag === 'empty') {
                  description.flags[flag] = this._flags[flag].describe();
                } else if (flag === 'default') {
                  if (Ref.isRef(this._flags[flag])) {
                    description.flags[flag] = this._flags[flag].toString();
                  } else if (typeof this._flags[flag] === 'function') {
                    description.flags[flag] = {
                      description: this._flags[flag].description,
                      "function": this._flags[flag]
                    };
                  } else {
                    description.flags[flag] = this._flags[flag];
                  }
                } else if (flag === 'lazy' || flag === 'label') {// We don't want it in the description
                } else {
                  description.flags[flag] = this._flags[flag];
                }
              }
            } else {
              description.flags = this._flags;
            }
          }

          if (this._settings) {
            description.options = Hoek.clone(this._settings);
          }

          if (this._baseType) {
            description.base = this._baseType.describe();
          }

          if (this._description) {
            description.description = this._description;
          }

          if (this._notes.length) {
            description.notes = this._notes;
          }

          if (this._tags.length) {
            description.tags = this._tags;
          }

          if (this._meta.length) {
            description.meta = this._meta;
          }

          if (this._examples.length) {
            description.examples = this._examples;
          }

          if (this._unit) {
            description.unit = this._unit;
          }

          var valids = this._valids.values();

          if (valids.length) {
            description.valids = valids.map(function (v) {
              return Ref.isRef(v) ? v.toString() : v;
            });
          }

          var invalids = this._invalids.values();

          if (invalids.length) {
            description.invalids = invalids.map(function (v) {
              return Ref.isRef(v) ? v.toString() : v;
            });
          }

          description.rules = [];

          for (var _i2 = 0; _i2 < this._tests.length; ++_i2) {
            var validator = this._tests[_i2];
            var item = {
              name: validator.name
            };

            if (validator.arg !== void 0) {
              item.arg = Ref.isRef(validator.arg) ? validator.arg.toString() : validator.arg;
            }

            var options = validator.options;

            if (options) {
              if (options.hasRef) {
                item.arg = {};
                var keys = Object.keys(validator.arg);

                for (var j = 0; j < keys.length; ++j) {
                  var key = keys[j];
                  var value = validator.arg[key];
                  item.arg[key] = Ref.isRef(value) ? value.toString() : value;
                }
              }

              if (typeof options.description === 'string') {
                item.description = options.description;
              } else if (typeof options.description === 'function') {
                item.description = options.description(item.arg);
              }
            }

            description.rules.push(item);
          }

          if (!description.rules.length) {
            delete description.rules;
          }

          var label = this._getLabel();

          if (label) {
            description.label = label;
          }

          return description;
        };

        _class.prototype.label = function label(name) {
          Hoek.assert(name && typeof name === 'string', 'Label name must be a non-empty string');
          var obj = this.clone();
          obj._flags.label = name;
          return obj;
        };

        _class.prototype._getLabel = function _getLabel(def) {
          return this._flags.label || def;
        };

        _createClass(_class, [{
          key: 'schemaType',
          get: function get() {
            return this._type;
          }
        }]);

        return _class;
      }();

      internals.Any.prototype.isImmutable = true; // Prevents Hoek from deep cloning schema objects
      // Aliases

      internals.Any.prototype.only = internals.Any.prototype.equal = internals.Any.prototype.valid;
      internals.Any.prototype.disallow = internals.Any.prototype.not = internals.Any.prototype.invalid;
      internals.Any.prototype.exist = internals.Any.prototype.required;

      internals._try = function (fn, args) {
        var err = void 0;
        var result = void 0;

        try {
          result = fn.apply(null, args);
        } catch (e) {
          err = e;
        }

        return {
          value: result,
          error: err
        };
      };
      /***/

    },
    /* 3 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (global) {
        /*!
        * The buffer module from node.js, for the browser.
        *
        * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
        * @license  MIT
        */

        /* eslint-disable no-proto */
        var base64 = __webpack_require__(33);

        var ieee754 = __webpack_require__(34);

        var isArray = __webpack_require__(35);

        exports.Buffer = Buffer;
        exports.SlowBuffer = SlowBuffer;
        exports.INSPECT_MAX_BYTES = 50;
        /**
         * If `Buffer.TYPED_ARRAY_SUPPORT`:
         *   === true    Use Uint8Array implementation (fastest)
         *   === false   Use Object implementation (most compatible, even IE6)
         *
         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
         * Opera 11.6+, iOS 4.2+.
         *
         * Due to various browser bugs, sometimes the Object implementation will be used even
         * when the browser supports typed arrays.
         *
         * Note:
         *
         *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
         *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
         *
         *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
         *
         *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
         *     incorrect length in some situations.
        
         * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
         * get the Object implementation, which is slower but behaves correctly.
         */

        Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
        /*
         * Export kMaxLength after typed array support is determined.
         */

        exports.kMaxLength = kMaxLength();

        function typedArraySupport() {
          try {
            var arr = new Uint8Array(1);
            arr.__proto__ = {
              __proto__: Uint8Array.prototype,
              foo: function foo() {
                return 42;
              }
            };
            return arr.foo() === 42 && // typed array instances can be augmented
            typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
            arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
          } catch (e) {
            return false;
          }
        }

        function kMaxLength() {
          return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
        }

        function createBuffer(that, length) {
          if (kMaxLength() < length) {
            throw new RangeError('Invalid typed array length');
          }

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            // Return an augmented `Uint8Array` instance, for best performance
            that = new Uint8Array(length);
            that.__proto__ = Buffer.prototype;
          } else {
            // Fallback: Return an object instance of the Buffer class
            if (that === null) {
              that = new Buffer(length);
            }

            that.length = length;
          }

          return that;
        }
        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */


        function Buffer(arg, encodingOrOffset, length) {
          if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
            return new Buffer(arg, encodingOrOffset, length);
          } // Common case.


          if (typeof arg === 'number') {
            if (typeof encodingOrOffset === 'string') {
              throw new Error('If encoding is specified then the first argument must be a string');
            }

            return allocUnsafe(this, arg);
          }

          return from(this, arg, encodingOrOffset, length);
        }

        Buffer.poolSize = 8192; // not used by this implementation
        // TODO: Legacy, not needed anymore. Remove in next major version.

        Buffer._augment = function (arr) {
          arr.__proto__ = Buffer.prototype;
          return arr;
        };

        function from(that, value, encodingOrOffset, length) {
          if (typeof value === 'number') {
            throw new TypeError('"value" argument must not be a number');
          }

          if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
            return fromArrayBuffer(that, value, encodingOrOffset, length);
          }

          if (typeof value === 'string') {
            return fromString(that, value, encodingOrOffset);
          }

          return fromObject(that, value);
        }
        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/


        Buffer.from = function (value, encodingOrOffset, length) {
          return from(null, value, encodingOrOffset, length);
        };

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          Buffer.prototype.__proto__ = Uint8Array.prototype;
          Buffer.__proto__ = Uint8Array;

          if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
            // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
            Object.defineProperty(Buffer, Symbol.species, {
              value: null,
              configurable: true
            });
          }
        }

        function assertSize(size) {
          if (typeof size !== 'number') {
            throw new TypeError('"size" argument must be a number');
          } else if (size < 0) {
            throw new RangeError('"size" argument must not be negative');
          }
        }

        function alloc(that, size, fill, encoding) {
          assertSize(size);

          if (size <= 0) {
            return createBuffer(that, size);
          }

          if (fill !== undefined) {
            // Only pay attention to encoding if it's a string. This
            // prevents accidentally sending in a number that would
            // be interpretted as a start offset.
            return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
          }

          return createBuffer(that, size);
        }
        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/


        Buffer.alloc = function (size, fill, encoding) {
          return alloc(null, size, fill, encoding);
        };

        function allocUnsafe(that, size) {
          assertSize(size);
          that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

          if (!Buffer.TYPED_ARRAY_SUPPORT) {
            for (var i = 0; i < size; ++i) {
              that[i] = 0;
            }
          }

          return that;
        }
        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */


        Buffer.allocUnsafe = function (size) {
          return allocUnsafe(null, size);
        };
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */


        Buffer.allocUnsafeSlow = function (size) {
          return allocUnsafe(null, size);
        };

        function fromString(that, string, encoding) {
          if (typeof encoding !== 'string' || encoding === '') {
            encoding = 'utf8';
          }

          if (!Buffer.isEncoding(encoding)) {
            throw new TypeError('"encoding" must be a valid string encoding');
          }

          var length = byteLength(string, encoding) | 0;
          that = createBuffer(that, length);
          var actual = that.write(string, encoding);

          if (actual !== length) {
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            that = that.slice(0, actual);
          }

          return that;
        }

        function fromArrayLike(that, array) {
          var length = array.length < 0 ? 0 : checked(array.length) | 0;
          that = createBuffer(that, length);

          for (var i = 0; i < length; i += 1) {
            that[i] = array[i] & 255;
          }

          return that;
        }

        function fromArrayBuffer(that, array, byteOffset, length) {
          array.byteLength; // this throws if `array` is not a valid ArrayBuffer

          if (byteOffset < 0 || array.byteLength < byteOffset) {
            throw new RangeError('\'offset\' is out of bounds');
          }

          if (array.byteLength < byteOffset + (length || 0)) {
            throw new RangeError('\'length\' is out of bounds');
          }

          if (byteOffset === undefined && length === undefined) {
            array = new Uint8Array(array);
          } else if (length === undefined) {
            array = new Uint8Array(array, byteOffset);
          } else {
            array = new Uint8Array(array, byteOffset, length);
          }

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            // Return an augmented `Uint8Array` instance, for best performance
            that = array;
            that.__proto__ = Buffer.prototype;
          } else {
            // Fallback: Return an object instance of the Buffer class
            that = fromArrayLike(that, array);
          }

          return that;
        }

        function fromObject(that, obj) {
          if (Buffer.isBuffer(obj)) {
            var len = checked(obj.length) | 0;
            that = createBuffer(that, len);

            if (that.length === 0) {
              return that;
            }

            obj.copy(that, 0, 0, len);
            return that;
          }

          if (obj) {
            if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
              if (typeof obj.length !== 'number' || isnan(obj.length)) {
                return createBuffer(that, 0);
              }

              return fromArrayLike(that, obj);
            }

            if (obj.type === 'Buffer' && isArray(obj.data)) {
              return fromArrayLike(that, obj.data);
            }
          }

          throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
        }

        function checked(length) {
          // Note: cannot use `length < kMaxLength()` here because that fails when
          // length is NaN (which is otherwise coerced to zero.)
          if (length >= kMaxLength()) {
            throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
          }

          return length | 0;
        }

        function SlowBuffer(length) {
          if (+length != length) {
            // eslint-disable-line eqeqeq
            length = 0;
          }

          return Buffer.alloc(+length);
        }

        Buffer.isBuffer = function isBuffer(b) {
          return !!(b != null && b._isBuffer);
        };

        Buffer.compare = function compare(a, b) {
          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            throw new TypeError('Arguments must be Buffers');
          }

          if (a === b) return 0;
          var x = a.length;
          var y = b.length;

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i];
              y = b[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        };

        Buffer.isEncoding = function isEncoding(encoding) {
          switch (String(encoding).toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'latin1':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return true;

            default:
              return false;
          }
        };

        Buffer.concat = function concat(list, length) {
          if (!isArray(list)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }

          if (list.length === 0) {
            return Buffer.alloc(0);
          }

          var i;

          if (length === undefined) {
            length = 0;

            for (i = 0; i < list.length; ++i) {
              length += list[i].length;
            }
          }

          var buffer = Buffer.allocUnsafe(length);
          var pos = 0;

          for (i = 0; i < list.length; ++i) {
            var buf = list[i];

            if (!Buffer.isBuffer(buf)) {
              throw new TypeError('"list" argument must be an Array of Buffers');
            }

            buf.copy(buffer, pos);
            pos += buf.length;
          }

          return buffer;
        };

        function byteLength(string, encoding) {
          if (Buffer.isBuffer(string)) {
            return string.length;
          }

          if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
            return string.byteLength;
          }

          if (typeof string !== 'string') {
            string = '' + string;
          }

          var len = string.length;
          if (len === 0) return 0; // Use a for loop to avoid recursion

          var loweredCase = false;

          for (;;) {
            switch (encoding) {
              case 'ascii':
              case 'latin1':
              case 'binary':
                return len;

              case 'utf8':
              case 'utf-8':
              case undefined:
                return utf8ToBytes(string).length;

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return len * 2;

              case 'hex':
                return len >>> 1;

              case 'base64':
                return base64ToBytes(string).length;

              default:
                if (loweredCase) return utf8ToBytes(string).length; // assume utf8

                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        }

        Buffer.byteLength = byteLength;

        function slowToString(encoding, start, end) {
          var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
          // property of a typed array.
          // This behaves neither like String nor Uint8Array in that we set start/end
          // to their upper/lower bounds if the value passed is out of range.
          // undefined is handled specially as per ECMA-262 6th Edition,
          // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

          if (start === undefined || start < 0) {
            start = 0;
          } // Return early if start > this.length. Done here to prevent potential uint32
          // coercion fail below.


          if (start > this.length) {
            return '';
          }

          if (end === undefined || end > this.length) {
            end = this.length;
          }

          if (end <= 0) {
            return '';
          } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


          end >>>= 0;
          start >>>= 0;

          if (end <= start) {
            return '';
          }

          if (!encoding) encoding = 'utf8';

          while (true) {
            switch (encoding) {
              case 'hex':
                return hexSlice(this, start, end);

              case 'utf8':
              case 'utf-8':
                return utf8Slice(this, start, end);

              case 'ascii':
                return asciiSlice(this, start, end);

              case 'latin1':
              case 'binary':
                return latin1Slice(this, start, end);

              case 'base64':
                return base64Slice(this, start, end);

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return utf16leSlice(this, start, end);

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = (encoding + '').toLowerCase();
                loweredCase = true;
            }
          }
        } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
        // Buffer instances.


        Buffer.prototype._isBuffer = true;

        function swap(b, n, m) {
          var i = b[n];
          b[n] = b[m];
          b[m] = i;
        }

        Buffer.prototype.swap16 = function swap16() {
          var len = this.length;

          if (len % 2 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 16-bits');
          }

          for (var i = 0; i < len; i += 2) {
            swap(this, i, i + 1);
          }

          return this;
        };

        Buffer.prototype.swap32 = function swap32() {
          var len = this.length;

          if (len % 4 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 32-bits');
          }

          for (var i = 0; i < len; i += 4) {
            swap(this, i, i + 3);
            swap(this, i + 1, i + 2);
          }

          return this;
        };

        Buffer.prototype.swap64 = function swap64() {
          var len = this.length;

          if (len % 8 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 64-bits');
          }

          for (var i = 0; i < len; i += 8) {
            swap(this, i, i + 7);
            swap(this, i + 1, i + 6);
            swap(this, i + 2, i + 5);
            swap(this, i + 3, i + 4);
          }

          return this;
        };

        Buffer.prototype.toString = function toString() {
          var length = this.length | 0;
          if (length === 0) return '';
          if (arguments.length === 0) return utf8Slice(this, 0, length);
          return slowToString.apply(this, arguments);
        };

        Buffer.prototype.equals = function equals(b) {
          if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
          if (this === b) return true;
          return Buffer.compare(this, b) === 0;
        };

        Buffer.prototype.inspect = function inspect() {
          var str = '';
          var max = exports.INSPECT_MAX_BYTES;

          if (this.length > 0) {
            str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
            if (this.length > max) str += ' ... ';
          }

          return '<Buffer ' + str + '>';
        };

        Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
          if (!Buffer.isBuffer(target)) {
            throw new TypeError('Argument must be a Buffer');
          }

          if (start === undefined) {
            start = 0;
          }

          if (end === undefined) {
            end = target ? target.length : 0;
          }

          if (thisStart === undefined) {
            thisStart = 0;
          }

          if (thisEnd === undefined) {
            thisEnd = this.length;
          }

          if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
            throw new RangeError('out of range index');
          }

          if (thisStart >= thisEnd && start >= end) {
            return 0;
          }

          if (thisStart >= thisEnd) {
            return -1;
          }

          if (start >= end) {
            return 1;
          }

          start >>>= 0;
          end >>>= 0;
          thisStart >>>= 0;
          thisEnd >>>= 0;
          if (this === target) return 0;
          var x = thisEnd - thisStart;
          var y = end - start;
          var len = Math.min(x, y);
          var thisCopy = this.slice(thisStart, thisEnd);
          var targetCopy = target.slice(start, end);

          for (var i = 0; i < len; ++i) {
            if (thisCopy[i] !== targetCopy[i]) {
              x = thisCopy[i];
              y = targetCopy[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
        //
        // Arguments:
        // - buffer - a Buffer to search
        // - val - a string, Buffer, or number
        // - byteOffset - an index into `buffer`; will be clamped to an int32
        // - encoding - an optional encoding, relevant is val is a string
        // - dir - true for indexOf, false for lastIndexOf


        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
          // Empty buffer means no match
          if (buffer.length === 0) return -1; // Normalize byteOffset

          if (typeof byteOffset === 'string') {
            encoding = byteOffset;
            byteOffset = 0;
          } else if (byteOffset > 0x7fffffff) {
            byteOffset = 0x7fffffff;
          } else if (byteOffset < -0x80000000) {
            byteOffset = -0x80000000;
          }

          byteOffset = +byteOffset; // Coerce to Number.

          if (isNaN(byteOffset)) {
            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : buffer.length - 1;
          } // Normalize byteOffset: negative offsets start from the end of the buffer


          if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

          if (byteOffset >= buffer.length) {
            if (dir) return -1;else byteOffset = buffer.length - 1;
          } else if (byteOffset < 0) {
            if (dir) byteOffset = 0;else return -1;
          } // Normalize val


          if (typeof val === 'string') {
            val = Buffer.from(val, encoding);
          } // Finally, search either indexOf (if dir is true) or lastIndexOf


          if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) {
              return -1;
            }

            return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
          } else if (typeof val === 'number') {
            val = val & 0xFF; // Search for a byte value [0-255]

            if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
              if (dir) {
                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
              } else {
                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
              }
            }

            return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
          }

          throw new TypeError('val must be string, number or Buffer');
        }

        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
          var indexSize = 1;
          var arrLength = arr.length;
          var valLength = val.length;

          if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase();

            if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
              if (arr.length < 2 || val.length < 2) {
                return -1;
              }

              indexSize = 2;
              arrLength /= 2;
              valLength /= 2;
              byteOffset /= 2;
            }
          }

          function read(buf, i) {
            if (indexSize === 1) {
              return buf[i];
            } else {
              return buf.readUInt16BE(i * indexSize);
            }
          }

          var i;

          if (dir) {
            var foundIndex = -1;

            for (i = byteOffset; i < arrLength; i++) {
              if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                if (foundIndex === -1) foundIndex = i;
                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
              } else {
                if (foundIndex !== -1) i -= i - foundIndex;
                foundIndex = -1;
              }
            }
          } else {
            if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

            for (i = byteOffset; i >= 0; i--) {
              var found = true;

              for (var j = 0; j < valLength; j++) {
                if (read(arr, i + j) !== read(val, j)) {
                  found = false;
                  break;
                }
              }

              if (found) return i;
            }
          }

          return -1;
        }

        Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
          return this.indexOf(val, byteOffset, encoding) !== -1;
        };

        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
        };

        Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
        };

        function hexWrite(buf, string, offset, length) {
          offset = Number(offset) || 0;
          var remaining = buf.length - offset;

          if (!length) {
            length = remaining;
          } else {
            length = Number(length);

            if (length > remaining) {
              length = remaining;
            }
          } // must be an even number of digits


          var strLen = string.length;
          if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

          if (length > strLen / 2) {
            length = strLen / 2;
          }

          for (var i = 0; i < length; ++i) {
            var parsed = parseInt(string.substr(i * 2, 2), 16);
            if (isNaN(parsed)) return i;
            buf[offset + i] = parsed;
          }

          return i;
        }

        function utf8Write(buf, string, offset, length) {
          return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
        }

        function asciiWrite(buf, string, offset, length) {
          return blitBuffer(asciiToBytes(string), buf, offset, length);
        }

        function latin1Write(buf, string, offset, length) {
          return asciiWrite(buf, string, offset, length);
        }

        function base64Write(buf, string, offset, length) {
          return blitBuffer(base64ToBytes(string), buf, offset, length);
        }

        function ucs2Write(buf, string, offset, length) {
          return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
        }

        Buffer.prototype.write = function write(string, offset, length, encoding) {
          // Buffer#write(string)
          if (offset === undefined) {
            encoding = 'utf8';
            length = this.length;
            offset = 0; // Buffer#write(string, encoding)
          } else if (length === undefined && typeof offset === 'string') {
            encoding = offset;
            length = this.length;
            offset = 0; // Buffer#write(string, offset[, length][, encoding])
          } else if (isFinite(offset)) {
            offset = offset | 0;

            if (isFinite(length)) {
              length = length | 0;
              if (encoding === undefined) encoding = 'utf8';
            } else {
              encoding = length;
              length = undefined;
            } // legacy write(string, encoding, offset, length) - remove in v0.13

          } else {
            throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
          }

          var remaining = this.length - offset;
          if (length === undefined || length > remaining) length = remaining;

          if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
            throw new RangeError('Attempt to write outside buffer bounds');
          }

          if (!encoding) encoding = 'utf8';
          var loweredCase = false;

          for (;;) {
            switch (encoding) {
              case 'hex':
                return hexWrite(this, string, offset, length);

              case 'utf8':
              case 'utf-8':
                return utf8Write(this, string, offset, length);

              case 'ascii':
                return asciiWrite(this, string, offset, length);

              case 'latin1':
              case 'binary':
                return latin1Write(this, string, offset, length);

              case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length);

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return ucs2Write(this, string, offset, length);

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        };

        Buffer.prototype.toJSON = function toJSON() {
          return {
            type: 'Buffer',
            data: Array.prototype.slice.call(this._arr || this, 0)
          };
        };

        function base64Slice(buf, start, end) {
          if (start === 0 && end === buf.length) {
            return base64.fromByteArray(buf);
          } else {
            return base64.fromByteArray(buf.slice(start, end));
          }
        }

        function utf8Slice(buf, start, end) {
          end = Math.min(buf.length, end);
          var res = [];
          var i = start;

          while (i < end) {
            var firstByte = buf[i];
            var codePoint = null;
            var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

            if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint;

              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 0x80) {
                    codePoint = firstByte;
                  }

                  break;

                case 2:
                  secondByte = buf[i + 1];

                  if ((secondByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                    if (tempCodePoint > 0x7F) {
                      codePoint = tempCodePoint;
                    }
                  }

                  break;

                case 3:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];

                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                      codePoint = tempCodePoint;
                    }
                  }

                  break;

                case 4:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  fourthByte = buf[i + 3];

                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                      codePoint = tempCodePoint;
                    }
                  }

              }
            }

            if (codePoint === null) {
              // we did not generate a valid codePoint so insert a
              // replacement char (U+FFFD) and advance only 1 byte
              codePoint = 0xFFFD;
              bytesPerSequence = 1;
            } else if (codePoint > 0xFFFF) {
              // encode to utf16 (surrogate pair dance)
              codePoint -= 0x10000;
              res.push(codePoint >>> 10 & 0x3FF | 0xD800);
              codePoint = 0xDC00 | codePoint & 0x3FF;
            }

            res.push(codePoint);
            i += bytesPerSequence;
          }

          return decodeCodePointsArray(res);
        } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
        // the lowest limit is Chrome, with 0x10000 args.
        // We go 1 magnitude less, for safety


        var MAX_ARGUMENTS_LENGTH = 0x1000;

        function decodeCodePointsArray(codePoints) {
          var len = codePoints.length;

          if (len <= MAX_ARGUMENTS_LENGTH) {
            return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
          } // Decode in chunks to avoid "call stack size exceeded".


          var res = '';
          var i = 0;

          while (i < len) {
            res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
          }

          return res;
        }

        function asciiSlice(buf, start, end) {
          var ret = '';
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i] & 0x7F);
          }

          return ret;
        }

        function latin1Slice(buf, start, end) {
          var ret = '';
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i]);
          }

          return ret;
        }

        function hexSlice(buf, start, end) {
          var len = buf.length;
          if (!start || start < 0) start = 0;
          if (!end || end < 0 || end > len) end = len;
          var out = '';

          for (var i = start; i < end; ++i) {
            out += toHex(buf[i]);
          }

          return out;
        }

        function utf16leSlice(buf, start, end) {
          var bytes = buf.slice(start, end);
          var res = '';

          for (var i = 0; i < bytes.length; i += 2) {
            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
          }

          return res;
        }

        Buffer.prototype.slice = function slice(start, end) {
          var len = this.length;
          start = ~~start;
          end = end === undefined ? len : ~~end;

          if (start < 0) {
            start += len;
            if (start < 0) start = 0;
          } else if (start > len) {
            start = len;
          }

          if (end < 0) {
            end += len;
            if (end < 0) end = 0;
          } else if (end > len) {
            end = len;
          }

          if (end < start) end = start;
          var newBuf;

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            newBuf = this.subarray(start, end);
            newBuf.__proto__ = Buffer.prototype;
          } else {
            var sliceLen = end - start;
            newBuf = new Buffer(sliceLen, undefined);

            for (var i = 0; i < sliceLen; ++i) {
              newBuf[i] = this[i + start];
            }
          }

          return newBuf;
        };
        /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */


        function checkOffset(offset, ext, length) {
          if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
          if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
        }

        Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var val = this[offset];
          var mul = 1;
          var i = 0;

          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          return val;
        };

        Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;

          if (!noAssert) {
            checkOffset(offset, byteLength, this.length);
          }

          var val = this[offset + --byteLength];
          var mul = 1;

          while (byteLength > 0 && (mul *= 0x100)) {
            val += this[offset + --byteLength] * mul;
          }

          return val;
        };

        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 1, this.length);
          return this[offset];
        };

        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] | this[offset + 1] << 8;
        };

        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] << 8 | this[offset + 1];
        };

        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
        };

        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
        };

        Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var val = this[offset];
          var mul = 1;
          var i = 0;

          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          mul *= 0x80;
          if (val >= mul) val -= Math.pow(2, 8 * byteLength);
          return val;
        };

        Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var i = byteLength;
          var mul = 1;
          var val = this[offset + --i];

          while (i > 0 && (mul *= 0x100)) {
            val += this[offset + --i] * mul;
          }

          mul *= 0x80;
          if (val >= mul) val -= Math.pow(2, 8 * byteLength);
          return val;
        };

        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 1, this.length);
          if (!(this[offset] & 0x80)) return this[offset];
          return (0xff - this[offset] + 1) * -1;
        };

        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset] | this[offset + 1] << 8;
          return val & 0x8000 ? val | 0xFFFF0000 : val;
        };

        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset + 1] | this[offset] << 8;
          return val & 0x8000 ? val | 0xFFFF0000 : val;
        };

        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
        };

        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
        };

        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, true, 23, 4);
        };

        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, false, 23, 4);
        };

        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, true, 52, 8);
        };

        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, false, 52, 8);
        };

        function checkInt(buf, value, offset, ext, max, min) {
          if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
          if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
          if (offset + ext > buf.length) throw new RangeError('Index out of range');
        }

        Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset | 0;
          byteLength = byteLength | 0;

          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var mul = 1;
          var i = 0;
          this[offset] = value & 0xFF;

          while (++i < byteLength && (mul *= 0x100)) {
            this[offset + i] = value / mul & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset | 0;
          byteLength = byteLength | 0;

          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var i = byteLength - 1;
          var mul = 1;
          this[offset + i] = value & 0xFF;

          while (--i >= 0 && (mul *= 0x100)) {
            this[offset + i] = value / mul & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
          this[offset] = value & 0xff;
          return offset + 1;
        };

        function objectWriteUInt16(buf, value, offset, littleEndian) {
          if (value < 0) value = 0xffff + value + 1;

          for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
            buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
          }
        }

        Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
          } else {
            objectWriteUInt16(this, value, offset, true);
          }

          return offset + 2;
        };

        Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
          } else {
            objectWriteUInt16(this, value, offset, false);
          }

          return offset + 2;
        };

        function objectWriteUInt32(buf, value, offset, littleEndian) {
          if (value < 0) value = 0xffffffff + value + 1;

          for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
            buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
          }
        }

        Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset + 3] = value >>> 24;
            this[offset + 2] = value >>> 16;
            this[offset + 1] = value >>> 8;
            this[offset] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, true);
          }

          return offset + 4;
        };

        Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, false);
          }

          return offset + 4;
        };

        Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset | 0;

          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = 0;
          var mul = 1;
          var sub = 0;
          this[offset] = value & 0xFF;

          while (++i < byteLength && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
              sub = 1;
            }

            this[offset + i] = (value / mul >> 0) - sub & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset | 0;

          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = byteLength - 1;
          var mul = 1;
          var sub = 0;
          this[offset + i] = value & 0xFF;

          while (--i >= 0 && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
              sub = 1;
            }

            this[offset + i] = (value / mul >> 0) - sub & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
          if (value < 0) value = 0xff + value + 1;
          this[offset] = value & 0xff;
          return offset + 1;
        };

        Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
          } else {
            objectWriteUInt16(this, value, offset, true);
          }

          return offset + 2;
        };

        Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
          } else {
            objectWriteUInt16(this, value, offset, false);
          }

          return offset + 2;
        };

        Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
            this[offset + 2] = value >>> 16;
            this[offset + 3] = value >>> 24;
          } else {
            objectWriteUInt32(this, value, offset, true);
          }

          return offset + 4;
        };

        Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          if (value < 0) value = 0xffffffff + value + 1;

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, false);
          }

          return offset + 4;
        };

        function checkIEEE754(buf, value, offset, ext, max, min) {
          if (offset + ext > buf.length) throw new RangeError('Index out of range');
          if (offset < 0) throw new RangeError('Index out of range');
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
          if (!noAssert) {
            checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
          }

          ieee754.write(buf, value, offset, littleEndian, 23, 4);
          return offset + 4;
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
          return writeFloat(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
          return writeFloat(this, value, offset, false, noAssert);
        };

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
          if (!noAssert) {
            checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
          }

          ieee754.write(buf, value, offset, littleEndian, 52, 8);
          return offset + 8;
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
          return writeDouble(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
          return writeDouble(this, value, offset, false, noAssert);
        }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
          if (!start) start = 0;
          if (!end && end !== 0) end = this.length;
          if (targetStart >= target.length) targetStart = target.length;
          if (!targetStart) targetStart = 0;
          if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

          if (end === start) return 0;
          if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

          if (targetStart < 0) {
            throw new RangeError('targetStart out of bounds');
          }

          if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
          if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

          if (end > this.length) end = this.length;

          if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start;
          }

          var len = end - start;
          var i;

          if (this === target && start < targetStart && targetStart < end) {
            // descending copy from end
            for (i = len - 1; i >= 0; --i) {
              target[i + targetStart] = this[i + start];
            }
          } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
            // ascending copy from start
            for (i = 0; i < len; ++i) {
              target[i + targetStart] = this[i + start];
            }
          } else {
            Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
          }

          return len;
        }; // Usage:
        //    buffer.fill(number[, offset[, end]])
        //    buffer.fill(buffer[, offset[, end]])
        //    buffer.fill(string[, offset[, end]][, encoding])


        Buffer.prototype.fill = function fill(val, start, end, encoding) {
          // Handle string cases:
          if (typeof val === 'string') {
            if (typeof start === 'string') {
              encoding = start;
              start = 0;
              end = this.length;
            } else if (typeof end === 'string') {
              encoding = end;
              end = this.length;
            }

            if (val.length === 1) {
              var code = val.charCodeAt(0);

              if (code < 256) {
                val = code;
              }
            }

            if (encoding !== undefined && typeof encoding !== 'string') {
              throw new TypeError('encoding must be a string');
            }

            if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
              throw new TypeError('Unknown encoding: ' + encoding);
            }
          } else if (typeof val === 'number') {
            val = val & 255;
          } // Invalid ranges are not set to a default, so can range check early.


          if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError('Out of range index');
          }

          if (end <= start) {
            return this;
          }

          start = start >>> 0;
          end = end === undefined ? this.length : end >>> 0;
          if (!val) val = 0;
          var i;

          if (typeof val === 'number') {
            for (i = start; i < end; ++i) {
              this[i] = val;
            }
          } else {
            var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
            var len = bytes.length;

            for (i = 0; i < end - start; ++i) {
              this[i + start] = bytes[i % len];
            }
          }

          return this;
        }; // HELPER FUNCTIONS
        // ================


        var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

        function base64clean(str) {
          // Node strips out invalid characters like \n and \t from the string, base64-js does not
          str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

          if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

          while (str.length % 4 !== 0) {
            str = str + '=';
          }

          return str;
        }

        function stringtrim(str) {
          if (str.trim) return str.trim();
          return str.replace(/^\s+|\s+$/g, '');
        }

        function toHex(n) {
          if (n < 16) return '0' + n.toString(16);
          return n.toString(16);
        }

        function utf8ToBytes(string, units) {
          units = units || Infinity;
          var codePoint;
          var length = string.length;
          var leadSurrogate = null;
          var bytes = [];

          for (var i = 0; i < length; ++i) {
            codePoint = string.charCodeAt(i); // is surrogate component

            if (codePoint > 0xD7FF && codePoint < 0xE000) {
              // last char was a lead
              if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                  // unexpected trail
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  continue;
                } else if (i + 1 === length) {
                  // unpaired lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  continue;
                } // valid lead


                leadSurrogate = codePoint;
                continue;
              } // 2 leads in a row


              if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
              } // valid surrogate pair


              codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
            } else if (leadSurrogate) {
              // valid bmp char, but last char was a lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            }

            leadSurrogate = null; // encode utf8

            if (codePoint < 0x80) {
              if ((units -= 1) < 0) break;
              bytes.push(codePoint);
            } else if (codePoint < 0x800) {
              if ((units -= 2) < 0) break;
              bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
            } else if (codePoint < 0x10000) {
              if ((units -= 3) < 0) break;
              bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
            } else if (codePoint < 0x110000) {
              if ((units -= 4) < 0) break;
              bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
            } else {
              throw new Error('Invalid code point');
            }
          }

          return bytes;
        }

        function asciiToBytes(str) {
          var byteArray = [];

          for (var i = 0; i < str.length; ++i) {
            // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(str.charCodeAt(i) & 0xFF);
          }

          return byteArray;
        }

        function utf16leToBytes(str, units) {
          var c, hi, lo;
          var byteArray = [];

          for (var i = 0; i < str.length; ++i) {
            if ((units -= 2) < 0) break;
            c = str.charCodeAt(i);
            hi = c >> 8;
            lo = c % 256;
            byteArray.push(lo);
            byteArray.push(hi);
          }

          return byteArray;
        }

        function base64ToBytes(str) {
          return base64.toByteArray(base64clean(str));
        }

        function blitBuffer(src, dst, offset, length) {
          for (var i = 0; i < length; ++i) {
            if (i + offset >= dst.length || i >= src.length) break;
            dst[i + offset] = src[i];
          }

          return i;
        }

        function isnan(val) {
          return val !== val; // eslint-disable-line no-self-compare
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(5));
      /***/
    },
    /* 4 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
      };

      var Hoek = __webpack_require__(0);

      var Ref = __webpack_require__(1); // Type modules are delay-loaded to prevent circular dependencies
      // Declare internals


      var internals = {};

      exports.schema = function (Joi, config) {
        if (config !== undefined && config !== null && (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {
          if (config.isJoi) {
            return config;
          }

          if (Array.isArray(config)) {
            return Joi.alternatives()["try"](config);
          }

          if (config instanceof RegExp) {
            return Joi.string().regex(config);
          }

          if (config instanceof Date) {
            return Joi.date().valid(config);
          }

          return Joi.object().keys(config);
        }

        if (typeof config === 'string') {
          return Joi.string().valid(config);
        }

        if (typeof config === 'number') {
          return Joi.number().valid(config);
        }

        if (typeof config === 'boolean') {
          return Joi["boolean"]().valid(config);
        }

        if (Ref.isRef(config)) {
          return Joi.valid(config);
        }

        Hoek.assert(config === null, 'Invalid schema content:', config);
        return Joi.valid(null);
      };

      exports.ref = function (id) {
        return Ref.isRef(id) ? id : Ref.create(id);
      };
      /***/

    },
    /* 5 */

    /***/
    function (module, exports) {
      var g; // This works in non-strict mode

      g = function () {
        return this;
      }();

      try {
        // This works if eval is allowed (see CSP)
        g = g || Function("return this")() || (1, eval)("this");
      } catch (e) {
        // This works if the window reference is available
        if ((typeof window === "undefined" ? "undefined" : _typeof2(window)) === "object") g = window;
      } // g can still be undefined, but nothing to do about it...
      // We return undefined, instead of nothing here, so it's
      // easier to handle this case. if(!global) { ...}


      module.exports = g;
      /***/
    },
    /* 6 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
      };

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var Hoek = __webpack_require__(0);

      var Language = __webpack_require__(20); // Declare internals


      var internals = {
        annotations: Symbol('joi-annotations')
      };

      internals.stringify = function (value, wrapArrays) {
        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

        if (value === null) {
          return 'null';
        }

        if (type === 'string') {
          return value;
        }

        if (value instanceof exports.Err || type === 'function' || type === 'symbol') {
          return value.toString();
        }

        if (type === 'object') {
          if (Array.isArray(value)) {
            var partial = '';

            for (var i = 0; i < value.length; ++i) {
              partial = partial + (partial.length ? ', ' : '') + internals.stringify(value[i], wrapArrays);
            }

            return wrapArrays ? '[' + partial + ']' : partial;
          }

          return value.toString();
        }

        return JSON.stringify(value);
      };

      exports.Err = function () {
        function _class(type, context, state, options, flags, message, template) {
          _classCallCheck(this, _class);

          this.isJoi = true;
          this.type = type;
          this.context = context || {};
          this.context.key = state.path[state.path.length - 1];
          this.context.label = state.key;
          this.path = state.path;
          this.options = options;
          this.flags = flags;
          this.message = message;
          this.template = template;
          var localized = this.options.language;

          if (this.flags.label) {
            this.context.label = this.flags.label;
          } else if (localized && ( // language can be null for arrays exclusion check
          this.context.label === '' || this.context.label === null)) {
            this.context.label = localized.root || Language.errors.root;
          }
        }

        _class.prototype.toString = function toString() {
          var _this = this;

          if (this.message) {
            return this.message;
          }

          var format = void 0;

          if (this.template) {
            format = this.template;
          }

          var localized = this.options.language;
          format = format || Hoek.reach(localized, this.type) || Hoek.reach(Language.errors, this.type);

          if (format === undefined) {
            return 'Error code "' + this.type + '" is not defined, your custom type is missing the correct language definition';
          }

          var wrapArrays = Hoek.reach(localized, 'messages.wrapArrays');

          if (typeof wrapArrays !== 'boolean') {
            wrapArrays = Language.errors.messages.wrapArrays;
          }

          if (format === null) {
            var childrenString = internals.stringify(this.context.reason, wrapArrays);

            if (wrapArrays) {
              return childrenString.slice(1, -1);
            }

            return childrenString;
          }

          var hasKey = /\{\{\!?label\}\}/.test(format);
          var skipKey = format.length > 2 && format[0] === '!' && format[1] === '!';

          if (skipKey) {
            format = format.slice(2);
          }

          if (!hasKey && !skipKey) {
            var localizedKey = Hoek.reach(localized, 'key');

            if (typeof localizedKey === 'string') {
              format = localizedKey + format;
            } else {
              format = Hoek.reach(Language.errors, 'key') + format;
            }
          }

          return format.replace(/\{\{(\!?)([^}]+)\}\}/g, function ($0, isSecure, name) {
            var value = Hoek.reach(_this.context, name);
            var normalized = internals.stringify(value, wrapArrays);
            return isSecure && _this.options.escapeHtml ? Hoek.escapeHtml(normalized) : normalized;
          });
        };

        return _class;
      }();

      exports.create = function (type, context, state, options, flags, message, template) {
        return new exports.Err(type, context, state, options, flags, message, template);
      };

      exports.process = function (errors, object) {
        if (!errors || !errors.length) {
          return null;
        } // Construct error


        var message = '';
        var details = [];

        var processErrors = function processErrors(localErrors, parent) {
          for (var i = 0; i < localErrors.length; ++i) {
            var item = localErrors[i];

            if (item instanceof Error) {
              return item;
            }

            if (item.flags.error && typeof item.flags.error !== 'function') {
              return item.flags.error;
            }

            var itemMessage = void 0;

            if (parent === undefined) {
              itemMessage = item.toString();
              message = message + (message ? '. ' : '') + itemMessage;
            } // Do not push intermediate errors, we're only interested in leafs


            if (item.context.reason && item.context.reason.length) {
              var _override = processErrors(item.context.reason, item.path);

              if (_override) {
                return _override;
              }
            } else {
              details.push({
                message: itemMessage || item.toString(),
                path: item.path,
                type: item.type,
                context: item.context
              });
            }
          }
        };

        var override = processErrors(errors);

        if (override) {
          return override;
        }

        var error = new Error(message);
        error.isJoi = true;
        error.name = 'ValidationError';
        error.details = details;
        error._object = object;
        error.annotate = internals.annotate;
        return error;
      }; // Inspired by json-stringify-safe


      internals.safeStringify = function (obj, spaces) {
        return JSON.stringify(obj, internals.serializer(), spaces);
      };

      internals.serializer = function () {
        var keys = [];
        var stack = [];

        var cycleReplacer = function cycleReplacer(key, value) {
          if (stack[0] === value) {
            return '[Circular ~]';
          }

          return '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']';
        };

        return function (key, value) {
          if (stack.length > 0) {
            var thisPos = stack.indexOf(this);

            if (~thisPos) {
              stack.length = thisPos + 1;
              keys.length = thisPos + 1;
              keys[thisPos] = key;
            } else {
              stack.push(this);
              keys.push(key);
            }

            if (~stack.indexOf(value)) {
              value = cycleReplacer.call(this, key, value);
            }
          } else {
            stack.push(value);
          }

          if (value) {
            var annotations = value[internals.annotations];

            if (annotations) {
              if (Array.isArray(value)) {
                var annotated = [];

                for (var i = 0; i < value.length; ++i) {
                  if (annotations.errors[i]) {
                    annotated.push('_$idx$_' + annotations.errors[i].sort().join(', ') + '_$end$_');
                  }

                  annotated.push(value[i]);
                }

                value = annotated;
              } else {
                var errorKeys = Object.keys(annotations.errors);

                for (var _i = 0; _i < errorKeys.length; ++_i) {
                  var errorKey = errorKeys[_i];
                  value[errorKey + '_$key$_' + annotations.errors[errorKey].sort().join(', ') + '_$end$_'] = value[errorKey];
                  value[errorKey] = undefined;
                }

                var missingKeys = Object.keys(annotations.missing);

                for (var _i2 = 0; _i2 < missingKeys.length; ++_i2) {
                  var missingKey = missingKeys[_i2];
                  value['_$miss$_' + missingKey + '|' + annotations.missing[missingKey] + '_$end$_'] = '__missing__';
                }
              }

              return value;
            }
          }

          if (value === Infinity || value === -Infinity || Number.isNaN(value) || typeof value === 'function' || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'symbol') {
            return '[' + value.toString() + ']';
          }

          return value;
        };
      };

      internals.annotate = function (stripColorCodes) {
        var redFgEscape = stripColorCodes ? '' : '\x1B[31m';
        var redBgEscape = stripColorCodes ? '' : '\x1B[41m';
        var endColor = stripColorCodes ? '' : '\x1B[0m';

        if (_typeof(this._object) !== 'object') {
          return this.details[0].message;
        }

        var obj = Hoek.clone(this._object || {});

        for (var i = this.details.length - 1; i >= 0; --i) {
          // Reverse order to process deepest child first
          var pos = i + 1;
          var error = this.details[i];
          var path = error.path;
          var ref = obj;

          for (var j = 0;; ++j) {
            var seg = path[j];

            if (ref.isImmutable) {
              ref = ref.clone(); // joi schemas are not cloned by hoek, we have to take this extra step
            }

            if (j + 1 < path.length && ref[seg] && typeof ref[seg] !== 'string') {
              ref = ref[seg];
            } else {
              var refAnnotations = ref[internals.annotations] = ref[internals.annotations] || {
                errors: {},
                missing: {}
              };
              var value = ref[seg];
              var cacheKey = seg || error.context.label;

              if (value !== undefined) {
                refAnnotations.errors[cacheKey] = refAnnotations.errors[cacheKey] || [];
                refAnnotations.errors[cacheKey].push(pos);
              } else {
                refAnnotations.missing[cacheKey] = pos;
              }

              break;
            }
          }
        }

        var replacers = {
          key: /_\$key\$_([, \d]+)_\$end\$_\"/g,
          missing: /\"_\$miss\$_([^\|]+)\|(\d+)_\$end\$_\"\: \"__missing__\"/g,
          arrayIndex: /\s*\"_\$idx\$_([, \d]+)_\$end\$_\",?\n(.*)/g,
          specials: /"\[(NaN|Symbol.*|-?Infinity|function.*|\(.*)\]"/g
        };
        var message = internals.safeStringify(obj, 2).replace(replacers.key, function ($0, $1) {
          return '" ' + redFgEscape + '[' + $1 + ']' + endColor;
        }).replace(replacers.missing, function ($0, $1, $2) {
          return redBgEscape + '"' + $1 + '"' + endColor + redFgEscape + ' [' + $2 + ']: -- missing --' + endColor;
        }).replace(replacers.arrayIndex, function ($0, $1, $2) {
          return '\n' + $2 + ' ' + redFgEscape + '[' + $1 + ']' + endColor;
        }).replace(replacers.specials, function ($0, $1) {
          return $1;
        });
        message = message + '\n' + redFgEscape;

        for (var _i3 = 0; _i3 < this.details.length; ++_i3) {
          var _pos = _i3 + 1;

          message = message + '\n[' + _pos + '] ' + this.details[_i3].message;
        }

        message = message + endColor;
        return message;
      };
      /***/

    },
    /* 7 */

    /***/
    function (module, exports) {
      // shim for using process in browser
      var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
      // don't break things.  But we need to wrap it in a try catch in case it is
      // wrapped in strict mode code which doesn't define any globals.  It's inside a
      // function because try/catches deoptimize in certain engines.

      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
      }

      function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined');
      }

      (function () {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }

        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();

      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
        } // if setTimeout wasn't available but was latter defined


        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }

        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }

      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
        } // if clearTimeout wasn't available but was latter defined


        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }

        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
          }
        }
      }

      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }

        draining = false;

        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }

        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }

        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;

        while (len) {
          currentQueue = queue;
          queue = [];

          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }

          queueIndex = -1;
          len = queue.length;
        }

        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);

        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }

        queue.push(new Item(fun, args));

        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      }; // v8 likes predictible objects


      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }

      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };

      process.title = 'browser';
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = ''; // empty string to avoid regexp issues

      process.versions = {};

      function noop() {}

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;

      process.listeners = function (name) {
        return [];
      };

      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };

      process.cwd = function () {
        return '/';
      };

      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };

      process.umask = function () {
        return 0;
      };
      /***/

    },
    /* 8 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (_typeof2(call) === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + _typeof2(superClass));
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        } else {
          return Array.from(arr);
        }
      }

      var Hoek = __webpack_require__(0);

      var Any = __webpack_require__(2);

      var Cast = __webpack_require__(4);

      var Errors = __webpack_require__(6);

      var Lazy = __webpack_require__(26);

      var Ref = __webpack_require__(1);

      var Settings = __webpack_require__(11); // Declare internals


      var internals = {
        alternatives: __webpack_require__(10),
        array: __webpack_require__(22),
        "boolean": __webpack_require__(24),
        binary: __webpack_require__(23),
        date: __webpack_require__(12),
        func: __webpack_require__(25),
        number: __webpack_require__(27),
        object: __webpack_require__(13),
        string: __webpack_require__(28)
      };

      internals.callWithDefaults = function (schema, args) {
        var _schema;

        Hoek.assert(this, 'Must be invoked on a Joi instance.');

        if (this._defaults) {
          schema = this._defaults(schema);
        }

        schema._currentJoi = this;
        return (_schema = schema)._init.apply(_schema, _toConsumableArray(args));
      };

      internals.root = function () {
        var any = new Any();
        var root = any.clone();
        Any.prototype._currentJoi = root;
        root._currentJoi = root;

        root.any = function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          Hoek.assert(args.length === 0, 'Joi.any() does not allow arguments.');
          return internals.callWithDefaults.call(this, any, args);
        };

        root.alternatives = root.alt = function () {
          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return internals.callWithDefaults.call(this, internals.alternatives, args);
        };

        root.array = function () {
          for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          Hoek.assert(args.length === 0, 'Joi.array() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals.array, args);
        };

        root["boolean"] = root.bool = function () {
          for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }

          Hoek.assert(args.length === 0, 'Joi.boolean() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals["boolean"], args);
        };

        root.binary = function () {
          for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }

          Hoek.assert(args.length === 0, 'Joi.binary() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals.binary, args);
        };

        root.date = function () {
          for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
          }

          Hoek.assert(args.length === 0, 'Joi.date() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals.date, args);
        };

        root.func = function () {
          for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
          }

          Hoek.assert(args.length === 0, 'Joi.func() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals.func, args);
        };

        root.number = function () {
          for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
            args[_key8] = arguments[_key8];
          }

          Hoek.assert(args.length === 0, 'Joi.number() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals.number, args);
        };

        root.object = function () {
          for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            args[_key9] = arguments[_key9];
          }

          return internals.callWithDefaults.call(this, internals.object, args);
        };

        root.string = function () {
          for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
            args[_key10] = arguments[_key10];
          }

          Hoek.assert(args.length === 0, 'Joi.string() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals.string, args);
        };

        root.ref = function () {
          return Ref.create.apply(Ref, arguments);
        };

        root.isRef = function (ref) {
          return Ref.isRef(ref);
        };

        root.validate = function (value)
        /*, [schema], [options], callback */
        {
          var _ref;

          var last = (_ref = (arguments.length <= 1 ? 0 : arguments.length - 1) - 1 + 1, arguments.length <= _ref ? undefined : arguments[_ref]);
          var callback = typeof last === 'function' ? last : null;
          var count = (arguments.length <= 1 ? 0 : arguments.length - 1) - (callback ? 1 : 0);

          if (count === 0) {
            return any.validate(value, callback);
          }

          var options = count === 2 ? arguments.length <= 2 ? undefined : arguments[2] : {};
          var schema = root.compile(arguments.length <= 1 ? undefined : arguments[1]);
          return schema._validateWithOptions(value, options, callback);
        };

        root.describe = function () {
          var schema = arguments.length ? root.compile(arguments.length <= 0 ? undefined : arguments[0]) : any;
          return schema.describe();
        };

        root.compile = function (schema) {
          try {
            return Cast.schema(this, schema);
          } catch (err) {
            if (err.hasOwnProperty('path')) {
              err.message = err.message + '(' + err.path + ')';
            }

            throw err;
          }
        };

        root.assert = function (value, schema, message) {
          root.attempt(value, schema, message);
        };

        root.attempt = function (value, schema, message) {
          var result = root.validate(value, schema);
          var error = result.error;

          if (error) {
            if (!message) {
              if (typeof error.annotate === 'function') {
                error.message = error.annotate();
              }

              throw error;
            }

            if (!(message instanceof Error)) {
              if (typeof error.annotate === 'function') {
                error.message = message + ' ' + error.annotate();
              }

              throw error;
            }

            throw message;
          }

          return result.value;
        };

        root.reach = function (schema, path) {
          Hoek.assert(schema && schema instanceof Any, 'you must provide a joi schema');
          Hoek.assert(Array.isArray(path) || typeof path === 'string', 'path must be a string or an array of strings');

          var reach = function reach(sourceSchema, schemaPath) {
            if (!schemaPath.length) {
              return sourceSchema;
            }

            var children = sourceSchema._inner.children;

            if (!children) {
              return;
            }

            var key = schemaPath.shift();

            for (var i = 0; i < children.length; ++i) {
              var child = children[i];

              if (child.key === key) {
                return reach(child.schema, schemaPath);
              }
            }
          };

          var schemaPath = typeof path === 'string' ? path ? path.split('.') : [] : path.slice();
          return reach(schema, schemaPath);
        };

        root.lazy = function (fn) {
          return Lazy.set(fn);
        };

        root.defaults = function (fn) {
          var _this = this;

          Hoek.assert(typeof fn === 'function', 'Defaults must be a function');
          var joi = Object.create(this.any());
          joi = fn(joi);
          Hoek.assert(joi && joi instanceof this.constructor, 'defaults() must return a schema');

          _extends(joi, this, joi.clone()); // Re-add the types from `this` but also keep the settings from joi's potential new defaults


          joi._defaults = function (schema) {
            if (_this._defaults) {
              schema = _this._defaults(schema);
              Hoek.assert(schema instanceof _this.constructor, 'defaults() must return a schema');
            }

            schema = fn(schema);
            Hoek.assert(schema instanceof _this.constructor, 'defaults() must return a schema');
            return schema;
          };

          return joi;
        };

        root.extend = function () {
          var _this2 = this;

          for (var _len11 = arguments.length, args = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
            args[_key11] = arguments[_key11];
          }

          var extensions = Hoek.flatten(args);
          Hoek.assert(extensions.length > 0, 'You need to provide at least one extension');
          this.assert(extensions, root.extensionsSchema);
          var joi = Object.create(this.any());

          _extends(joi, this);

          var _loop = function _loop(i) {
            var extension = extensions[i];

            if (typeof extension === 'function') {
              extension = extension(joi);
            }

            _this2.assert(extension, root.extensionSchema);

            var base = (extension.base || _this2.any()).clone(); // Cloning because we're going to override language afterwards


            var ctor = base.constructor;

            var type = function (_ctor) {
              _inherits(type, _ctor); // eslint-disable-line no-loop-func


              function type() {
                _classCallCheck(this, type);

                var _this3 = _possibleConstructorReturn(this, _ctor.call(this));

                if (extension.base) {
                  _extends(_this3, base);
                }

                _this3._type = extension.name;

                if (extension.language) {
                  _this3._settings = Settings.concat(_this3._settings, {
                    language: _defineProperty({}, extension.name, extension.language)
                  });
                }

                return _this3;
              }

              return type;
            }(ctor);

            if (extension.coerce) {
              type.prototype._coerce = function (value, state, options) {
                if (ctor.prototype._coerce) {
                  var baseRet = ctor.prototype._coerce.call(this, value, state, options);

                  if (baseRet.errors) {
                    return baseRet;
                  }

                  value = baseRet.value;
                }

                var ret = extension.coerce.call(this, value, state, options);

                if (ret instanceof Errors.Err) {
                  return {
                    value: value,
                    errors: ret
                  };
                }

                return {
                  value: ret
                };
              };
            }

            if (extension.pre) {
              type.prototype._base = function (value, state, options) {
                if (ctor.prototype._base) {
                  var baseRet = ctor.prototype._base.call(this, value, state, options);

                  if (baseRet.errors) {
                    return baseRet;
                  }

                  value = baseRet.value;
                }

                var ret = extension.pre.call(this, value, state, options);

                if (ret instanceof Errors.Err) {
                  return {
                    value: value,
                    errors: ret
                  };
                }

                return {
                  value: ret
                };
              };
            }

            if (extension.rules) {
              var _loop2 = function _loop2(j) {
                var rule = extension.rules[j];
                var ruleArgs = rule.params ? rule.params instanceof Any ? rule.params._inner.children.map(function (k) {
                  return k.key;
                }) : Object.keys(rule.params) : [];
                var validateArgs = rule.params ? Cast.schema(_this2, rule.params) : null;

                type.prototype[rule.name] = function () {
                  for (var _len12 = arguments.length, rArgs = Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
                    rArgs[_key12] = arguments[_key12];
                  } // eslint-disable-line no-loop-func


                  if (rArgs.length > ruleArgs.length) {
                    throw new Error('Unexpected number of arguments');
                  }

                  var hasRef = false;
                  var arg = {};

                  for (var k = 0; k < ruleArgs.length; ++k) {
                    arg[ruleArgs[k]] = rArgs[k];

                    if (!hasRef && Ref.isRef(rArgs[k])) {
                      hasRef = true;
                    }
                  }

                  if (validateArgs) {
                    arg = joi.attempt(arg, validateArgs);
                  }

                  var schema = void 0;

                  if (rule.validate) {
                    var validate = function validate(value, state, options) {
                      return rule.validate.call(this, arg, value, state, options);
                    };

                    schema = this._test(rule.name, arg, validate, {
                      description: rule.description,
                      hasRef: hasRef
                    });
                  } else {
                    schema = this.clone();
                  }

                  if (rule.setup) {
                    var newSchema = rule.setup.call(schema, arg);

                    if (newSchema !== undefined) {
                      Hoek.assert(newSchema instanceof Any, 'Setup of extension Joi.' + this._type + '().' + rule.name + '() must return undefined or a Joi object');
                      schema = newSchema;
                    }
                  }

                  return schema;
                };
              };

              for (var j = 0; j < extension.rules.length; ++j) {
                _loop2(j);
              }
            }

            if (extension.describe) {
              type.prototype.describe = function () {
                var description = ctor.prototype.describe.call(this);
                return extension.describe.call(this, description);
              };
            }

            var instance = new type();

            joi[extension.name] = function () {
              for (var _len13 = arguments.length, extArgs = Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
                extArgs[_key13] = arguments[_key13];
              }

              return internals.callWithDefaults.call(this, instance, extArgs);
            };
          };

          for (var i = 0; i < extensions.length; ++i) {
            _loop(i);
          }

          return joi;
        };

        root.extensionSchema = internals.object.keys({
          base: internals.object.type(Any, 'Joi object'),
          name: internals.string.required(),
          coerce: internals.func.arity(3),
          pre: internals.func.arity(3),
          language: internals.object,
          describe: internals.func.arity(1),
          rules: internals.array.items(internals.object.keys({
            name: internals.string.required(),
            setup: internals.func.arity(1),
            validate: internals.func.arity(4),
            params: [internals.object.pattern(/.*/, internals.object.type(Any, 'Joi object')), internals.object.type(internals.object.constructor, 'Joi object')],
            description: [internals.string, internals.func.arity(1)]
          }).or('setup', 'validate'))
        }).strict();
        root.extensionsSchema = internals.array.items([internals.object, internals.func.arity(1)]).strict();
        root.version = __webpack_require__(36).version;
        return root;
      };

      module.exports = internals.root();
      /***/
    },
    /* 9 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
          return _typeof2(obj);
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
        };

        function _toConsumableArray(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }

            return arr2;
          } else {
            return Array.from(arr);
          }
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        var Ref = __webpack_require__(1);

        var internals = {};

        internals.extendedCheckForValue = function (value, insensitive) {
          var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);

          if (valueType === 'object') {
            if (value instanceof Date) {
              return function (item) {
                return item instanceof Date && value.getTime() === item.getTime();
              };
            }

            if (Buffer.isBuffer(value)) {
              return function (item) {
                return Buffer.isBuffer(item) && value.length === item.length && value.toString('binary') === item.toString('binary');
              };
            }
          } else if (insensitive && valueType === 'string') {
            var lowercaseValue = value.toLowerCase();
            return function (item) {
              return typeof item === 'string' && lowercaseValue === item.toLowerCase();
            };
          }

          return null;
        };

        module.exports = function () {
          function InternalSet(from) {
            _classCallCheck(this, InternalSet);

            this._set = new Set(from);
            this._hasRef = false;
          }

          InternalSet.prototype.add = function add(value, refs) {
            var isRef = Ref.isRef(value);

            if (!isRef && this.has(value, null, null, false)) {
              return this;
            }

            if (refs !== undefined) {
              // If it's a merge, we don't have any refs
              Ref.push(refs, value);
            }

            this._set.add(value);

            this._hasRef |= isRef;
            return this;
          };

          InternalSet.prototype.merge = function merge(add, remove) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = add._set[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var item = _step.value;
                this.add(item);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"]) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = remove._set[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _item = _step2.value;
                this.remove(_item);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            return this;
          };

          InternalSet.prototype.remove = function remove(value) {
            this._set["delete"](value);

            return this;
          };

          InternalSet.prototype.has = function has(value, state, options, insensitive) {
            if (!this._set.size) {
              return false;
            }

            var hasValue = this._set.has(value);

            if (hasValue) {
              return hasValue;
            }

            var extendedCheck = internals.extendedCheckForValue(value, insensitive);

            if (!extendedCheck) {
              if (state && this._hasRef) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = this._set[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var item = _step3.value;

                    if (Ref.isRef(item)) {
                      item = item(state.reference || state.parent, options);

                      if (value === item || Array.isArray(item) && item.includes(value)) {
                        return true;
                      }
                    }
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
                      _iterator3["return"]();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }
              }

              return false;
            }

            return this._has(value, state, options, extendedCheck);
          };

          InternalSet.prototype._has = function _has(value, state, options, check) {
            var checkRef = !!(state && this._hasRef);

            var isReallyEqual = function isReallyEqual(item) {
              if (value === item) {
                return true;
              }

              return check(item);
            };

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = this._set[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var item = _step4.value;

                if (checkRef && Ref.isRef(item)) {
                  // Only resolve references if there is a state, otherwise it's a merge
                  item = item(state.reference || state.parent, options);

                  if (Array.isArray(item)) {
                    if (item.find(isReallyEqual)) {
                      return true;
                    }

                    continue;
                  }
                }

                if (isReallyEqual(item)) {
                  return true;
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4["return"]) {
                  _iterator4["return"]();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }

            return false;
          };

          InternalSet.prototype.values = function values(options) {
            if (options && options.stripUndefined) {
              var values = [];
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = undefined;

              try {
                for (var _iterator5 = this._set[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var item = _step5.value;

                  if (item !== undefined) {
                    values.push(item);
                  }
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5["return"]) {
                    _iterator5["return"]();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }

              return values;
            }

            return Array.from(this._set);
          };

          InternalSet.prototype.slice = function slice() {
            var set = new InternalSet(this._set);
            set._hasRef = this._hasRef;
            return set;
          };

          InternalSet.prototype.concat = function concat(source) {
            var set = new InternalSet([].concat(_toConsumableArray(this._set), _toConsumableArray(source._set)));
            set._hasRef = !!(this._hasRef | source._hasRef);
            return set;
          };

          return InternalSet;
        }();
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(3).Buffer);
      /***/
    },
    /* 10 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
      };

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (_typeof2(call) === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + _typeof2(superClass));
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Hoek = __webpack_require__(0);

      var Any = __webpack_require__(2);

      var Cast = __webpack_require__(4);

      var Ref = __webpack_require__(1); // Declare internals


      var internals = {};

      internals.Alternatives = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'alternatives';

          _this._invalids.remove(null);

          _this._inner.matches = [];
          return _this;
        }

        _class.prototype._init = function _init() {
          return arguments.length ? this["try"].apply(this, arguments) : this;
        };

        _class.prototype._base = function _base(value, state, options) {
          var errors = [];
          var il = this._inner.matches.length;
          var baseType = this._baseType;

          for (var i = 0; i < il; ++i) {
            var item = this._inner.matches[i];

            if (!item.schema) {
              var schema = item.peek || item.is;
              var input = item.is ? item.ref(state.reference || state.parent, options) : value;

              var failed = schema._validate(input, null, options, state.parent).errors;

              if (failed) {
                if (item.otherwise) {
                  return item.otherwise._validate(value, state, options);
                }
              } else if (item.then) {
                return item.then._validate(value, state, options);
              }

              if (i === il - 1 && baseType) {
                return baseType._validate(value, state, options);
              }

              continue;
            }

            var result = item.schema._validate(value, state, options);

            if (!result.errors) {
              // Found a valid match
              return result;
            }

            errors = errors.concat(result.errors);
          }

          if (errors.length) {
            return {
              errors: this.createError('alternatives.child', {
                reason: errors
              }, state, options)
            };
          }

          return {
            errors: this.createError('alternatives.base', null, state, options)
          };
        };

        _class.prototype["try"] = function _try() {
          for (var _len = arguments.length, schemas = Array(_len), _key = 0; _key < _len; _key++) {
            schemas[_key] = arguments[_key];
          }

          schemas = Hoek.flatten(schemas);
          Hoek.assert(schemas.length, 'Cannot add other alternatives without at least one schema');
          var obj = this.clone();

          for (var i = 0; i < schemas.length; ++i) {
            var cast = Cast.schema(this._currentJoi, schemas[i]);

            if (cast._refs.length) {
              obj._refs = obj._refs.concat(cast._refs);
            }

            obj._inner.matches.push({
              schema: cast
            });
          }

          return obj;
        };

        _class.prototype.when = function when(condition, options) {
          var schemaCondition = false;
          Hoek.assert(Ref.isRef(condition) || typeof condition === 'string' || (schemaCondition = condition instanceof Any), 'Invalid condition:', condition);
          Hoek.assert(options, 'Missing options');
          Hoek.assert((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object', 'Invalid options');

          if (schemaCondition) {
            Hoek.assert(!options.hasOwnProperty('is'), '"is" can not be used with a schema condition');
          } else {
            Hoek.assert(options.hasOwnProperty('is'), 'Missing "is" directive');
          }

          Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of "then" or "otherwise"');
          var obj = this.clone();
          var is = void 0;

          if (!schemaCondition) {
            is = Cast.schema(this._currentJoi, options.is);

            if (options.is === null || !(Ref.isRef(options.is) || options.is instanceof Any)) {
              // Only apply required if this wasn't already a schema or a ref, we'll suppose people know what they're doing
              is = is.required();
            }
          }

          var item = {
            ref: schemaCondition ? null : Cast.ref(condition),
            peek: schemaCondition ? condition : null,
            is: is,
            then: options.then !== undefined ? Cast.schema(this._currentJoi, options.then) : undefined,
            otherwise: options.otherwise !== undefined ? Cast.schema(this._currentJoi, options.otherwise) : undefined
          };

          if (obj._baseType) {
            item.then = item.then && obj._baseType.concat(item.then);
            item.otherwise = item.otherwise && obj._baseType.concat(item.otherwise);
          }

          if (!schemaCondition) {
            Ref.push(obj._refs, item.ref);
            obj._refs = obj._refs.concat(item.is._refs);
          }

          if (item.then && item.then._refs) {
            obj._refs = obj._refs.concat(item.then._refs);
          }

          if (item.otherwise && item.otherwise._refs) {
            obj._refs = obj._refs.concat(item.otherwise._refs);
          }

          obj._inner.matches.push(item);

          return obj;
        };

        _class.prototype.describe = function describe() {
          var description = Any.prototype.describe.call(this);
          var alternatives = [];

          for (var i = 0; i < this._inner.matches.length; ++i) {
            var item = this._inner.matches[i];

            if (item.schema) {
              // try()
              alternatives.push(item.schema.describe());
            } else {
              // when()
              var when = item.is ? {
                ref: item.ref.toString(),
                is: item.is.describe()
              } : {
                peek: item.peek.describe()
              };

              if (item.then) {
                when.then = item.then.describe();
              }

              if (item.otherwise) {
                when.otherwise = item.otherwise.describe();
              }

              alternatives.push(when);
            }
          }

          description.alternatives = alternatives;
          return description;
        };

        return _class;
      }(Any);

      module.exports = new internals.Alternatives();
      /***/
    },
    /* 11 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {};

      exports.concat = function (target, source) {
        if (!source) {
          return target;
        }

        var obj = _extends({}, target);

        var sKeys = Object.keys(source);

        for (var i = 0; i < sKeys.length; ++i) {
          var key = sKeys[i];

          if (key !== 'language' || !obj.hasOwnProperty(key)) {
            obj[key] = source[key];
          } else {
            obj[key] = Hoek.applyToDefaults(obj[key], source[key]);
          }
        }

        return obj;
      };
      /***/

    },
    /* 12 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (_typeof2(call) === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + _typeof2(superClass));
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Any = __webpack_require__(2);

      var Ref = __webpack_require__(1);

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {};
      internals.isoDate = /^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/;
      internals.invalidDate = new Date('');

      internals.isIsoDate = function () {
        var isoString = internals.isoDate.toString();
        return function (date) {
          return date && date.toString() === isoString;
        };
      }();

      internals.Date = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'date';
          return _this;
        }

        _class.prototype._base = function _base(value, state, options) {
          var result = {
            value: options.convert && internals.Date.toDate(value, this._flags.format, this._flags.timestamp, this._flags.multiplier) || value
          };

          if (result.value instanceof Date && !isNaN(result.value.getTime())) {
            result.errors = null;
          } else if (!options.convert) {
            result.errors = this.createError('date.strict', null, state, options);
          } else {
            var type = void 0;

            if (internals.isIsoDate(this._flags.format)) {
              type = 'isoDate';
            } else if (this._flags.timestamp) {
              type = 'timestamp.' + this._flags.timestamp;
            } else {
              type = 'base';
            }

            result.errors = this.createError('date.' + type, null, state, options);
          }

          return result;
        };

        _class.toDate = function toDate(value, format, timestamp, multiplier) {
          if (value instanceof Date) {
            return value;
          }

          if (typeof value === 'string' || typeof value === 'number' && !isNaN(value) && isFinite(value)) {
            if (typeof value === 'string' && /^[+-]?\d+(\.\d+)?$/.test(value)) {
              value = parseFloat(value);
            }

            var date = void 0;

            if (format && internals.isIsoDate(format)) {
              date = format.test(value) ? new Date(value) : internals.invalidDate;
            } else if (timestamp && multiplier) {
              date = /^\s*$/.test(value) ? internals.invalidDate : new Date(value * multiplier);
            } else {
              date = new Date(value);
            }

            if (!isNaN(date.getTime())) {
              return date;
            }
          }

          return null;
        };

        _class.prototype.iso = function iso() {
          if (this._flags.format === internals.isoDate) {
            return this;
          }

          var obj = this.clone();
          obj._flags.format = internals.isoDate;
          return obj;
        };

        _class.prototype.timestamp = function timestamp() {
          var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'javascript';
          var allowed = ['javascript', 'unix'];
          Hoek.assert(allowed.includes(type), '"type" must be one of "' + allowed.join('", "') + '"');

          if (this._flags.timestamp === type) {
            return this;
          }

          var obj = this.clone();
          obj._flags.timestamp = type;
          obj._flags.multiplier = type === 'unix' ? 1000 : 1;
          return obj;
        };

        _class.prototype._isIsoDate = function _isIsoDate(value) {
          return internals.isoDate.test(value);
        };

        return _class;
      }(Any);

      internals.compare = function (type, compare) {
        return function (date) {
          var isNow = date === 'now';
          var isRef = Ref.isRef(date);

          if (!isNow && !isRef) {
            date = internals.Date.toDate(date);
          }

          Hoek.assert(date, 'Invalid date format');
          return this._test(type, date, function (value, state, options) {
            var compareTo = void 0;

            if (isNow) {
              compareTo = Date.now();
            } else if (isRef) {
              compareTo = internals.Date.toDate(date(state.reference || state.parent, options));

              if (!compareTo) {
                return this.createError('date.ref', {
                  ref: date.key
                }, state, options);
              }

              compareTo = compareTo.getTime();
            } else {
              compareTo = date.getTime();
            }

            if (compare(value.getTime(), compareTo)) {
              return value;
            }

            return this.createError('date.' + type, {
              limit: new Date(compareTo)
            }, state, options);
          });
        };
      };

      internals.Date.prototype.min = internals.compare('min', function (value, date) {
        return value >= date;
      });
      internals.Date.prototype.max = internals.compare('max', function (value, date) {
        return value <= date;
      });
      internals.Date.prototype.greater = internals.compare('greater', function (value, date) {
        return value > date;
      });
      internals.Date.prototype.less = internals.compare('less', function (value, date) {
        return value < date;
      });
      module.exports = new internals.Date();
      /***/
    },
    /* 13 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
      };

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (_typeof2(call) === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + _typeof2(superClass));
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Hoek = __webpack_require__(0);

      var Topo = __webpack_require__(31);

      var Any = __webpack_require__(2);

      var Errors = __webpack_require__(6);

      var Cast = __webpack_require__(4); // Declare internals


      var internals = {};

      internals.Object = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'object';
          _this._inner.children = null;
          _this._inner.renames = [];
          _this._inner.dependencies = [];
          _this._inner.patterns = [];
          return _this;
        }

        _class.prototype._init = function _init() {
          return arguments.length ? this.keys.apply(this, arguments) : this;
        };

        _class.prototype._base = function _base(value, state, options) {
          var target = value;
          var errors = [];

          var finish = function finish() {
            return {
              value: target,
              errors: errors.length ? errors : null
            };
          };

          if (typeof value === 'string' && options.convert) {
            value = internals.safeParse(value);
          }

          var type = this._flags.func ? 'function' : 'object';

          if (!value || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== type || Array.isArray(value)) {
            errors.push(this.createError(type + '.base', null, state, options));
            return finish();
          } // Skip if there are no other rules to test


          if (!this._inner.renames.length && !this._inner.dependencies.length && !this._inner.children && // null allows any keys
          !this._inner.patterns.length) {
            target = value;
            return finish();
          } // Ensure target is a local copy (parsed) or shallow copy


          if (target === value) {
            if (type === 'object') {
              target = Object.create(Object.getPrototypeOf(value));
            } else {
              target = function target() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                return value.apply(this, args);
              };

              target.prototype = Hoek.clone(value.prototype);
            }

            var valueKeys = Object.keys(value);

            for (var i = 0; i < valueKeys.length; ++i) {
              target[valueKeys[i]] = value[valueKeys[i]];
            }
          } else {
            target = value;
          } // Rename keys


          var renamed = {};

          for (var _i = 0; _i < this._inner.renames.length; ++_i) {
            var rename = this._inner.renames[_i];

            if (rename.isRegExp) {
              var targetKeys = Object.keys(target);
              var matchedTargetKeys = [];

              for (var j = 0; j < targetKeys.length; ++j) {
                if (rename.from.test(targetKeys[j])) {
                  matchedTargetKeys.push(targetKeys[j]);
                }
              }

              var allUndefined = matchedTargetKeys.every(function (key) {
                return target[key] === undefined;
              });

              if (rename.options.ignoreUndefined && allUndefined) {
                continue;
              }

              if (!rename.options.multiple && renamed[rename.to]) {
                errors.push(this.createError('object.rename.regex.multiple', {
                  from: matchedTargetKeys,
                  to: rename.to
                }, state, options));

                if (options.abortEarly) {
                  return finish();
                }
              }

              if (Object.prototype.hasOwnProperty.call(target, rename.to) && !rename.options.override && !renamed[rename.to]) {
                errors.push(this.createError('object.rename.regex.override', {
                  from: matchedTargetKeys,
                  to: rename.to
                }, state, options));

                if (options.abortEarly) {
                  return finish();
                }
              }

              if (allUndefined) {
                delete target[rename.to];
              } else {
                target[rename.to] = target[matchedTargetKeys[matchedTargetKeys.length - 1]];
              }

              renamed[rename.to] = true;

              if (!rename.options.alias) {
                for (var _j = 0; _j < matchedTargetKeys.length; ++_j) {
                  delete target[matchedTargetKeys[_j]];
                }
              }
            } else {
              if (rename.options.ignoreUndefined && target[rename.from] === undefined) {
                continue;
              }

              if (!rename.options.multiple && renamed[rename.to]) {
                errors.push(this.createError('object.rename.multiple', {
                  from: rename.from,
                  to: rename.to
                }, state, options));

                if (options.abortEarly) {
                  return finish();
                }
              }

              if (Object.prototype.hasOwnProperty.call(target, rename.to) && !rename.options.override && !renamed[rename.to]) {
                errors.push(this.createError('object.rename.override', {
                  from: rename.from,
                  to: rename.to
                }, state, options));

                if (options.abortEarly) {
                  return finish();
                }
              }

              if (target[rename.from] === undefined) {
                delete target[rename.to];
              } else {
                target[rename.to] = target[rename.from];
              }

              renamed[rename.to] = true;

              if (!rename.options.alias) {
                delete target[rename.from];
              }
            }
          } // Validate schema


          if (!this._inner.children && // null allows any keys
          !this._inner.patterns.length && !this._inner.dependencies.length) {
            return finish();
          }

          var unprocessed = new Set(Object.keys(target));

          if (this._inner.children) {
            var stripProps = [];

            for (var _i2 = 0; _i2 < this._inner.children.length; ++_i2) {
              var child = this._inner.children[_i2];
              var key = child.key;
              var item = target[key];
              unprocessed["delete"](key);
              var localState = {
                key: key,
                path: state.path.concat(key),
                parent: target,
                reference: state.reference
              };

              var result = child.schema._validate(item, localState, options);

              if (result.errors) {
                errors.push(this.createError('object.child', {
                  key: key,
                  child: child.schema._getLabel(key),
                  reason: result.errors
                }, localState, options));

                if (options.abortEarly) {
                  return finish();
                }
              } else {
                if (child.schema._flags.strip || result.value === undefined && result.value !== item) {
                  stripProps.push(key);
                  target[key] = result.finalValue;
                } else if (result.value !== undefined) {
                  target[key] = result.value;
                }
              }
            }

            for (var _i3 = 0; _i3 < stripProps.length; ++_i3) {
              delete target[stripProps[_i3]];
            }
          } // Unknown keys


          if (unprocessed.size && this._inner.patterns.length) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = unprocessed[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _key2 = _step.value;
                var _localState = {
                  key: _key2,
                  path: state.path.concat(_key2),
                  parent: target,
                  reference: state.reference
                };
                var _item = target[_key2];

                for (var _i4 = 0; _i4 < this._inner.patterns.length; ++_i4) {
                  var pattern = this._inner.patterns[_i4];

                  if (pattern.regex ? pattern.regex.test(_key2) : !pattern.schema.validate(_key2).error) {
                    unprocessed["delete"](_key2);

                    var _result = pattern.rule._validate(_item, _localState, options);

                    if (_result.errors) {
                      errors.push(this.createError('object.child', {
                        key: _key2,
                        child: pattern.rule._getLabel(_key2),
                        reason: _result.errors
                      }, _localState, options));

                      if (options.abortEarly) {
                        return finish();
                      }
                    }

                    target[_key2] = _result.value;
                  }
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"]) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }

          if (unprocessed.size && (this._inner.children || this._inner.patterns.length)) {
            if (options.stripUnknown && this._flags.allowUnknown !== true || options.skipFunctions) {
              var stripUnknown = options.stripUnknown ? options.stripUnknown === true ? true : !!options.stripUnknown.objects : false;
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = unprocessed[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var _key3 = _step2.value;

                  if (stripUnknown) {
                    delete target[_key3];
                    unprocessed["delete"](_key3);
                  } else if (typeof target[_key3] === 'function') {
                    unprocessed["delete"](_key3);
                  }
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                    _iterator2["return"]();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            }

            if (this._flags.allowUnknown !== undefined ? !this._flags.allowUnknown : !options.allowUnknown) {
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (var _iterator3 = unprocessed[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var unprocessedKey = _step3.value;
                  errors.push(this.createError('object.allowUnknown', {
                    child: unprocessedKey
                  }, {
                    key: unprocessedKey,
                    path: state.path.concat(unprocessedKey)
                  }, options, {}));
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
                    _iterator3["return"]();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
            }
          } // Validate dependencies


          for (var _i5 = 0; _i5 < this._inner.dependencies.length; ++_i5) {
            var dep = this._inner.dependencies[_i5];
            var err = internals[dep.type].call(this, dep.key !== null && target[dep.key], dep.peers, target, {
              key: dep.key,
              path: dep.key === null ? state.path : state.path.concat(dep.key)
            }, options);

            if (err instanceof Errors.Err) {
              errors.push(err);

              if (options.abortEarly) {
                return finish();
              }
            }
          }

          return finish();
        };

        _class.prototype.keys = function keys(schema) {
          Hoek.assert(schema === null || schema === undefined || (typeof schema === 'undefined' ? 'undefined' : _typeof(schema)) === 'object', 'Object schema must be a valid object');
          Hoek.assert(!schema || !(schema instanceof Any), 'Object schema cannot be a joi schema');
          var obj = this.clone();

          if (!schema) {
            obj._inner.children = null;
            return obj;
          }

          var children = Object.keys(schema);

          if (!children.length) {
            obj._inner.children = [];
            return obj;
          }

          var topo = new Topo();

          if (obj._inner.children) {
            for (var i = 0; i < obj._inner.children.length; ++i) {
              var child = obj._inner.children[i]; // Only add the key if we are not going to replace it later

              if (!children.includes(child.key)) {
                topo.add(child, {
                  after: child._refs,
                  group: child.key
                });
              }
            }
          }

          for (var _i6 = 0; _i6 < children.length; ++_i6) {
            var key = children[_i6];
            var _child = schema[key];

            try {
              var cast = Cast.schema(this._currentJoi, _child);
              topo.add({
                key: key,
                schema: cast
              }, {
                after: cast._refs,
                group: key
              });
            } catch (castErr) {
              if (castErr.hasOwnProperty('path')) {
                castErr.path = key + '.' + castErr.path;
              } else {
                castErr.path = key;
              }

              throw castErr;
            }
          }

          obj._inner.children = topo.nodes;
          return obj;
        };

        _class.prototype.append = function append(schema) {
          // Skip any changes
          if (schema === null || schema === undefined || Object.keys(schema).length === 0) {
            return this;
          }

          return this.keys(schema);
        };

        _class.prototype.unknown = function unknown(allow) {
          var value = allow !== false;

          if (this._flags.allowUnknown === value) {
            return this;
          }

          var obj = this.clone();
          obj._flags.allowUnknown = value;
          return obj;
        };

        _class.prototype.length = function length(limit) {
          Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');
          return this._test('length', limit, function (value, state, options) {
            if (Object.keys(value).length === limit) {
              return value;
            }

            return this.createError('object.length', {
              limit: limit
            }, state, options);
          });
        };

        _class.prototype.min = function min(limit) {
          Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');
          return this._test('min', limit, function (value, state, options) {
            if (Object.keys(value).length >= limit) {
              return value;
            }

            return this.createError('object.min', {
              limit: limit
            }, state, options);
          });
        };

        _class.prototype.max = function max(limit) {
          Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');
          return this._test('max', limit, function (value, state, options) {
            if (Object.keys(value).length <= limit) {
              return value;
            }

            return this.createError('object.max', {
              limit: limit
            }, state, options);
          });
        };

        _class.prototype.pattern = function pattern(_pattern, schema) {
          var isRegExp = _pattern instanceof RegExp;
          Hoek.assert(isRegExp || _pattern instanceof Any, 'pattern must be a regex or schema');
          Hoek.assert(schema !== undefined, 'Invalid rule');

          if (isRegExp) {
            _pattern = new RegExp(_pattern.source, _pattern.ignoreCase ? 'i' : undefined); // Future version should break this and forbid unsupported regex flags
          }

          try {
            schema = Cast.schema(this._currentJoi, schema);
          } catch (castErr) {
            if (castErr.hasOwnProperty('path')) {
              castErr.message = castErr.message + '(' + castErr.path + ')';
            }

            throw castErr;
          }

          var obj = this.clone();

          if (isRegExp) {
            obj._inner.patterns.push({
              regex: _pattern,
              rule: schema
            });
          } else {
            obj._inner.patterns.push({
              schema: _pattern,
              rule: schema
            });
          }

          return obj;
        };

        _class.prototype.schema = function schema() {
          return this._test('schema', null, function (value, state, options) {
            if (value instanceof Any) {
              return value;
            }

            return this.createError('object.schema', null, state, options);
          });
        };

        _class.prototype["with"] = function _with(key, peers) {
          Hoek.assert(arguments.length === 2, 'Invalid number of arguments, expected 2.');
          return this._dependency('with', key, peers);
        };

        _class.prototype.without = function without(key, peers) {
          Hoek.assert(arguments.length === 2, 'Invalid number of arguments, expected 2.');
          return this._dependency('without', key, peers);
        };

        _class.prototype.xor = function xor() {
          for (var _len2 = arguments.length, peers = Array(_len2), _key4 = 0; _key4 < _len2; _key4++) {
            peers[_key4] = arguments[_key4];
          }

          peers = Hoek.flatten(peers);
          return this._dependency('xor', null, peers);
        };

        _class.prototype.or = function or() {
          for (var _len3 = arguments.length, peers = Array(_len3), _key5 = 0; _key5 < _len3; _key5++) {
            peers[_key5] = arguments[_key5];
          }

          peers = Hoek.flatten(peers);
          return this._dependency('or', null, peers);
        };

        _class.prototype.and = function and() {
          for (var _len4 = arguments.length, peers = Array(_len4), _key6 = 0; _key6 < _len4; _key6++) {
            peers[_key6] = arguments[_key6];
          }

          peers = Hoek.flatten(peers);
          return this._dependency('and', null, peers);
        };

        _class.prototype.nand = function nand() {
          for (var _len5 = arguments.length, peers = Array(_len5), _key7 = 0; _key7 < _len5; _key7++) {
            peers[_key7] = arguments[_key7];
          }

          peers = Hoek.flatten(peers);
          return this._dependency('nand', null, peers);
        };

        _class.prototype.requiredKeys = function requiredKeys() {
          for (var _len6 = arguments.length, children = Array(_len6), _key8 = 0; _key8 < _len6; _key8++) {
            children[_key8] = arguments[_key8];
          }

          children = Hoek.flatten(children);
          return this.applyFunctionToChildren(children, 'required');
        };

        _class.prototype.optionalKeys = function optionalKeys() {
          for (var _len7 = arguments.length, children = Array(_len7), _key9 = 0; _key9 < _len7; _key9++) {
            children[_key9] = arguments[_key9];
          }

          children = Hoek.flatten(children);
          return this.applyFunctionToChildren(children, 'optional');
        };

        _class.prototype.forbiddenKeys = function forbiddenKeys() {
          for (var _len8 = arguments.length, children = Array(_len8), _key10 = 0; _key10 < _len8; _key10++) {
            children[_key10] = arguments[_key10];
          }

          children = Hoek.flatten(children);
          return this.applyFunctionToChildren(children, 'forbidden');
        };

        _class.prototype.rename = function rename(from, to, options) {
          Hoek.assert(typeof from === 'string' || from instanceof RegExp, 'Rename missing the from argument');
          Hoek.assert(typeof to === 'string', 'Rename missing the to argument');
          Hoek.assert(to !== from, 'Cannot rename key to same name:', from);

          for (var i = 0; i < this._inner.renames.length; ++i) {
            Hoek.assert(this._inner.renames[i].from !== from, 'Cannot rename the same key multiple times');
          }

          var obj = this.clone();

          obj._inner.renames.push({
            from: from,
            to: to,
            options: Hoek.applyToDefaults(internals.renameDefaults, options || {}),
            isRegExp: from instanceof RegExp
          });

          return obj;
        };

        _class.prototype.applyFunctionToChildren = function applyFunctionToChildren(children, fn, args, root) {
          children = [].concat(children);
          Hoek.assert(children.length > 0, 'expected at least one children');
          var groupedChildren = internals.groupChildren(children);
          var obj = void 0;

          if ('' in groupedChildren) {
            obj = this[fn].apply(this, args);
            delete groupedChildren[''];
          } else {
            obj = this.clone();
          }

          if (obj._inner.children) {
            root = root ? root + '.' : '';

            for (var i = 0; i < obj._inner.children.length; ++i) {
              var child = obj._inner.children[i];
              var group = groupedChildren[child.key];

              if (group) {
                obj._inner.children[i] = {
                  key: child.key,
                  _refs: child._refs,
                  schema: child.schema.applyFunctionToChildren(group, fn, args, root + child.key)
                };
                delete groupedChildren[child.key];
              }
            }
          }

          var remaining = Object.keys(groupedChildren);
          Hoek.assert(remaining.length === 0, 'unknown key(s)', remaining.join(', '));
          return obj;
        };

        _class.prototype._dependency = function _dependency(type, key, peers) {
          peers = [].concat(peers);

          for (var i = 0; i < peers.length; ++i) {
            Hoek.assert(typeof peers[i] === 'string', type, 'peers must be a string or array of strings');
          }

          var obj = this.clone();

          obj._inner.dependencies.push({
            type: type,
            key: key,
            peers: peers
          });

          return obj;
        };

        _class.prototype.describe = function describe(shallow) {
          var description = Any.prototype.describe.call(this);

          if (description.rules) {
            for (var i = 0; i < description.rules.length; ++i) {
              var rule = description.rules[i]; // Coverage off for future-proof descriptions, only object().assert() is use right now

              if (
              /* $lab:coverage:off$ */
              rule.arg && _typeof(rule.arg) === 'object' && rule.arg.schema && rule.arg.ref
              /* $lab:coverage:on$ */
              ) {
                  rule.arg = {
                    schema: rule.arg.schema.describe(),
                    ref: rule.arg.ref.toString()
                  };
                }
            }
          }

          if (this._inner.children && !shallow) {
            description.children = {};

            for (var _i7 = 0; _i7 < this._inner.children.length; ++_i7) {
              var child = this._inner.children[_i7];
              description.children[child.key] = child.schema.describe();
            }
          }

          if (this._inner.dependencies.length) {
            description.dependencies = Hoek.clone(this._inner.dependencies);
          }

          if (this._inner.patterns.length) {
            description.patterns = [];

            for (var _i8 = 0; _i8 < this._inner.patterns.length; ++_i8) {
              var pattern = this._inner.patterns[_i8];

              if (pattern.regex) {
                description.patterns.push({
                  regex: pattern.regex.toString(),
                  rule: pattern.rule.describe()
                });
              } else {
                description.patterns.push({
                  schema: pattern.schema.describe(),
                  rule: pattern.rule.describe()
                });
              }
            }
          }

          if (this._inner.renames.length > 0) {
            description.renames = Hoek.clone(this._inner.renames);
          }

          return description;
        };

        _class.prototype.assert = function assert(ref, schema, message) {
          ref = Cast.ref(ref);
          Hoek.assert(ref.isContext || ref.depth > 1, 'Cannot use assertions for root level references - use direct key rules instead');
          message = message || 'pass the assertion test';

          try {
            schema = Cast.schema(this._currentJoi, schema);
          } catch (castErr) {
            if (castErr.hasOwnProperty('path')) {
              castErr.message = castErr.message + '(' + castErr.path + ')';
            }

            throw castErr;
          }

          var key = ref.path[ref.path.length - 1];
          var path = ref.path.join('.');
          return this._test('assert', {
            schema: schema,
            ref: ref
          }, function (value, state, options) {
            var result = schema._validate(ref(value), null, options, value);

            if (!result.errors) {
              return value;
            }

            var localState = Hoek.merge({}, state);
            localState.key = key;
            localState.path = ref.path;
            return this.createError('object.assert', {
              ref: path,
              message: message
            }, localState, options);
          });
        };

        _class.prototype.type = function type(constructor) {
          var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constructor.name;
          Hoek.assert(typeof constructor === 'function', 'type must be a constructor function');
          var typeData = {
            name: name,
            ctor: constructor
          };
          return this._test('type', typeData, function (value, state, options) {
            if (value instanceof constructor) {
              return value;
            }

            return this.createError('object.type', {
              type: typeData.name
            }, state, options);
          });
        };

        return _class;
      }(Any);

      internals.safeParse = function (value) {
        try {
          return JSON.parse(value);
        } catch (parseErr) {}

        return value;
      };

      internals.renameDefaults = {
        alias: false,
        // Keep old value in place
        multiple: false,
        // Allow renaming multiple keys into the same target
        override: false // Overrides an existing key

      };

      internals.groupChildren = function (children) {
        children.sort();
        var grouped = {};

        for (var i = 0; i < children.length; ++i) {
          var child = children[i];
          Hoek.assert(typeof child === 'string', 'children must be strings');
          var group = child.split('.')[0];
          var childGroup = grouped[group] = grouped[group] || [];
          childGroup.push(child.substring(group.length + 1));
        }

        return grouped;
      };

      internals.keysToLabels = function (schema, keys) {
        var children = schema._inner.children;

        if (!children) {
          return keys;
        }

        var findLabel = function findLabel(key) {
          var matchingChild = children.find(function (child) {
            return child.key === key;
          });
          return matchingChild ? matchingChild.schema._getLabel(key) : key;
        };

        if (Array.isArray(keys)) {
          return keys.map(findLabel);
        }

        return findLabel(keys);
      };

      internals["with"] = function (value, peers, parent, state, options) {
        if (value === undefined) {
          return value;
        }

        for (var i = 0; i < peers.length; ++i) {
          var peer = peers[i];

          if (!Object.prototype.hasOwnProperty.call(parent, peer) || parent[peer] === undefined) {
            return this.createError('object.with', {
              main: state.key,
              mainWithLabel: internals.keysToLabels(this, state.key),
              peer: peer,
              peerWithLabel: internals.keysToLabels(this, peer)
            }, state, options);
          }
        }

        return value;
      };

      internals.without = function (value, peers, parent, state, options) {
        if (value === undefined) {
          return value;
        }

        for (var i = 0; i < peers.length; ++i) {
          var peer = peers[i];

          if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {
            return this.createError('object.without', {
              main: state.key,
              mainWithLabel: internals.keysToLabels(this, state.key),
              peer: peer,
              peerWithLabel: internals.keysToLabels(this, peer)
            }, state, options);
          }
        }

        return value;
      };

      internals.xor = function (value, peers, parent, state, options) {
        var present = [];

        for (var i = 0; i < peers.length; ++i) {
          var peer = peers[i];

          if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {
            present.push(peer);
          }
        }

        if (present.length === 1) {
          return value;
        }

        var context = {
          peers: peers,
          peersWithLabels: internals.keysToLabels(this, peers)
        };

        if (present.length === 0) {
          return this.createError('object.missing', context, state, options);
        }

        return this.createError('object.xor', context, state, options);
      };

      internals.or = function (value, peers, parent, state, options) {
        for (var i = 0; i < peers.length; ++i) {
          var peer = peers[i];

          if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {
            return value;
          }
        }

        return this.createError('object.missing', {
          peers: peers,
          peersWithLabels: internals.keysToLabels(this, peers)
        }, state, options);
      };

      internals.and = function (value, peers, parent, state, options) {
        var missing = [];
        var present = [];
        var count = peers.length;

        for (var i = 0; i < count; ++i) {
          var peer = peers[i];

          if (!Object.prototype.hasOwnProperty.call(parent, peer) || parent[peer] === undefined) {
            missing.push(peer);
          } else {
            present.push(peer);
          }
        }

        var aon = missing.length === count || present.length === count;

        if (!aon) {
          return this.createError('object.and', {
            present: present,
            presentWithLabels: internals.keysToLabels(this, present),
            missing: missing,
            missingWithLabels: internals.keysToLabels(this, missing)
          }, state, options);
        }
      };

      internals.nand = function (value, peers, parent, state, options) {
        var present = [];

        for (var i = 0; i < peers.length; ++i) {
          var peer = peers[i];

          if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {
            present.push(peer);
          }
        }

        var values = Hoek.clone(peers);
        var main = values.splice(0, 1)[0];
        var allPresent = present.length === peers.length;
        return allPresent ? this.createError('object.nand', {
          main: main,
          mainWithLabel: internals.keysToLabels(this, main),
          peers: values,
          peersWithLabels: internals.keysToLabels(this, values)
        }, state, options) : null;
      };

      module.exports = new internals.Object();
      /***/
    },
    /* 14 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules
      // Delcare internals

      var internals = {
        rfc3986: {}
      };

      internals.generate = function () {
        /**
         * elements separated by forward slash ("/") are alternatives.
         */
        var or = '|';
        /**
         * Rule to support zero-padded addresses.
         */

        var zeroPad = '0?';
        /**
         * DIGIT = %x30-39 ; 0-9
         */

        var digit = '0-9';
        var digitOnly = '[' + digit + ']';
        /**
         * ALPHA = %x41-5A / %x61-7A   ; A-Z / a-z
         */

        var alpha = 'a-zA-Z';
        var alphaOnly = '[' + alpha + ']';
        /**
         * IPv4
         * cidr       = DIGIT                ; 0-9
         *            / %x31-32 DIGIT         ; 10-29
         *            / "3" %x30-32           ; 30-32
         */

        internals.rfc3986.ipv4Cidr = digitOnly + or + '[1-2]' + digitOnly + or + '3' + '[0-2]';
        /**
         * IPv6
         * cidr       = DIGIT                 ; 0-9
         *            / %x31-39 DIGIT         ; 10-99
         *            / "1" %x0-1 DIGIT       ; 100-119
         *            / "12" %x0-8            ; 120-128
         */

        internals.rfc3986.ipv6Cidr = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + '[01]' + digitOnly + or + '12[0-8])';
        /**
         * HEXDIG = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
         */

        var hexDigit = digit + 'A-Fa-f';
        var hexDigitOnly = '[' + hexDigit + ']';
        /**
         * unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
         */

        var unreserved = alpha + digit + '-\\._~';
        /**
         * sub-delims = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
         */

        var subDelims = '!\\$&\'\\(\\)\\*\\+,;=';
        /**
         * pct-encoded = "%" HEXDIG HEXDIG
         */

        var pctEncoded = '%' + hexDigit;
        /**
         * pchar = unreserved / pct-encoded / sub-delims / ":" / "@"
         */

        var pchar = unreserved + pctEncoded + subDelims + ':@';
        var pcharOnly = '[' + pchar + ']';
        /**
         * dec-octet   = DIGIT                 ; 0-9
         *            / %x31-39 DIGIT         ; 10-99
         *            / "1" 2DIGIT            ; 100-199
         *            / "2" %x30-34 DIGIT     ; 200-249
         *            / "25" %x30-35          ; 250-255
         */

        var decOctect = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + digitOnly + digitOnly + or + '2' + '[0-4]' + digitOnly + or + '25' + '[0-5])';
        /**
         * IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
         */

        internals.rfc3986.IPv4address = '(?:' + decOctect + '\\.){3}' + decOctect;
        /**
         * h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal
         * ls32 = ( h16 ":" h16 ) / IPv4address ; least-significant 32 bits of address
         * IPv6address =                            6( h16 ":" ) ls32
         *             /                       "::" 5( h16 ":" ) ls32
         *             / [               h16 ] "::" 4( h16 ":" ) ls32
         *             / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
         *             / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
         *             / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
         *             / [ *4( h16 ":" ) h16 ] "::"              ls32
         *             / [ *5( h16 ":" ) h16 ] "::"              h16
         *             / [ *6( h16 ":" ) h16 ] "::"
         */

        var h16 = hexDigitOnly + '{1,4}';
        var ls32 = '(?:' + h16 + ':' + h16 + '|' + internals.rfc3986.IPv4address + ')';
        var IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;
        var IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;
        var IPv6FourHex = '(?:' + h16 + ')?::(?:' + h16 + ':){4}' + ls32;
        var IPv6ThreeHex = '(?:(?:' + h16 + ':){0,1}' + h16 + ')?::(?:' + h16 + ':){3}' + ls32;
        var IPv6TwoHex = '(?:(?:' + h16 + ':){0,2}' + h16 + ')?::(?:' + h16 + ':){2}' + ls32;
        var IPv6OneHex = '(?:(?:' + h16 + ':){0,3}' + h16 + ')?::' + h16 + ':' + ls32;
        var IPv6NoneHex = '(?:(?:' + h16 + ':){0,4}' + h16 + ')?::' + ls32;
        var IPv6NoneHex2 = '(?:(?:' + h16 + ':){0,5}' + h16 + ')?::' + h16;
        var IPv6NoneHex3 = '(?:(?:' + h16 + ':){0,6}' + h16 + ')?::';
        internals.rfc3986.IPv6address = '(?:' + IPv6SixHex + or + IPv6FiveHex + or + IPv6FourHex + or + IPv6ThreeHex + or + IPv6TwoHex + or + IPv6OneHex + or + IPv6NoneHex + or + IPv6NoneHex2 + or + IPv6NoneHex3 + ')';
        /**
         * IPvFuture = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
         */

        internals.rfc3986.IPvFuture = 'v' + hexDigitOnly + '+\\.[' + unreserved + subDelims + ':]+';
        /**
         * scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
         */

        internals.rfc3986.scheme = alphaOnly + '[' + alpha + digit + '+-\\.]*';
        /**
         * userinfo = *( unreserved / pct-encoded / sub-delims / ":" )
         */

        var userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*';
        /**
         * IP-literal = "[" ( IPv6address / IPvFuture  ) "]"
         */

        var IPLiteral = '\\[(?:' + internals.rfc3986.IPv6address + or + internals.rfc3986.IPvFuture + ')\\]';
        /**
         * reg-name = *( unreserved / pct-encoded / sub-delims )
         */

        var regName = '[' + unreserved + pctEncoded + subDelims + ']{0,255}';
        /**
         * host = IP-literal / IPv4address / reg-name
         */

        var host = '(?:' + IPLiteral + or + internals.rfc3986.IPv4address + or + regName + ')';
        /**
         * port = *DIGIT
         */

        var port = digitOnly + '*';
        /**
         * authority   = [ userinfo "@" ] host [ ":" port ]
         */

        var authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?';
        /**
         * segment       = *pchar
         * segment-nz    = 1*pchar
         * path          = path-abempty    ; begins with "/" or is empty
         *               / path-absolute   ; begins with "/" but not "//"
         *               / path-noscheme   ; begins with a non-colon segment
         *               / path-rootless   ; begins with a segment
         *               / path-empty      ; zero characters
         * path-abempty  = *( "/" segment )
         * path-absolute = "/" [ segment-nz *( "/" segment ) ]
         * path-rootless = segment-nz *( "/" segment )
         */

        var segment = pcharOnly + '*';
        var segmentNz = pcharOnly + '+';
        var segmentNzNc = '[' + unreserved + pctEncoded + subDelims + '@' + ']+';
        var pathEmpty = '';
        var pathAbEmpty = '(?:\\/' + segment + ')*';
        var pathAbsolute = '\\/(?:' + segmentNz + pathAbEmpty + ')?';
        var pathRootless = segmentNz + pathAbEmpty;
        var pathNoScheme = segmentNzNc + pathAbEmpty;
        /**
         * hier-part = "//" authority path
         */

        internals.rfc3986.hierPart = '(?:' + '(?:\\/\\/' + authority + pathAbEmpty + ')' + or + pathAbsolute + or + pathRootless + ')';
        /**
         * relative-part = "//" authority path-abempty
         *                 / path-absolute
         *                 / path-noscheme
         *                 / path-empty
         */

        internals.rfc3986.relativeRef = '(?:' + '(?:\\/\\/' + authority + pathAbEmpty + ')' + or + pathAbsolute + or + pathNoScheme + or + pathEmpty + ')';
        /**
         * query = *( pchar / "/" / "?" )
         */

        internals.rfc3986.query = '[' + pchar + '\\/\\?]*(?=#|$)'; //Finish matching either at the fragment part or end of the line.

        /**
         * fragment = *( pchar / "/" / "?" )
         */

        internals.rfc3986.fragment = '[' + pchar + '\\/\\?]*';
      };

      internals.generate();
      module.exports = internals.rfc3986;
      /***/
    },
    /* 15 */

    /***/
    function (module, exports) {
      /***/
    },
    /* 16 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (global, process) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        var formatRegExp = /%[sdj%]/g;

        exports.format = function (f) {
          if (!isString(f)) {
            var objects = [];

            for (var i = 0; i < arguments.length; i++) {
              objects.push(inspect(arguments[i]));
            }

            return objects.join(' ');
          }

          var i = 1;
          var args = arguments;
          var len = args.length;
          var str = String(f).replace(formatRegExp, function (x) {
            if (x === '%%') return '%';
            if (i >= len) return x;

            switch (x) {
              case '%s':
                return String(args[i++]);

              case '%d':
                return Number(args[i++]);

              case '%j':
                try {
                  return JSON.stringify(args[i++]);
                } catch (_) {
                  return '[Circular]';
                }

              default:
                return x;
            }
          });

          for (var x = args[i]; i < len; x = args[++i]) {
            if (isNull(x) || !isObject(x)) {
              str += ' ' + x;
            } else {
              str += ' ' + inspect(x);
            }
          }

          return str;
        }; // Mark that a method should not be used.
        // Returns a modified function which warns once by default.
        // If --no-deprecation is set, then it is a no-op.


        exports.deprecate = function (fn, msg) {
          // Allow for deprecating things in the process of starting up.
          if (isUndefined(global.process)) {
            return function () {
              return exports.deprecate(fn, msg).apply(this, arguments);
            };
          }

          if (process.noDeprecation === true) {
            return fn;
          }

          var warned = false;

          function deprecated() {
            if (!warned) {
              if (process.throwDeprecation) {
                throw new Error(msg);
              } else if (process.traceDeprecation) {
                console.trace(msg);
              } else {
                console.error(msg);
              }

              warned = true;
            }

            return fn.apply(this, arguments);
          }

          return deprecated;
        };

        var debugs = {};
        var debugEnviron;

        exports.debuglog = function (set) {
          if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
          set = set.toUpperCase();

          if (!debugs[set]) {
            if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
              var pid = process.pid;

              debugs[set] = function () {
                var msg = exports.format.apply(exports, arguments);
                console.error('%s %d: %s', set, pid, msg);
              };
            } else {
              debugs[set] = function () {};
            }
          }

          return debugs[set];
        };
        /**
         * Echos the value of a value. Trys to print the value out
         * in the best way possible given the different types.
         *
         * @param {Object} obj The object to print out.
         * @param {Object} opts Optional options object that alters the output.
         */

        /* legacy: obj, showHidden, depth, colors*/


        function inspect(obj, opts) {
          // default options
          var ctx = {
            seen: [],
            stylize: stylizeNoColor
          }; // legacy...

          if (arguments.length >= 3) ctx.depth = arguments[2];
          if (arguments.length >= 4) ctx.colors = arguments[3];

          if (isBoolean(opts)) {
            // legacy...
            ctx.showHidden = opts;
          } else if (opts) {
            // got an "options" object
            exports._extend(ctx, opts);
          } // set default options


          if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
          if (isUndefined(ctx.depth)) ctx.depth = 2;
          if (isUndefined(ctx.colors)) ctx.colors = false;
          if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
          if (ctx.colors) ctx.stylize = stylizeWithColor;
          return formatValue(ctx, obj, ctx.depth);
        }

        exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

        inspect.colors = {
          'bold': [1, 22],
          'italic': [3, 23],
          'underline': [4, 24],
          'inverse': [7, 27],
          'white': [37, 39],
          'grey': [90, 39],
          'black': [30, 39],
          'blue': [34, 39],
          'cyan': [36, 39],
          'green': [32, 39],
          'magenta': [35, 39],
          'red': [31, 39],
          'yellow': [33, 39]
        }; // Don't use 'blue' not visible on cmd.exe

        inspect.styles = {
          'special': 'cyan',
          'number': 'yellow',
          'boolean': 'yellow',
          'undefined': 'grey',
          'null': 'bold',
          'string': 'green',
          'date': 'magenta',
          // "name": intentionally not styling
          'regexp': 'red'
        };

        function stylizeWithColor(str, styleType) {
          var style = inspect.styles[styleType];

          if (style) {
            return "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm';
          } else {
            return str;
          }
        }

        function stylizeNoColor(str, styleType) {
          return str;
        }

        function arrayToHash(array) {
          var hash = {};
          array.forEach(function (val, idx) {
            hash[val] = true;
          });
          return hash;
        }

        function formatValue(ctx, value, recurseTimes) {
          // Provide a hook for user-specified inspect functions.
          // Check that value is an object with an inspect function on it
          if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
          value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
            var ret = value.inspect(recurseTimes, ctx);

            if (!isString(ret)) {
              ret = formatValue(ctx, ret, recurseTimes);
            }

            return ret;
          } // Primitive types cannot have properties


          var primitive = formatPrimitive(ctx, value);

          if (primitive) {
            return primitive;
          } // Look up the keys of the object.


          var keys = Object.keys(value);
          var visibleKeys = arrayToHash(keys);

          if (ctx.showHidden) {
            keys = Object.getOwnPropertyNames(value);
          } // IE doesn't make error fields non-enumerable
          // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


          if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
            return formatError(value);
          } // Some type of object without properties can be shortcutted.


          if (keys.length === 0) {
            if (isFunction(value)) {
              var name = value.name ? ': ' + value.name : '';
              return ctx.stylize('[Function' + name + ']', 'special');
            }

            if (isRegExp(value)) {
              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            }

            if (isDate(value)) {
              return ctx.stylize(Date.prototype.toString.call(value), 'date');
            }

            if (isError(value)) {
              return formatError(value);
            }
          }

          var base = '',
              array = false,
              braces = ['{', '}']; // Make Array say that they are Array

          if (isArray(value)) {
            array = true;
            braces = ['[', ']'];
          } // Make functions say that they are functions


          if (isFunction(value)) {
            var n = value.name ? ': ' + value.name : '';
            base = ' [Function' + n + ']';
          } // Make RegExps say that they are RegExps


          if (isRegExp(value)) {
            base = ' ' + RegExp.prototype.toString.call(value);
          } // Make dates with properties first say the date


          if (isDate(value)) {
            base = ' ' + Date.prototype.toUTCString.call(value);
          } // Make error with message first say the error


          if (isError(value)) {
            base = ' ' + formatError(value);
          }

          if (keys.length === 0 && (!array || value.length == 0)) {
            return braces[0] + base + braces[1];
          }

          if (recurseTimes < 0) {
            if (isRegExp(value)) {
              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            } else {
              return ctx.stylize('[Object]', 'special');
            }
          }

          ctx.seen.push(value);
          var output;

          if (array) {
            output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
          } else {
            output = keys.map(function (key) {
              return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
            });
          }

          ctx.seen.pop();
          return reduceToSingleString(output, base, braces);
        }

        function formatPrimitive(ctx, value) {
          if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

          if (isString(value)) {
            var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
            return ctx.stylize(simple, 'string');
          }

          if (isNumber(value)) return ctx.stylize('' + value, 'number');
          if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

          if (isNull(value)) return ctx.stylize('null', 'null');
        }

        function formatError(value) {
          return '[' + Error.prototype.toString.call(value) + ']';
        }

        function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
          var output = [];

          for (var i = 0, l = value.length; i < l; ++i) {
            if (hasOwnProperty(value, String(i))) {
              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
            } else {
              output.push('');
            }
          }

          keys.forEach(function (key) {
            if (!key.match(/^\d+$/)) {
              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
            }
          });
          return output;
        }

        function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
          var name, str, desc;
          desc = Object.getOwnPropertyDescriptor(value, key) || {
            value: value[key]
          };

          if (desc.get) {
            if (desc.set) {
              str = ctx.stylize('[Getter/Setter]', 'special');
            } else {
              str = ctx.stylize('[Getter]', 'special');
            }
          } else {
            if (desc.set) {
              str = ctx.stylize('[Setter]', 'special');
            }
          }

          if (!hasOwnProperty(visibleKeys, key)) {
            name = '[' + key + ']';
          }

          if (!str) {
            if (ctx.seen.indexOf(desc.value) < 0) {
              if (isNull(recurseTimes)) {
                str = formatValue(ctx, desc.value, null);
              } else {
                str = formatValue(ctx, desc.value, recurseTimes - 1);
              }

              if (str.indexOf('\n') > -1) {
                if (array) {
                  str = str.split('\n').map(function (line) {
                    return '  ' + line;
                  }).join('\n').substr(2);
                } else {
                  str = '\n' + str.split('\n').map(function (line) {
                    return '   ' + line;
                  }).join('\n');
                }
              }
            } else {
              str = ctx.stylize('[Circular]', 'special');
            }
          }

          if (isUndefined(name)) {
            if (array && key.match(/^\d+$/)) {
              return str;
            }

            name = JSON.stringify('' + key);

            if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
              name = name.substr(1, name.length - 2);
              name = ctx.stylize(name, 'name');
            } else {
              name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
              name = ctx.stylize(name, 'string');
            }
          }

          return name + ': ' + str;
        }

        function reduceToSingleString(output, base, braces) {
          var numLinesEst = 0;
          var length = output.reduce(function (prev, cur) {
            numLinesEst++;
            if (cur.indexOf('\n') >= 0) numLinesEst++;
            return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
          }, 0);

          if (length > 60) {
            return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
          }

          return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
        } // NOTE: These type checking functions intentionally don't use `instanceof`
        // because it is fragile and can be easily faked with `Object.create()`.


        function isArray(ar) {
          return Array.isArray(ar);
        }

        exports.isArray = isArray;

        function isBoolean(arg) {
          return typeof arg === 'boolean';
        }

        exports.isBoolean = isBoolean;

        function isNull(arg) {
          return arg === null;
        }

        exports.isNull = isNull;

        function isNullOrUndefined(arg) {
          return arg == null;
        }

        exports.isNullOrUndefined = isNullOrUndefined;

        function isNumber(arg) {
          return typeof arg === 'number';
        }

        exports.isNumber = isNumber;

        function isString(arg) {
          return typeof arg === 'string';
        }

        exports.isString = isString;

        function isSymbol(arg) {
          return _typeof2(arg) === 'symbol';
        }

        exports.isSymbol = isSymbol;

        function isUndefined(arg) {
          return arg === void 0;
        }

        exports.isUndefined = isUndefined;

        function isRegExp(re) {
          return isObject(re) && objectToString(re) === '[object RegExp]';
        }

        exports.isRegExp = isRegExp;

        function isObject(arg) {
          return _typeof2(arg) === 'object' && arg !== null;
        }

        exports.isObject = isObject;

        function isDate(d) {
          return isObject(d) && objectToString(d) === '[object Date]';
        }

        exports.isDate = isDate;

        function isError(e) {
          return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
        }

        exports.isError = isError;

        function isFunction(arg) {
          return typeof arg === 'function';
        }

        exports.isFunction = isFunction;

        function isPrimitive(arg) {
          return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof2(arg) === 'symbol' || // ES6 symbol
          typeof arg === 'undefined';
        }

        exports.isPrimitive = isPrimitive;
        exports.isBuffer = __webpack_require__(40);

        function objectToString(o) {
          return Object.prototype.toString.call(o);
        }

        function pad(n) {
          return n < 10 ? '0' + n.toString(10) : n.toString(10);
        }

        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

        function timestamp() {
          var d = new Date();
          var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
          return [d.getDate(), months[d.getMonth()], time].join(' ');
        } // log is just a thin wrapper to console.log that prepends a timestamp


        exports.log = function () {
          console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
        };
        /**
         * Inherit the prototype methods from one constructor into another.
         *
         * The Function.prototype.inherits from lang.js rewritten as a standalone
         * function (not on Function.prototype). NOTE: If this file is to be loaded
         * during bootstrapping this function needs to be rewritten using some native
         * functions as prototype setup using normal JavaScript does not work as
         * expected during bootstrapping (see mirror.js in r114903).
         *
         * @param {function} ctor Constructor function which needs to inherit the
         *     prototype.
         * @param {function} superCtor Constructor function to inherit prototype from.
         */


        exports.inherits = __webpack_require__(39);

        exports._extend = function (origin, add) {
          // Don't do anything if add isn't an object
          if (!add || !isObject(add)) return origin;
          var keys = Object.keys(add);
          var i = keys.length;

          while (i--) {
            origin[keys[i]] = add[keys[i]];
          }

          return origin;
        };

        function hasOwnProperty(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(5), __webpack_require__(7));
      /***/
    },
    /* 17 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (global) {
        // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
        // original notice:

        /*!
         * The buffer module from node.js, for the browser.
         *
         * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
         * @license  MIT
         */
        function compare(a, b) {
          if (a === b) {
            return 0;
          }

          var x = a.length;
          var y = b.length;

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i];
              y = b[i];
              break;
            }
          }

          if (x < y) {
            return -1;
          }

          if (y < x) {
            return 1;
          }

          return 0;
        }

        function isBuffer(b) {
          if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
            return global.Buffer.isBuffer(b);
          }

          return !!(b != null && b._isBuffer);
        } // based on node assert, original notice:
        // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
        //
        // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
        //
        // Originally from narwhal.js (http://narwhaljs.org)
        // Copyright (c) 2009 Thomas Robinson <280north.com>
        //
        // Permission is hereby granted, free of charge, to any person obtaining a copy
        // of this software and associated documentation files (the 'Software'), to
        // deal in the Software without restriction, including without limitation the
        // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
        // sell copies of the Software, and to permit persons to whom the Software is
        // furnished to do so, subject to the following conditions:
        //
        // The above copyright notice and this permission notice shall be included in
        // all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
        // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
        // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


        var util = __webpack_require__(16);

        var hasOwn = Object.prototype.hasOwnProperty;
        var pSlice = Array.prototype.slice;

        var functionsHaveNames = function () {
          return function foo() {}.name === 'foo';
        }();

        function pToString(obj) {
          return Object.prototype.toString.call(obj);
        }

        function isView(arrbuf) {
          if (isBuffer(arrbuf)) {
            return false;
          }

          if (typeof global.ArrayBuffer !== 'function') {
            return false;
          }

          if (typeof ArrayBuffer.isView === 'function') {
            return ArrayBuffer.isView(arrbuf);
          }

          if (!arrbuf) {
            return false;
          }

          if (arrbuf instanceof DataView) {
            return true;
          }

          if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
            return true;
          }

          return false;
        } // 1. The assert module provides functions that throw
        // AssertionError's when particular conditions are not met. The
        // assert module must conform to the following interface.


        var assert = module.exports = ok; // 2. The AssertionError is defined in assert.
        // new assert.AssertionError({ message: message,
        //                             actual: actual,
        //                             expected: expected })

        var regex = /\s*function\s+([^\(\s]*)\s*/; // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js

        function getName(func) {
          if (!util.isFunction(func)) {
            return;
          }

          if (functionsHaveNames) {
            return func.name;
          }

          var str = func.toString();
          var match = str.match(regex);
          return match && match[1];
        }

        assert.AssertionError = function AssertionError(options) {
          this.name = 'AssertionError';
          this.actual = options.actual;
          this.expected = options.expected;
          this.operator = options.operator;

          if (options.message) {
            this.message = options.message;
            this.generatedMessage = false;
          } else {
            this.message = getMessage(this);
            this.generatedMessage = true;
          }

          var stackStartFunction = options.stackStartFunction || fail;

          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, stackStartFunction);
          } else {
            // non v8 browsers so we can have a stacktrace
            var err = new Error();

            if (err.stack) {
              var out = err.stack; // try to strip useless frames

              var fn_name = getName(stackStartFunction);
              var idx = out.indexOf('\n' + fn_name);

              if (idx >= 0) {
                // once we have located the function frame
                // we need to strip out everything before it (and its line)
                var next_line = out.indexOf('\n', idx + 1);
                out = out.substring(next_line + 1);
              }

              this.stack = out;
            }
          }
        }; // assert.AssertionError instanceof Error


        util.inherits(assert.AssertionError, Error);

        function truncate(s, n) {
          if (typeof s === 'string') {
            return s.length < n ? s : s.slice(0, n);
          } else {
            return s;
          }
        }

        function inspect(something) {
          if (functionsHaveNames || !util.isFunction(something)) {
            return util.inspect(something);
          }

          var rawname = getName(something);
          var name = rawname ? ': ' + rawname : '';
          return '[Function' + name + ']';
        }

        function getMessage(self) {
          return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);
        } // At present only the three keys mentioned above are used and
        // understood by the spec. Implementations or sub modules can pass
        // other keys to the AssertionError's constructor - they will be
        // ignored.
        // 3. All of the following functions must throw an AssertionError
        // when a corresponding condition is not met, with a message that
        // may be undefined if not provided.  All assertion methods provide
        // both the actual and expected values to the assertion error for
        // display purposes.


        function fail(actual, expected, message, operator, stackStartFunction) {
          throw new assert.AssertionError({
            message: message,
            actual: actual,
            expected: expected,
            operator: operator,
            stackStartFunction: stackStartFunction
          });
        } // EXTENSION! allows for well behaved errors defined elsewhere.


        assert.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined
        // by !!guard.
        // assert.ok(guard, message_opt);
        // This statement is equivalent to assert.equal(true, !!guard,
        // message_opt);. To test strictly for the value true, use
        // assert.strictEqual(true, guard, message_opt);.

        function ok(value, message) {
          if (!value) fail(value, true, message, '==', assert.ok);
        }

        assert.ok = ok; // 5. The equality assertion tests shallow, coercive equality with
        // ==.
        // assert.equal(actual, expected, message_opt);

        assert.equal = function equal(actual, expected, message) {
          if (actual != expected) fail(actual, expected, message, '==', assert.equal);
        }; // 6. The non-equality assertion tests for whether two objects are not equal
        // with != assert.notEqual(actual, expected, message_opt);


        assert.notEqual = function notEqual(actual, expected, message) {
          if (actual == expected) {
            fail(actual, expected, message, '!=', assert.notEqual);
          }
        }; // 7. The equivalence assertion tests a deep equality relation.
        // assert.deepEqual(actual, expected, message_opt);


        assert.deepEqual = function deepEqual(actual, expected, message) {
          if (!_deepEqual(actual, expected, false)) {
            fail(actual, expected, message, 'deepEqual', assert.deepEqual);
          }
        };

        assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
          if (!_deepEqual(actual, expected, true)) {
            fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
          }
        };

        function _deepEqual(actual, expected, strict, memos) {
          // 7.1. All identical values are equivalent, as determined by ===.
          if (actual === expected) {
            return true;
          } else if (isBuffer(actual) && isBuffer(expected)) {
            return compare(actual, expected) === 0; // 7.2. If the expected value is a Date object, the actual value is
            // equivalent if it is also a Date object that refers to the same time.
          } else if (util.isDate(actual) && util.isDate(expected)) {
            return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is
            // equivalent if it is also a RegExp object with the same source and
            // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
          } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
            return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',
            // equivalence is determined by ==.
          } else if ((actual === null || _typeof2(actual) !== 'object') && (expected === null || _typeof2(expected) !== 'object')) {
            return strict ? actual === expected : actual == expected; // If both values are instances of typed arrays, wrap their underlying
            // ArrayBuffers in a Buffer each to increase performance
            // This optimization requires the arrays to have the same type as checked by
            // Object.prototype.toString (aka pToString). Never perform binary
            // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
            // bit patterns are not identical.
          } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
            return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0; // 7.5 For all other Object pairs, including Array objects, equivalence is
            // determined by having the same number of owned properties (as verified
            // with Object.prototype.hasOwnProperty.call), the same set of keys
            // (although not necessarily the same order), equivalent values for every
            // corresponding key, and an identical 'prototype' property. Note: this
            // accounts for both named and indexed properties on Arrays.
          } else if (isBuffer(actual) !== isBuffer(expected)) {
            return false;
          } else {
            memos = memos || {
              actual: [],
              expected: []
            };
            var actualIndex = memos.actual.indexOf(actual);

            if (actualIndex !== -1) {
              if (actualIndex === memos.expected.indexOf(expected)) {
                return true;
              }
            }

            memos.actual.push(actual);
            memos.expected.push(expected);
            return objEquiv(actual, expected, strict, memos);
          }
        }

        function isArguments(object) {
          return Object.prototype.toString.call(object) == '[object Arguments]';
        }

        function objEquiv(a, b, strict, actualVisitedObjects) {
          if (a === null || a === undefined || b === null || b === undefined) return false; // if one is a primitive, the other must be same

          if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
          if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
          var aIsArgs = isArguments(a);
          var bIsArgs = isArguments(b);
          if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;

          if (aIsArgs) {
            a = pSlice.call(a);
            b = pSlice.call(b);
            return _deepEqual(a, b, strict);
          }

          var ka = objectKeys(a);
          var kb = objectKeys(b);
          var key, i; // having the same number of owned properties (keys incorporates
          // hasOwnProperty)

          if (ka.length !== kb.length) return false; //the same set of keys (although not necessarily the same order),

          ka.sort();
          kb.sort(); //~~~cheap key test

          for (i = ka.length - 1; i >= 0; i--) {
            if (ka[i] !== kb[i]) return false;
          } //equivalent values for every corresponding key, and
          //~~~possibly expensive deep test


          for (i = ka.length - 1; i >= 0; i--) {
            key = ka[i];
            if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
          }

          return true;
        } // 8. The non-equivalence assertion tests for any deep inequality.
        // assert.notDeepEqual(actual, expected, message_opt);


        assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
          if (_deepEqual(actual, expected, false)) {
            fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
          }
        };

        assert.notDeepStrictEqual = notDeepStrictEqual;

        function notDeepStrictEqual(actual, expected, message) {
          if (_deepEqual(actual, expected, true)) {
            fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
          }
        } // 9. The strict equality assertion tests strict equality, as determined by ===.
        // assert.strictEqual(actual, expected, message_opt);


        assert.strictEqual = function strictEqual(actual, expected, message) {
          if (actual !== expected) {
            fail(actual, expected, message, '===', assert.strictEqual);
          }
        }; // 10. The strict non-equality assertion tests for strict inequality, as
        // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);


        assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
          if (actual === expected) {
            fail(actual, expected, message, '!==', assert.notStrictEqual);
          }
        };

        function expectedException(actual, expected) {
          if (!actual || !expected) {
            return false;
          }

          if (Object.prototype.toString.call(expected) == '[object RegExp]') {
            return expected.test(actual);
          }

          try {
            if (actual instanceof expected) {
              return true;
            }
          } catch (e) {// Ignore.  The instanceof check doesn't work for arrow functions.
          }

          if (Error.isPrototypeOf(expected)) {
            return false;
          }

          return expected.call({}, actual) === true;
        }

        function _tryBlock(block) {
          var error;

          try {
            block();
          } catch (e) {
            error = e;
          }

          return error;
        }

        function _throws(shouldThrow, block, expected, message) {
          var actual;

          if (typeof block !== 'function') {
            throw new TypeError('"block" argument must be a function');
          }

          if (typeof expected === 'string') {
            message = expected;
            expected = null;
          }

          actual = _tryBlock(block);
          message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

          if (shouldThrow && !actual) {
            fail(actual, expected, 'Missing expected exception' + message);
          }

          var userProvidedMessage = typeof message === 'string';
          var isUnwantedException = !shouldThrow && util.isError(actual);
          var isUnexpectedException = !shouldThrow && actual && !expected;

          if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
            fail(actual, expected, 'Got unwanted exception' + message);
          }

          if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
            throw actual;
          }
        } // 11. Expected to throw an error:
        // assert.throws(block, Error_opt, message_opt);


        assert["throws"] = function (block,
        /*optional*/
        error,
        /*optional*/
        message) {
          _throws(true, block, error, message);
        }; // EXTENSION! This is annoying to write outside this module.


        assert.doesNotThrow = function (block,
        /*optional*/
        error,
        /*optional*/
        message) {
          _throws(false, block, error, message);
        };

        assert.ifError = function (err) {
          if (err) throw err;
        };

        var objectKeys = Object.keys || function (obj) {
          var keys = [];

          for (var key in obj) {
            if (hasOwn.call(obj, key)) keys.push(key);
          }

          return keys;
        };
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(5));
      /***/
    },
    /* 18 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        // Declare internals
        var internals = {};

        exports.escapeJavaScript = function (input) {
          if (!input) {
            return '';
          }

          var escaped = '';

          for (var i = 0; i < input.length; ++i) {
            var charCode = input.charCodeAt(i);

            if (internals.isSafe(charCode)) {
              escaped += input[i];
            } else {
              escaped += internals.escapeJavaScriptChar(charCode);
            }
          }

          return escaped;
        };

        exports.escapeHtml = function (input) {
          if (!input) {
            return '';
          }

          var escaped = '';

          for (var i = 0; i < input.length; ++i) {
            var charCode = input.charCodeAt(i);

            if (internals.isSafe(charCode)) {
              escaped += input[i];
            } else {
              escaped += internals.escapeHtmlChar(charCode);
            }
          }

          return escaped;
        };

        exports.escapeJson = function (input) {
          if (!input) {
            return '';
          }

          var lessThan = 0x3C;
          var greaterThan = 0x3E;
          var andSymbol = 0x26;
          var lineSeperator = 0x2028; // replace method

          var charCode = void 0;
          return input.replace(/[<>&\u2028\u2029]/g, function (match) {
            charCode = match.charCodeAt(0);

            if (charCode === lessThan) {
              return "\\u003c";
            } else if (charCode === greaterThan) {
              return "\\u003e";
            } else if (charCode === andSymbol) {
              return "\\u0026";
            } else if (charCode === lineSeperator) {
              return "\\u2028";
            }

            return "\\u2029";
          });
        };

        internals.escapeJavaScriptChar = function (charCode) {
          if (charCode >= 256) {
            return "\\u" + internals.padLeft('' + charCode, 4);
          }

          var hexValue = Buffer.from(String.fromCharCode(charCode), 'ascii').toString('hex');
          return '\\x' + internals.padLeft(hexValue, 2);
        };

        internals.escapeHtmlChar = function (charCode) {
          var namedEscape = internals.namedHtml[charCode];

          if (typeof namedEscape !== 'undefined') {
            return namedEscape;
          }

          if (charCode >= 256) {
            return '&#' + charCode + ';';
          }

          var hexValue = Buffer.from(String.fromCharCode(charCode), 'ascii').toString('hex');
          return '&#x' + internals.padLeft(hexValue, 2) + ';';
        };

        internals.padLeft = function (str, len) {
          while (str.length < len) {
            str = '0' + str;
          }

          return str;
        };

        internals.isSafe = function (charCode) {
          return typeof internals.safeCharCodes[charCode] !== 'undefined';
        };

        internals.namedHtml = {
          '38': '&amp;',
          '60': '&lt;',
          '62': '&gt;',
          '34': '&quot;',
          '160': '&nbsp;',
          '162': '&cent;',
          '163': '&pound;',
          '164': '&curren;',
          '169': '&copy;',
          '174': '&reg;'
        };

        internals.safeCharCodes = function () {
          var safe = {};

          for (var i = 32; i < 123; ++i) {
            if (i >= 97 || // a-z
            i >= 65 && i <= 90 || // A-Z
            i >= 48 && i <= 57 || // 0-9
            i === 32 || // space
            i === 46 || // .
            i === 44 || // ,
            i === 45 || // -
            i === 58 || // :
            i === 95) {
              // _
              safe[i] = null;
            }
          }

          return safe;
        }();
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(3).Buffer);
      /***/
    },
    /* 19 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        // Load modules
        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
          return _typeof2(obj);
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
        };

        var Punycode = __webpack_require__(38); // Declare internals


        var internals = {
          hasOwn: Object.prototype.hasOwnProperty,
          indexOf: Array.prototype.indexOf,
          defaultThreshold: 16,
          maxIPv6Groups: 8,
          categories: {
            valid: 1,
            dnsWarn: 7,
            rfc5321: 15,
            cfws: 31,
            deprecated: 63,
            rfc5322: 127,
            error: 255
          },
          diagnoses: {
            // Address is valid
            valid: 0,
            // Address is valid for SMTP but has unusual elements
            rfc5321TLD: 9,
            rfc5321TLDNumeric: 10,
            rfc5321QuotedString: 11,
            rfc5321AddressLiteral: 12,
            // Address is valid for message, but must be modified for envelope
            cfwsComment: 17,
            cfwsFWS: 18,
            // Address contains non-ASCII when the allowUnicode option is false
            // Has to be > internals.defaultThreshold so that it's rejected
            // without an explicit errorLevel:
            undesiredNonAscii: 25,
            // Address contains deprecated elements, but may still be valid in some contexts
            deprecatedLocalPart: 33,
            deprecatedFWS: 34,
            deprecatedQTEXT: 35,
            deprecatedQP: 36,
            deprecatedComment: 37,
            deprecatedCTEXT: 38,
            deprecatedIPv6: 39,
            deprecatedCFWSNearAt: 49,
            // Address is only valid according to broad definition in RFC 5322, but is otherwise invalid
            rfc5322Domain: 65,
            rfc5322TooLong: 66,
            rfc5322LocalTooLong: 67,
            rfc5322DomainTooLong: 68,
            rfc5322LabelTooLong: 69,
            rfc5322DomainLiteral: 70,
            rfc5322DomainLiteralOBSDText: 71,
            rfc5322IPv6GroupCount: 72,
            rfc5322IPv62x2xColon: 73,
            rfc5322IPv6BadCharacter: 74,
            rfc5322IPv6MaxGroups: 75,
            rfc5322IPv6ColonStart: 76,
            rfc5322IPv6ColonEnd: 77,
            // Address is invalid for any purpose
            errExpectingDTEXT: 129,
            errNoLocalPart: 130,
            errNoDomain: 131,
            errConsecutiveDots: 132,
            errATEXTAfterCFWS: 133,
            errATEXTAfterQS: 134,
            errATEXTAfterDomainLiteral: 135,
            errExpectingQPair: 136,
            errExpectingATEXT: 137,
            errExpectingQTEXT: 138,
            errExpectingCTEXT: 139,
            errBackslashEnd: 140,
            errDotStart: 141,
            errDotEnd: 142,
            errDomainHyphenStart: 143,
            errDomainHyphenEnd: 144,
            errUnclosedQuotedString: 145,
            errUnclosedComment: 146,
            errUnclosedDomainLiteral: 147,
            errFWSCRLFx2: 148,
            errFWSCRLFEnd: 149,
            errCRNoLF: 150,
            errUnknownTLD: 160,
            errDomainTooShort: 161
          },
          components: {
            localpart: 0,
            domain: 1,
            literal: 2,
            contextComment: 3,
            contextFWS: 4,
            contextQuotedString: 5,
            contextQuotedPair: 6
          }
        };

        internals.specials = function () {
          var specials = '()<>[]:;@\\,."'; // US-ASCII visible characters not valid for atext (http://tools.ietf.org/html/rfc5322#section-3.2.3)

          var lookup = new Array(0x100);
          lookup.fill(false);

          for (var i = 0; i < specials.length; ++i) {
            lookup[specials.codePointAt(i)] = true;
          }

          return function (code) {
            return lookup[code];
          };
        }();

        internals.c0Controls = function () {
          var lookup = new Array(0x100);
          lookup.fill(false); // add C0 control characters

          for (var i = 0; i < 33; ++i) {
            lookup[i] = true;
          }

          return function (code) {
            return lookup[code];
          };
        }();

        internals.c1Controls = function () {
          var lookup = new Array(0x100);
          lookup.fill(false); // add C1 control characters

          for (var i = 127; i < 160; ++i) {
            lookup[i] = true;
          }

          return function (code) {
            return lookup[code];
          };
        }();

        internals.regex = {
          ipV4: /\b(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
          ipV6: /^[a-fA-F\d]{0,4}$/
        };
        internals.normalizeSupportsNul = '\0'.normalize('NFC') === '\0'; // $lab:coverage:off$

        internals.nulNormalize = function (email) {
          return email.split('\0').map(function (part) {
            return part.normalize('NFC');
          }).join('\0');
        }; // $lab:coverage:on$


        internals.normalize = function (email) {
          // $lab:coverage:off$
          if (!internals.normalizeSupportsNul && email.indexOf('\0') >= 0) {
            return internals.nulNormalize(email);
          } // $lab:coverage:on$


          return email.normalize('NFC');
        };

        internals.checkIpV6 = function (items) {
          return items.every(function (value) {
            return internals.regex.ipV6.test(value);
          });
        };

        internals.validDomain = function (tldAtom, options) {
          if (options.tldBlacklist) {
            if (Array.isArray(options.tldBlacklist)) {
              return internals.indexOf.call(options.tldBlacklist, tldAtom) === -1;
            }

            return !internals.hasOwn.call(options.tldBlacklist, tldAtom);
          }

          if (Array.isArray(options.tldWhitelist)) {
            return internals.indexOf.call(options.tldWhitelist, tldAtom) !== -1;
          }

          return internals.hasOwn.call(options.tldWhitelist, tldAtom);
        };
        /**
         * Check that an email address conforms to RFCs 5321, 5322, 6530 and others
         *
         * We distinguish clearly between a Mailbox as defined by RFC 5321 and an
         * addr-spec as defined by RFC 5322. Depending on the context, either can be
         * regarded as a valid email address. The RFC 5321 Mailbox specification is
         * more restrictive (comments, white space and obsolete forms are not allowed).
         *
         * @param {string} email The email address to check. See README for specifics.
         * @param {Object} options The (optional) options:
         *   {*} errorLevel Determines the boundary between valid and invalid
         *     addresses.
         *   {*} tldBlacklist The set of domains to consider invalid.
         *   {*} tldWhitelist The set of domains to consider valid.
         *   {*} allowUnicode Whether to allow non-ASCII characters, defaults to true.
         *   {*} minDomainAtoms The minimum number of domain atoms which must be present
         *     for the address to be valid.
         * @param {function(number|boolean)} callback The (optional) callback handler.
         * @return {*}
         */


        exports.validate = internals.validate = function (email, options, callback) {
          options = options || {};
          email = internals.normalize(email); // The callback function is deprecated.
          // $lab:coverage:off$

          if (typeof options === 'function') {
            callback = options;
            options = {};
          }

          if (typeof callback !== 'function') {
            callback = null;
          } // $lab:coverage:on$


          var diagnose = void 0;
          var threshold = void 0;

          if (typeof options.errorLevel === 'number') {
            diagnose = true;
            threshold = options.errorLevel;
          } else {
            diagnose = !!options.errorLevel;
            threshold = internals.diagnoses.valid;
          }

          if (options.tldWhitelist) {
            if (typeof options.tldWhitelist === 'string') {
              options.tldWhitelist = [options.tldWhitelist];
            } else if (_typeof(options.tldWhitelist) !== 'object') {
              throw new TypeError('expected array or object tldWhitelist');
            }
          }

          if (options.tldBlacklist) {
            if (typeof options.tldBlacklist === 'string') {
              options.tldBlacklist = [options.tldBlacklist];
            } else if (_typeof(options.tldBlacklist) !== 'object') {
              throw new TypeError('expected array or object tldBlacklist');
            }
          }

          if (options.minDomainAtoms && (options.minDomainAtoms !== (+options.minDomainAtoms | 0) || options.minDomainAtoms < 0)) {
            throw new TypeError('expected positive integer minDomainAtoms');
          }

          var maxResult = internals.diagnoses.valid;

          var updateResult = function updateResult(value) {
            if (value > maxResult) {
              maxResult = value;
            }
          };

          var allowUnicode = options.allowUnicode === undefined || !!options.allowUnicode;

          if (!allowUnicode && /[^\x00-\x7f]/.test(email)) {
            updateResult(internals.diagnoses.undesiredNonAscii);
          }

          var context = {
            now: internals.components.localpart,
            prev: internals.components.localpart,
            stack: [internals.components.localpart]
          };
          var prevToken = '';
          var parseData = {
            local: '',
            domain: ''
          };
          var atomData = {
            locals: [''],
            domains: ['']
          };
          var elementCount = 0;
          var elementLength = 0;
          var crlfCount = 0;
          var charCode = void 0;
          var hyphenFlag = false;
          var assertEnd = false;
          var emailLength = email.length;
          var token = void 0; // Token is used outside the loop, must declare similarly

          for (var i = 0; i < emailLength; i += token.length) {
            // Utilize codepoints to account for Unicode surrogate pairs
            token = String.fromCodePoint(email.codePointAt(i));

            switch (context.now) {
              // Local-part
              case internals.components.localpart:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   local-part      =   dot-atom / quoted-string / obs-local-part
                //
                //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
                //
                //   dot-atom-text   =   1*atext *("." 1*atext)
                //
                //   quoted-string   =   [CFWS]
                //                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                //                       [CFWS]
                //
                //   obs-local-part  =   word *("." word)
                //
                //   word            =   atom / quoted-string
                //
                //   atom            =   [CFWS] 1*atext [CFWS]
                switch (token) {
                  // Comment
                  case '(':
                    if (elementLength === 0) {
                      // Comments are OK at the beginning of an element
                      updateResult(elementCount === 0 ? internals.diagnoses.cfwsComment : internals.diagnoses.deprecatedComment);
                    } else {
                      updateResult(internals.diagnoses.cfwsComment); // Cannot start a comment in an element, should be end

                      assertEnd = true;
                    }

                    context.stack.push(context.now);
                    context.now = internals.components.contextComment;
                    break;
                  // Next dot-atom element

                  case '.':
                    if (elementLength === 0) {
                      // Another dot, already?
                      updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);
                    } else {
                      // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
                      if (assertEnd) {
                        updateResult(internals.diagnoses.deprecatedLocalPart);
                      } // CFWS & quoted strings are OK again now we're at the beginning of an element (although they are obsolete forms)


                      assertEnd = false;
                      elementLength = 0;
                      ++elementCount;
                      parseData.local += token;
                      atomData.locals[elementCount] = '';
                    }

                    break;
                  // Quoted string

                  case '"':
                    if (elementLength === 0) {
                      // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
                      updateResult(elementCount === 0 ? internals.diagnoses.rfc5321QuotedString : internals.diagnoses.deprecatedLocalPart);
                      parseData.local += token;
                      atomData.locals[elementCount] += token;
                      elementLength += Buffer.byteLength(token, 'utf8'); // Quoted string must be the entire element

                      assertEnd = true;
                      context.stack.push(context.now);
                      context.now = internals.components.contextQuotedString;
                    } else {
                      updateResult(internals.diagnoses.errExpectingATEXT);
                    }

                    break;
                  // Folding white space

                  case '\r':
                    if (emailLength === ++i || email[i] !== '\n') {
                      // Fatal error
                      updateResult(internals.diagnoses.errCRNoLF);
                      break;
                    }

                  // Fallthrough

                  case ' ':
                  case '\t':
                    if (elementLength === 0) {
                      updateResult(elementCount === 0 ? internals.diagnoses.cfwsFWS : internals.diagnoses.deprecatedFWS);
                    } else {
                      // We can't start FWS in the middle of an element, better be end
                      assertEnd = true;
                    }

                    context.stack.push(context.now);
                    context.now = internals.components.contextFWS;
                    prevToken = token;
                    break;

                  case '@':
                    // At this point we should have a valid local-part
                    // $lab:coverage:off$
                    if (context.stack.length !== 1) {
                      throw new Error('unexpected item on context stack');
                    } // $lab:coverage:on$


                    if (parseData.local.length === 0) {
                      // Fatal error
                      updateResult(internals.diagnoses.errNoLocalPart);
                    } else if (elementLength === 0) {
                      // Fatal error
                      updateResult(internals.diagnoses.errDotEnd);
                    } // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.1 the maximum total length of a user name or other local-part is 64
                    //    octets
                    else if (Buffer.byteLength(parseData.local, 'utf8') > 64) {
                        updateResult(internals.diagnoses.rfc5322LocalTooLong);
                      } // http://tools.ietf.org/html/rfc5322#section-3.4.1 comments and folding white space SHOULD NOT be used around "@" in the
                      //    addr-spec
                      //
                      // http://tools.ietf.org/html/rfc2119
                      // 4. SHOULD NOT this phrase, or the phrase "NOT RECOMMENDED" mean that there may exist valid reasons in particular
                      //    circumstances when the particular behavior is acceptable or even useful, but the full implications should be understood
                      //    and the case carefully weighed before implementing any behavior described with this label.
                      else if (context.prev === internals.components.contextComment || context.prev === internals.components.contextFWS) {
                          updateResult(internals.diagnoses.deprecatedCFWSNearAt);
                        } // Clear everything down for the domain parsing


                    context.now = internals.components.domain;
                    context.stack[0] = internals.components.domain;
                    elementCount = 0;
                    elementLength = 0;
                    assertEnd = false; // CFWS can only appear at the end of the element

                    break;
                  // ATEXT

                  default:
                    // http://tools.ietf.org/html/rfc5322#section-3.2.3
                    //    atext = ALPHA / DIGIT / ; Printable US-ASCII
                    //            "!" / "#" /     ;  characters not including
                    //            "$" / "%" /     ;  specials.  Used for atoms.
                    //            "&" / "'" /
                    //            "*" / "+" /
                    //            "-" / "/" /
                    //            "=" / "?" /
                    //            "^" / "_" /
                    //            "`" / "{" /
                    //            "|" / "}" /
                    //            "~"
                    if (assertEnd) {
                      // We have encountered atext where it is no longer valid
                      switch (context.prev) {
                        case internals.components.contextComment:
                        case internals.components.contextFWS:
                          updateResult(internals.diagnoses.errATEXTAfterCFWS);
                          break;

                        case internals.components.contextQuotedString:
                          updateResult(internals.diagnoses.errATEXTAfterQS);
                          break;
                        // $lab:coverage:off$

                        default:
                          throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);
                        // $lab:coverage:on$
                      }
                    } else {
                      context.prev = context.now;
                      charCode = token.codePointAt(0); // Especially if charCode == 10

                      if (internals.specials(charCode) || internals.c0Controls(charCode) || internals.c1Controls(charCode)) {
                        // Fatal error
                        updateResult(internals.diagnoses.errExpectingATEXT);
                      }

                      parseData.local += token;
                      atomData.locals[elementCount] += token;
                      elementLength += Buffer.byteLength(token, 'utf8');
                    }

                }

                break;

              case internals.components.domain:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   domain          =   dot-atom / domain-literal / obs-domain
                //
                //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
                //
                //   dot-atom-text   =   1*atext *("." 1*atext)
                //
                //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
                //
                //   dtext           =   %d33-90 /          ; Printable US-ASCII
                //                       %d94-126 /         ;  characters not including
                //                       obs-dtext          ;  "[", "]", or "\"
                //
                //   obs-domain      =   atom *("." atom)
                //
                //   atom            =   [CFWS] 1*atext [CFWS]
                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                //   Mailbox        = Local-part "@" ( Domain / address-literal )
                //
                //   Domain         = sub-domain *("." sub-domain)
                //
                //   address-literal  = "[" ( IPv4-address-literal /
                //                    IPv6-address-literal /
                //                    General-address-literal ) "]"
                //                    ; See Section 4.1.3
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //      Note: A liberal syntax for the domain portion of addr-spec is
                //      given here.  However, the domain portion contains addressing
                //      information specified by and used in other protocols (e.g.,
                //      [RFC1034], [RFC1035], [RFC1123], [RFC5321]).  It is therefore
                //      incumbent upon implementations to conform to the syntax of
                //      addresses for the context in which they are used.
                //
                // is_email() author's note: it's not clear how to interpret this in
                // he context of a general email address validator. The conclusion I
                // have reached is this: "addressing information" must comply with
                // RFC 5321 (and in turn RFC 1035), anything that is "semantically
                // invisible" must comply only with RFC 5322.
                switch (token) {
                  // Comment
                  case '(':
                    if (elementLength === 0) {
                      // Comments at the start of the domain are deprecated in the text, comments at the start of a subdomain are obs-domain
                      // http://tools.ietf.org/html/rfc5322#section-3.4.1
                      updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedComment);
                    } else {
                      // We can't start a comment mid-element, better be at the end
                      assertEnd = true;
                      updateResult(internals.diagnoses.cfwsComment);
                    }

                    context.stack.push(context.now);
                    context.now = internals.components.contextComment;
                    break;
                  // Next dot-atom element

                  case '.':
                    var punycodeLength = Punycode.encode(atomData.domains[elementCount]).length;

                    if (elementLength === 0) {
                      // Another dot, already? Fatal error.
                      updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);
                    } else if (hyphenFlag) {
                      // Previous subdomain ended in a hyphen. Fatal error.
                      updateResult(internals.diagnoses.errDomainHyphenEnd);
                    } else if (punycodeLength > 63) {
                      // RFC 5890 specifies that domain labels that are encoded using the Punycode algorithm
                      // must adhere to the <= 63 octet requirement.
                      // This includes string prefixes from the Punycode algorithm.
                      //
                      // https://tools.ietf.org/html/rfc5890#section-2.3.2.1
                      // labels          63 octets or less
                      updateResult(internals.diagnoses.rfc5322LabelTooLong);
                    } // CFWS is OK again now we're at the beginning of an element (although
                    // it may be obsolete CFWS)


                    assertEnd = false;
                    elementLength = 0;
                    ++elementCount;
                    atomData.domains[elementCount] = '';
                    parseData.domain += token;
                    break;
                  // Domain literal

                  case '[':
                    if (parseData.domain.length === 0) {
                      // Domain literal must be the only component
                      assertEnd = true;
                      elementLength += Buffer.byteLength(token, 'utf8');
                      context.stack.push(context.now);
                      context.now = internals.components.literal;
                      parseData.domain += token;
                      atomData.domains[elementCount] += token;
                      parseData.literal = '';
                    } else {
                      // Fatal error
                      updateResult(internals.diagnoses.errExpectingATEXT);
                    }

                    break;
                  // Folding white space

                  case '\r':
                    if (emailLength === ++i || email[i] !== '\n') {
                      // Fatal error
                      updateResult(internals.diagnoses.errCRNoLF);
                      break;
                    }

                  // Fallthrough

                  case ' ':
                  case '\t':
                    if (elementLength === 0) {
                      updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedFWS);
                    } else {
                      // We can't start FWS in the middle of an element, so this better be the end
                      updateResult(internals.diagnoses.cfwsFWS);
                      assertEnd = true;
                    }

                    context.stack.push(context.now);
                    context.now = internals.components.contextFWS;
                    prevToken = token;
                    break;
                  // This must be ATEXT

                  default:
                    // RFC 5322 allows any atext...
                    // http://tools.ietf.org/html/rfc5322#section-3.2.3
                    //    atext = ALPHA / DIGIT / ; Printable US-ASCII
                    //            "!" / "#" /     ;  characters not including
                    //            "$" / "%" /     ;  specials.  Used for atoms.
                    //            "&" / "'" /
                    //            "*" / "+" /
                    //            "-" / "/" /
                    //            "=" / "?" /
                    //            "^" / "_" /
                    //            "`" / "{" /
                    //            "|" / "}" /
                    //            "~"
                    // But RFC 5321 only allows letter-digit-hyphen to comply with DNS rules
                    //   (RFCs 1034 & 1123)
                    // http://tools.ietf.org/html/rfc5321#section-4.1.2
                    //   sub-domain     = Let-dig [Ldh-str]
                    //
                    //   Let-dig        = ALPHA / DIGIT
                    //
                    //   Ldh-str        = *( ALPHA / DIGIT / "-" ) Let-dig
                    //
                    if (assertEnd) {
                      // We have encountered ATEXT where it is no longer valid
                      switch (context.prev) {
                        case internals.components.contextComment:
                        case internals.components.contextFWS:
                          updateResult(internals.diagnoses.errATEXTAfterCFWS);
                          break;

                        case internals.components.literal:
                          updateResult(internals.diagnoses.errATEXTAfterDomainLiteral);
                          break;
                        // $lab:coverage:off$

                        default:
                          throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);
                        // $lab:coverage:on$
                      }
                    }

                    charCode = token.codePointAt(0); // Assume this token isn't a hyphen unless we discover it is

                    hyphenFlag = false;

                    if (internals.specials(charCode) || internals.c0Controls(charCode) || internals.c1Controls(charCode)) {
                      // Fatal error
                      updateResult(internals.diagnoses.errExpectingATEXT);
                    } else if (token === '-') {
                      if (elementLength === 0) {
                        // Hyphens cannot be at the beginning of a subdomain, fatal error
                        updateResult(internals.diagnoses.errDomainHyphenStart);
                      }

                      hyphenFlag = true;
                    } // Check if it's a neither a number nor a latin/unicode letter
                    else if (charCode < 48 || charCode > 122 && charCode < 192 || charCode > 57 && charCode < 65 || charCode > 90 && charCode < 97) {
                        // This is not an RFC 5321 subdomain, but still OK by RFC 5322
                        updateResult(internals.diagnoses.rfc5322Domain);
                      }

                    parseData.domain += token;
                    atomData.domains[elementCount] += token;
                    elementLength += Buffer.byteLength(token, 'utf8');
                }

                break;
              // Domain literal

              case internals.components.literal:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
                //
                //   dtext           =   %d33-90 /          ; Printable US-ASCII
                //                       %d94-126 /         ;  characters not including
                //                       obs-dtext          ;  "[", "]", or "\"
                //
                //   obs-dtext       =   obs-NO-WS-CTL / quoted-pair
                switch (token) {
                  // End of domain literal
                  case ']':
                    if (maxResult < internals.categories.deprecated) {
                      // Could be a valid RFC 5321 address literal, so let's check
                      // http://tools.ietf.org/html/rfc5321#section-4.1.2
                      //   address-literal  = "[" ( IPv4-address-literal /
                      //                    IPv6-address-literal /
                      //                    General-address-literal ) "]"
                      //                    ; See Section 4.1.3
                      //
                      // http://tools.ietf.org/html/rfc5321#section-4.1.3
                      //   IPv4-address-literal  = Snum 3("."  Snum)
                      //
                      //   IPv6-address-literal  = "IPv6:" IPv6-addr
                      //
                      //   General-address-literal  = Standardized-tag ":" 1*dcontent
                      //
                      //   Standardized-tag  = Ldh-str
                      //                     ; Standardized-tag MUST be specified in a
                      //                     ; Standards-Track RFC and registered with IANA
                      //
                      //   dcontent      = %d33-90 / ; Printable US-ASCII
                      //                 %d94-126 ; excl. "[", "\", "]"
                      //
                      //   Snum          = 1*3DIGIT
                      //                 ; representing a decimal integer
                      //                 ; value in the range 0 through 255
                      //
                      //   IPv6-addr     = IPv6-full / IPv6-comp / IPv6v4-full / IPv6v4-comp
                      //
                      //   IPv6-hex      = 1*4HEXDIG
                      //
                      //   IPv6-full     = IPv6-hex 7(":" IPv6-hex)
                      //
                      //   IPv6-comp     = [IPv6-hex *5(":" IPv6-hex)] "::"
                      //                 [IPv6-hex *5(":" IPv6-hex)]
                      //                 ; The "::" represents at least 2 16-bit groups of
                      //                 ; zeros.  No more than 6 groups in addition to the
                      //                 ; "::" may be present.
                      //
                      //   IPv6v4-full   = IPv6-hex 5(":" IPv6-hex) ":" IPv4-address-literal
                      //
                      //   IPv6v4-comp   = [IPv6-hex *3(":" IPv6-hex)] "::"
                      //                 [IPv6-hex *3(":" IPv6-hex) ":"]
                      //                 IPv4-address-literal
                      //                 ; The "::" represents at least 2 16-bit groups of
                      //                 ; zeros.  No more than 4 groups in addition to the
                      //                 ; "::" and IPv4-address-literal may be present.
                      var index = -1;
                      var addressLiteral = parseData.literal;
                      var matchesIP = internals.regex.ipV4.exec(addressLiteral); // Maybe extract IPv4 part from the end of the address-literal

                      if (matchesIP) {
                        index = matchesIP.index;

                        if (index !== 0) {
                          // Convert IPv4 part to IPv6 format for futher testing
                          addressLiteral = addressLiteral.slice(0, index) + '0:0';
                        }
                      }

                      if (index === 0) {
                        // Nothing there except a valid IPv4 address, so...
                        updateResult(internals.diagnoses.rfc5321AddressLiteral);
                      } else if (addressLiteral.slice(0, 5).toLowerCase() !== 'ipv6:') {
                        updateResult(internals.diagnoses.rfc5322DomainLiteral);
                      } else {
                        var match = addressLiteral.slice(5);
                        var maxGroups = internals.maxIPv6Groups;
                        var groups = match.split(':');
                        index = match.indexOf('::');

                        if (!~index) {
                          // Need exactly the right number of groups
                          if (groups.length !== maxGroups) {
                            updateResult(internals.diagnoses.rfc5322IPv6GroupCount);
                          }
                        } else if (index !== match.lastIndexOf('::')) {
                          updateResult(internals.diagnoses.rfc5322IPv62x2xColon);
                        } else {
                          if (index === 0 || index === match.length - 2) {
                            // RFC 4291 allows :: at the start or end of an address with 7 other groups in addition
                            ++maxGroups;
                          }

                          if (groups.length > maxGroups) {
                            updateResult(internals.diagnoses.rfc5322IPv6MaxGroups);
                          } else if (groups.length === maxGroups) {
                            // Eliding a single "::"
                            updateResult(internals.diagnoses.deprecatedIPv6);
                          }
                        } // IPv6 testing strategy


                        if (match[0] === ':' && match[1] !== ':') {
                          updateResult(internals.diagnoses.rfc5322IPv6ColonStart);
                        } else if (match[match.length - 1] === ':' && match[match.length - 2] !== ':') {
                          updateResult(internals.diagnoses.rfc5322IPv6ColonEnd);
                        } else if (internals.checkIpV6(groups)) {
                          updateResult(internals.diagnoses.rfc5321AddressLiteral);
                        } else {
                          updateResult(internals.diagnoses.rfc5322IPv6BadCharacter);
                        }
                      }
                    } else {
                      updateResult(internals.diagnoses.rfc5322DomainLiteral);
                    }

                    parseData.domain += token;
                    atomData.domains[elementCount] += token;
                    elementLength += Buffer.byteLength(token, 'utf8');
                    context.prev = context.now;
                    context.now = context.stack.pop();
                    break;

                  case '\\':
                    updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);
                    context.stack.push(context.now);
                    context.now = internals.components.contextQuotedPair;
                    break;
                  // Folding white space

                  case '\r':
                    if (emailLength === ++i || email[i] !== '\n') {
                      updateResult(internals.diagnoses.errCRNoLF);
                      break;
                    }

                  // Fallthrough

                  case ' ':
                  case '\t':
                    updateResult(internals.diagnoses.cfwsFWS);
                    context.stack.push(context.now);
                    context.now = internals.components.contextFWS;
                    prevToken = token;
                    break;
                  // DTEXT

                  default:
                    // http://tools.ietf.org/html/rfc5322#section-3.4.1
                    //   dtext         =   %d33-90 /  ; Printable US-ASCII
                    //                     %d94-126 / ;  characters not including
                    //                     obs-dtext  ;  "[", "]", or "\"
                    //
                    //   obs-dtext     =   obs-NO-WS-CTL / quoted-pair
                    //
                    //   obs-NO-WS-CTL =   %d1-8 /    ; US-ASCII control
                    //                     %d11 /     ;  characters that do not
                    //                     %d12 /     ;  include the carriage
                    //                     %d14-31 /  ;  return, line feed, and
                    //                     %d127      ;  white space characters
                    charCode = token.codePointAt(0); // '\r', '\n', ' ', and '\t' have already been parsed above

                    if (charCode !== 127 && internals.c1Controls(charCode) || charCode === 0 || token === '[') {
                      // Fatal error
                      updateResult(internals.diagnoses.errExpectingDTEXT);
                      break;
                    } else if (internals.c0Controls(charCode) || charCode === 127) {
                      updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);
                    }

                    parseData.literal += token;
                    parseData.domain += token;
                    atomData.domains[elementCount] += token;
                    elementLength += Buffer.byteLength(token, 'utf8');
                }

                break;
              // Quoted string

              case internals.components.contextQuotedString:
                // http://tools.ietf.org/html/rfc5322#section-3.2.4
                //   quoted-string = [CFWS]
                //                   DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                //                   [CFWS]
                //
                //   qcontent      = qtext / quoted-pair
                switch (token) {
                  // Quoted pair
                  case '\\':
                    context.stack.push(context.now);
                    context.now = internals.components.contextQuotedPair;
                    break;
                  // Folding white space. Spaces are allowed as regular characters inside a quoted string - it's only FWS if we include '\t' or '\r\n'

                  case '\r':
                    if (emailLength === ++i || email[i] !== '\n') {
                      // Fatal error
                      updateResult(internals.diagnoses.errCRNoLF);
                      break;
                    }

                  // Fallthrough

                  case '\t':
                    // http://tools.ietf.org/html/rfc5322#section-3.2.2
                    //   Runs of FWS, comment, or CFWS that occur between lexical tokens in
                    //   a structured header field are semantically interpreted as a single
                    //   space character.
                    // http://tools.ietf.org/html/rfc5322#section-3.2.4
                    //   the CRLF in any FWS/CFWS that appears within the quoted-string [is]
                    //   semantically "invisible" and therefore not part of the
                    //   quoted-string
                    parseData.local += ' ';
                    atomData.locals[elementCount] += ' ';
                    elementLength += Buffer.byteLength(token, 'utf8');
                    updateResult(internals.diagnoses.cfwsFWS);
                    context.stack.push(context.now);
                    context.now = internals.components.contextFWS;
                    prevToken = token;
                    break;
                  // End of quoted string

                  case '"':
                    parseData.local += token;
                    atomData.locals[elementCount] += token;
                    elementLength += Buffer.byteLength(token, 'utf8');
                    context.prev = context.now;
                    context.now = context.stack.pop();
                    break;
                  // QTEXT

                  default:
                    // http://tools.ietf.org/html/rfc5322#section-3.2.4
                    //   qtext          =   %d33 /             ; Printable US-ASCII
                    //                      %d35-91 /          ;  characters not including
                    //                      %d93-126 /         ;  "\" or the quote character
                    //                      obs-qtext
                    //
                    //   obs-qtext      =   obs-NO-WS-CTL
                    //
                    //   obs-NO-WS-CTL  =   %d1-8 /            ; US-ASCII control
                    //                      %d11 /             ;  characters that do not
                    //                      %d12 /             ;  include the carriage
                    //                      %d14-31 /          ;  return, line feed, and
                    //                      %d127              ;  white space characters
                    charCode = token.codePointAt(0);

                    if (charCode !== 127 && internals.c1Controls(charCode) || charCode === 0 || charCode === 10) {
                      updateResult(internals.diagnoses.errExpectingQTEXT);
                    } else if (internals.c0Controls(charCode) || charCode === 127) {
                      updateResult(internals.diagnoses.deprecatedQTEXT);
                    }

                    parseData.local += token;
                    atomData.locals[elementCount] += token;
                    elementLength += Buffer.byteLength(token, 'utf8');
                } // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   If the string can be represented as a dot-atom (that is, it contains
                //   no characters other than atext characters or "." surrounded by atext
                //   characters), then the dot-atom form SHOULD be used and the quoted-
                //   string form SHOULD NOT be used.


                break;
              // Quoted pair

              case internals.components.contextQuotedPair:
                // http://tools.ietf.org/html/rfc5322#section-3.2.1
                //   quoted-pair     =   ("\" (VCHAR / WSP)) / obs-qp
                //
                //   VCHAR           =  %d33-126   ; visible (printing) characters
                //   WSP             =  SP / HTAB  ; white space
                //
                //   obs-qp          =   "\" (%d0 / obs-NO-WS-CTL / LF / CR)
                //
                //   obs-NO-WS-CTL   =   %d1-8 /   ; US-ASCII control
                //                       %d11 /    ;  characters that do not
                //                       %d12 /    ;  include the carriage
                //                       %d14-31 / ;  return, line feed, and
                //                       %d127     ;  white space characters
                //
                // i.e. obs-qp       =  "\" (%d0-8, %d10-31 / %d127)
                charCode = token.codePointAt(0);

                if (charCode !== 127 && internals.c1Controls(charCode)) {
                  // Fatal error
                  updateResult(internals.diagnoses.errExpectingQPair);
                } else if (charCode < 31 && charCode !== 9 || charCode === 127) {
                  // ' ' and '\t' are allowed
                  updateResult(internals.diagnoses.deprecatedQP);
                } // At this point we know where this qpair occurred so we could check to see if the character actually needed to be quoted at all.
                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                //   the sending system SHOULD transmit the form that uses the minimum quoting possible.


                context.prev = context.now; // End of qpair

                context.now = context.stack.pop();
                var escapeToken = '\\' + token;

                switch (context.now) {
                  case internals.components.contextComment:
                    break;

                  case internals.components.contextQuotedString:
                    parseData.local += escapeToken;
                    atomData.locals[elementCount] += escapeToken; // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash

                    elementLength += 2;
                    break;

                  case internals.components.literal:
                    parseData.domain += escapeToken;
                    atomData.domains[elementCount] += escapeToken; // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash

                    elementLength += 2;
                    break;
                  // $lab:coverage:off$

                  default:
                    throw new Error('quoted pair logic invoked in an invalid context: ' + context.now);
                  // $lab:coverage:on$
                }

                break;
              // Comment

              case internals.components.contextComment:
                // http://tools.ietf.org/html/rfc5322#section-3.2.2
                //   comment  = "(" *([FWS] ccontent) [FWS] ")"
                //
                //   ccontent = ctext / quoted-pair / comment
                switch (token) {
                  // Nested comment
                  case '(':
                    // Nested comments are ok
                    context.stack.push(context.now);
                    context.now = internals.components.contextComment;
                    break;
                  // End of comment

                  case ')':
                    context.prev = context.now;
                    context.now = context.stack.pop();
                    break;
                  // Quoted pair

                  case '\\':
                    context.stack.push(context.now);
                    context.now = internals.components.contextQuotedPair;
                    break;
                  // Folding white space

                  case '\r':
                    if (emailLength === ++i || email[i] !== '\n') {
                      // Fatal error
                      updateResult(internals.diagnoses.errCRNoLF);
                      break;
                    }

                  // Fallthrough

                  case ' ':
                  case '\t':
                    updateResult(internals.diagnoses.cfwsFWS);
                    context.stack.push(context.now);
                    context.now = internals.components.contextFWS;
                    prevToken = token;
                    break;
                  // CTEXT

                  default:
                    // http://tools.ietf.org/html/rfc5322#section-3.2.3
                    //   ctext         = %d33-39 /  ; Printable US-ASCII
                    //                   %d42-91 /  ;  characters not including
                    //                   %d93-126 / ;  "(", ")", or "\"
                    //                   obs-ctext
                    //
                    //   obs-ctext     = obs-NO-WS-CTL
                    //
                    //   obs-NO-WS-CTL = %d1-8 /    ; US-ASCII control
                    //                   %d11 /     ;  characters that do not
                    //                   %d12 /     ;  include the carriage
                    //                   %d14-31 /  ;  return, line feed, and
                    //                   %d127      ;  white space characters
                    charCode = token.codePointAt(0);

                    if (charCode === 0 || charCode === 10 || charCode !== 127 && internals.c1Controls(charCode)) {
                      // Fatal error
                      updateResult(internals.diagnoses.errExpectingCTEXT);
                      break;
                    } else if (internals.c0Controls(charCode) || charCode === 127) {
                      updateResult(internals.diagnoses.deprecatedCTEXT);
                    }

                }

                break;
              // Folding white space

              case internals.components.contextFWS:
                // http://tools.ietf.org/html/rfc5322#section-3.2.2
                //   FWS     =   ([*WSP CRLF] 1*WSP) /  obs-FWS
                //                                   ; Folding white space
                // But note the erratum:
                // http://www.rfc-editor.org/errata_search.php?rfc=5322&eid=1908:
                //   In the obsolete syntax, any amount of folding white space MAY be
                //   inserted where the obs-FWS rule is allowed.  This creates the
                //   possibility of having two consecutive "folds" in a line, and
                //   therefore the possibility that a line which makes up a folded header
                //   field could be composed entirely of white space.
                //
                //   obs-FWS =   1*([CRLF] WSP)
                if (prevToken === '\r') {
                  if (token === '\r') {
                    // Fatal error
                    updateResult(internals.diagnoses.errFWSCRLFx2);
                    break;
                  }

                  if (++crlfCount > 1) {
                    // Multiple folds => obsolete FWS
                    updateResult(internals.diagnoses.deprecatedFWS);
                  } else {
                    crlfCount = 1;
                  }
                }

                switch (token) {
                  case '\r':
                    if (emailLength === ++i || email[i] !== '\n') {
                      // Fatal error
                      updateResult(internals.diagnoses.errCRNoLF);
                    }

                    break;

                  case ' ':
                  case '\t':
                    break;

                  default:
                    if (prevToken === '\r') {
                      // Fatal error
                      updateResult(internals.diagnoses.errFWSCRLFEnd);
                    }

                    crlfCount = 0; // End of FWS

                    context.prev = context.now;
                    context.now = context.stack.pop(); // Look at this token again in the parent context

                    --i;
                }

                prevToken = token;
                break;
              // Unexpected context
              // $lab:coverage:off$

              default:
                throw new Error('unknown context: ' + context.now);
              // $lab:coverage:on$
            } // Primary state machine


            if (maxResult > internals.categories.rfc5322) {
              // Fatal error, no point continuing
              break;
            }
          } // Token loop
          // Check for errors


          if (maxResult < internals.categories.rfc5322) {
            var _punycodeLength = Punycode.encode(parseData.domain).length; // Fatal errors

            if (context.now === internals.components.contextQuotedString) {
              updateResult(internals.diagnoses.errUnclosedQuotedString);
            } else if (context.now === internals.components.contextQuotedPair) {
              updateResult(internals.diagnoses.errBackslashEnd);
            } else if (context.now === internals.components.contextComment) {
              updateResult(internals.diagnoses.errUnclosedComment);
            } else if (context.now === internals.components.literal) {
              updateResult(internals.diagnoses.errUnclosedDomainLiteral);
            } else if (token === '\r') {
              updateResult(internals.diagnoses.errFWSCRLFEnd);
            } else if (parseData.domain.length === 0) {
              updateResult(internals.diagnoses.errNoDomain);
            } else if (elementLength === 0) {
              updateResult(internals.diagnoses.errDotEnd);
            } else if (hyphenFlag) {
              updateResult(internals.diagnoses.errDomainHyphenEnd);
            } // Other errors
            else if (_punycodeLength > 255) {
                // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.2
                //   The maximum total length of a domain name or number is 255 octets.
                updateResult(internals.diagnoses.rfc5322DomainTooLong);
              } else if (Buffer.byteLength(parseData.local, 'utf8') + _punycodeLength +
              /* '@' */
              1 > 254) {
                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                //   Forward-path   = Path
                //
                //   Path           = "<" [ A-d-l ":" ] Mailbox ">"
                //
                // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.3
                //   The maximum total length of a reverse-path or forward-path is 256 octets (including the punctuation and element separators).
                //
                // Thus, even without (obsolete) routing information, the Mailbox can only be 254 characters long. This is confirmed by this verified
                // erratum to RFC 3696:
                //
                // http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690
                //   However, there is a restriction in RFC 2821 on the length of an address in MAIL and RCPT commands of 254 characters.  Since
                //   addresses that do not fit in those fields are not normally useful, the upper limit on address lengths should normally be considered
                //   to be 254.
                updateResult(internals.diagnoses.rfc5322TooLong);
              } else if (elementLength > 63) {
                // http://tools.ietf.org/html/rfc1035#section-2.3.4
                // labels   63 octets or less
                updateResult(internals.diagnoses.rfc5322LabelTooLong);
              } else if (options.minDomainAtoms && atomData.domains.length < options.minDomainAtoms) {
                updateResult(internals.diagnoses.errDomainTooShort);
              } else if (options.tldWhitelist || options.tldBlacklist) {
                var tldAtom = atomData.domains[elementCount];

                if (!internals.validDomain(tldAtom, options)) {
                  updateResult(internals.diagnoses.errUnknownTLD);
                }
              }
          } // Check for errors
          // Finish


          if (maxResult < internals.categories.dnsWarn) {
            // Per RFC 5321, domain atoms are limited to letter-digit-hyphen, so we only need to check code <= 57 to check for a digit
            var code = atomData.domains[elementCount].codePointAt(0);

            if (code <= 57) {
              updateResult(internals.diagnoses.rfc5321TLDNumeric);
            }
          }

          if (maxResult < threshold) {
            maxResult = internals.diagnoses.valid;
          }

          var finishResult = diagnose ? maxResult : maxResult < internals.defaultThreshold; // $lab:coverage:off$

          if (callback) {
            callback(finishResult);
          } // $lab:coverage:on$


          return finishResult;
        };

        exports.diagnoses = internals.validate.diagnoses = function () {
          var diag = {};
          var keys = Object.keys(internals.diagnoses);

          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            diag[key] = internals.diagnoses[key];
          }

          return diag;
        }();

        exports.normalize = internals.normalize;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(3).Buffer);
      /***/
    },
    /* 20 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules
      // Declare internals

      var internals = {};
      exports.errors = {
        root: 'value',
        key: '"{{!label}}" ',
        messages: {
          wrapArrays: true
        },
        any: {
          unknown: 'is not allowed',
          invalid: 'contains an invalid value',
          empty: 'is not allowed to be empty',
          required: 'is required',
          allowOnly: 'must be one of {{valids}}',
          "default": 'threw an error when running default method'
        },
        alternatives: {
          base: 'not matching any of the allowed alternatives',
          child: null
        },
        array: {
          base: 'must be an array',
          includes: 'at position {{pos}} does not match any of the allowed types',
          includesSingle: 'single value of "{{!label}}" does not match any of the allowed types',
          includesOne: 'at position {{pos}} fails because {{reason}}',
          includesOneSingle: 'single value of "{{!label}}" fails because {{reason}}',
          includesRequiredUnknowns: 'does not contain {{unknownMisses}} required value(s)',
          includesRequiredKnowns: 'does not contain {{knownMisses}}',
          includesRequiredBoth: 'does not contain {{knownMisses}} and {{unknownMisses}} other required value(s)',
          excludes: 'at position {{pos}} contains an excluded value',
          excludesSingle: 'single value of "{{!label}}" contains an excluded value',
          min: 'must contain at least {{limit}} items',
          max: 'must contain less than or equal to {{limit}} items',
          length: 'must contain {{limit}} items',
          ordered: 'at position {{pos}} fails because {{reason}}',
          orderedLength: 'at position {{pos}} fails because array must contain at most {{limit}} items',
          ref: 'references "{{ref}}" which is not a positive integer',
          sparse: 'must not be a sparse array',
          unique: 'position {{pos}} contains a duplicate value'
        },
        "boolean": {
          base: 'must be a boolean'
        },
        binary: {
          base: 'must be a buffer or a string',
          min: 'must be at least {{limit}} bytes',
          max: 'must be less than or equal to {{limit}} bytes',
          length: 'must be {{limit}} bytes'
        },
        date: {
          base: 'must be a number of milliseconds or valid date string',
          format: 'must be a string with one of the following formats {{format}}',
          strict: 'must be a valid date',
          min: 'must be larger than or equal to "{{limit}}"',
          max: 'must be less than or equal to "{{limit}}"',
          less: 'must be less than "{{limit}}"',
          greater: 'must be greater than "{{limit}}"',
          isoDate: 'must be a valid ISO 8601 date',
          timestamp: {
            javascript: 'must be a valid timestamp or number of milliseconds',
            unix: 'must be a valid timestamp or number of seconds'
          },
          ref: 'references "{{ref}}" which is not a date'
        },
        "function": {
          base: 'must be a Function',
          arity: 'must have an arity of {{n}}',
          minArity: 'must have an arity greater or equal to {{n}}',
          maxArity: 'must have an arity lesser or equal to {{n}}',
          ref: 'must be a Joi reference',
          "class": 'must be a class'
        },
        lazy: {
          base: '!!schema error: lazy schema must be set',
          schema: '!!schema error: lazy schema function must return a schema'
        },
        object: {
          base: 'must be an object',
          child: '!!child "{{!child}}" fails because {{reason}}',
          min: 'must have at least {{limit}} children',
          max: 'must have less than or equal to {{limit}} children',
          length: 'must have {{limit}} children',
          allowUnknown: '!!"{{!child}}" is not allowed',
          "with": '!!"{{mainWithLabel}}" missing required peer "{{peerWithLabel}}"',
          without: '!!"{{mainWithLabel}}" conflict with forbidden peer "{{peerWithLabel}}"',
          missing: 'must contain at least one of {{peersWithLabels}}',
          xor: 'contains a conflict between exclusive peers {{peersWithLabels}}',
          or: 'must contain at least one of {{peersWithLabels}}',
          and: 'contains {{presentWithLabels}} without its required peers {{missingWithLabels}}',
          nand: '!!"{{mainWithLabel}}" must not exist simultaneously with {{peersWithLabels}}',
          assert: '!!"{{ref}}" validation failed because "{{ref}}" failed to {{message}}',
          rename: {
            multiple: 'cannot rename child "{{from}}" because multiple renames are disabled and another key was already renamed to "{{to}}"',
            override: 'cannot rename child "{{from}}" because override is disabled and target "{{to}}" exists',
            regex: {
              multiple: 'cannot rename children {{from}} because multiple renames are disabled and another key was already renamed to "{{to}}"',
              override: 'cannot rename children {{from}} because override is disabled and target "{{to}}" exists'
            }
          },
          type: 'must be an instance of "{{type}}"',
          schema: 'must be a Joi instance'
        },
        number: {
          base: 'must be a number',
          min: 'must be larger than or equal to {{limit}}',
          max: 'must be less than or equal to {{limit}}',
          less: 'must be less than {{limit}}',
          greater: 'must be greater than {{limit}}',
          "float": 'must be a float or double',
          integer: 'must be an integer',
          negative: 'must be a negative number',
          positive: 'must be a positive number',
          precision: 'must have no more than {{limit}} decimal places',
          ref: 'references "{{ref}}" which is not a number',
          multiple: 'must be a multiple of {{multiple}}',
          port: 'must be a valid port'
        },
        string: {
          base: 'must be a string',
          min: 'length must be at least {{limit}} characters long',
          max: 'length must be less than or equal to {{limit}} characters long',
          length: 'length must be {{limit}} characters long',
          alphanum: 'must only contain alpha-numeric characters',
          token: 'must only contain alpha-numeric and underscore characters',
          regex: {
            base: 'with value "{{!value}}" fails to match the required pattern: {{pattern}}',
            name: 'with value "{{!value}}" fails to match the {{name}} pattern',
            invert: {
              base: 'with value "{{!value}}" matches the inverted pattern: {{pattern}}',
              name: 'with value "{{!value}}" matches the inverted {{name}} pattern'
            }
          },
          email: 'must be a valid email',
          uri: 'must be a valid uri',
          uriRelativeOnly: 'must be a valid relative uri',
          uriCustomScheme: 'must be a valid uri with a scheme matching the {{scheme}} pattern',
          isoDate: 'must be a valid ISO 8601 date',
          guid: 'must be a valid GUID',
          hex: 'must only contain hexadecimal characters',
          hexAlign: 'hex decoded representation must be byte aligned',
          base64: 'must be a valid base64 string',
          hostname: 'must be a valid hostname',
          normalize: 'must be unicode normalized in the {{form}} form',
          lowercase: 'must only contain lowercase characters',
          uppercase: 'must only contain uppercase characters',
          trim: 'must not have leading or trailing whitespace',
          creditCard: 'must be a credit card',
          ref: 'references "{{ref}}" which is not a number',
          ip: 'must be a valid ip address with a {{cidr}} CIDR',
          ipVersion: 'must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR'
        }
      };
      /***/
    },
    /* 21 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var Joi = __webpack_require__(8); // Declare internals


      var internals = {};
      exports.options = Joi.object({
        abortEarly: Joi["boolean"](),
        convert: Joi["boolean"](),
        allowUnknown: Joi["boolean"](),
        skipFunctions: Joi["boolean"](),
        stripUnknown: [Joi["boolean"](), Joi.object({
          arrays: Joi["boolean"](),
          objects: Joi["boolean"]()
        }).or('arrays', 'objects')],
        language: Joi.object(),
        presence: Joi.string().only('required', 'optional', 'forbidden', 'ignore'),
        raw: Joi["boolean"](),
        context: Joi.object(),
        strip: Joi["boolean"](),
        noDefaults: Joi["boolean"](),
        escapeHtml: Joi["boolean"]()
      }).strict();
      /***/
    },
    /* 22 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
      };

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (_typeof2(call) === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + _typeof2(superClass));
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Any = __webpack_require__(2);

      var Cast = __webpack_require__(4);

      var Ref = __webpack_require__(1);

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {};

      internals.fastSplice = function (arr, i) {
        var pos = i;

        while (pos < arr.length) {
          arr[pos++] = arr[pos];
        }

        --arr.length;
      };

      internals.Array = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'array';
          _this._inner.items = [];
          _this._inner.ordereds = [];
          _this._inner.inclusions = [];
          _this._inner.exclusions = [];
          _this._inner.requireds = [];
          _this._flags.sparse = false;
          return _this;
        }

        _class.prototype._base = function _base(value, state, options) {
          var result = {
            value: value
          };

          if (typeof value === 'string' && options.convert) {
            internals.safeParse(value, result);
          }

          var isArray = Array.isArray(result.value);
          var wasArray = isArray;

          if (options.convert && this._flags.single && !isArray) {
            result.value = [result.value];
            isArray = true;
          }

          if (!isArray) {
            result.errors = this.createError('array.base', null, state, options);
            return result;
          }

          if (this._inner.inclusions.length || this._inner.exclusions.length || this._inner.requireds.length || this._inner.ordereds.length || !this._flags.sparse) {
            // Clone the array so that we don't modify the original
            if (wasArray) {
              result.value = result.value.slice(0);
            }

            result.errors = this._checkItems.call(this, result.value, wasArray, state, options);

            if (result.errors && wasArray && options.convert && this._flags.single) {
              // Attempt a 2nd pass by putting the array inside one.
              var previousErrors = result.errors;
              result.value = [result.value];
              result.errors = this._checkItems.call(this, result.value, wasArray, state, options);

              if (result.errors) {
                // Restore previous errors and value since this didn't validate either.
                result.errors = previousErrors;
                result.value = result.value[0];
              }
            }
          }

          return result;
        };

        _class.prototype._checkItems = function _checkItems(items, wasArray, state, options) {
          var errors = [];
          var errored = void 0;

          var requireds = this._inner.requireds.slice();

          var ordereds = this._inner.ordereds.slice();

          var inclusions = this._inner.inclusions.concat(requireds);

          var il = items.length;

          for (var i = 0; i < il; ++i) {
            errored = false;
            var item = items[i];
            var isValid = false;
            var key = wasArray ? i : state.key;
            var path = wasArray ? state.path.concat(i) : state.path;
            var localState = {
              key: key,
              path: path,
              parent: state.parent,
              reference: state.reference
            };
            var res = void 0; // Sparse

            if (!this._flags.sparse && item === undefined) {
              errors.push(this.createError('array.sparse', null, {
                key: state.key,
                path: localState.path,
                pos: i
              }, options));

              if (options.abortEarly) {
                return errors;
              }

              ordereds.shift();
              continue;
            } // Exclusions


            for (var j = 0; j < this._inner.exclusions.length; ++j) {
              res = this._inner.exclusions[j]._validate(item, localState, {}); // Not passing options to use defaults

              if (!res.errors) {
                errors.push(this.createError(wasArray ? 'array.excludes' : 'array.excludesSingle', {
                  pos: i,
                  value: item
                }, {
                  key: state.key,
                  path: localState.path
                }, options));
                errored = true;

                if (options.abortEarly) {
                  return errors;
                }

                ordereds.shift();
                break;
              }
            }

            if (errored) {
              continue;
            } // Ordered


            if (this._inner.ordereds.length) {
              if (ordereds.length > 0) {
                var ordered = ordereds.shift();
                res = ordered._validate(item, localState, options);

                if (!res.errors) {
                  if (ordered._flags.strip) {
                    internals.fastSplice(items, i);
                    --i;
                    --il;
                  } else if (!this._flags.sparse && res.value === undefined) {
                    errors.push(this.createError('array.sparse', null, {
                      key: state.key,
                      path: localState.path,
                      pos: i
                    }, options));

                    if (options.abortEarly) {
                      return errors;
                    }

                    continue;
                  } else {
                    items[i] = res.value;
                  }
                } else {
                  errors.push(this.createError('array.ordered', {
                    pos: i,
                    reason: res.errors,
                    value: item
                  }, {
                    key: state.key,
                    path: localState.path
                  }, options));

                  if (options.abortEarly) {
                    return errors;
                  }
                }

                continue;
              } else if (!this._inner.items.length) {
                errors.push(this.createError('array.orderedLength', {
                  pos: i,
                  limit: this._inner.ordereds.length
                }, {
                  key: state.key,
                  path: localState.path
                }, options));

                if (options.abortEarly) {
                  return errors;
                }

                continue;
              }
            } // Requireds


            var requiredChecks = [];
            var jl = requireds.length;

            for (var _j = 0; _j < jl; ++_j) {
              res = requiredChecks[_j] = requireds[_j]._validate(item, localState, options);

              if (!res.errors) {
                items[i] = res.value;
                isValid = true;
                internals.fastSplice(requireds, _j);
                --_j;
                --jl;

                if (!this._flags.sparse && res.value === undefined) {
                  errors.push(this.createError('array.sparse', null, {
                    key: state.key,
                    path: localState.path,
                    pos: i
                  }, options));

                  if (options.abortEarly) {
                    return errors;
                  }
                }

                break;
              }
            }

            if (isValid) {
              continue;
            } // Inclusions


            var stripUnknown = options.stripUnknown ? options.stripUnknown === true ? true : !!options.stripUnknown.arrays : false;
            jl = inclusions.length;

            for (var _j2 = 0; _j2 < jl; ++_j2) {
              var inclusion = inclusions[_j2]; // Avoid re-running requireds that already didn't match in the previous loop

              var previousCheck = requireds.indexOf(inclusion);

              if (previousCheck !== -1) {
                res = requiredChecks[previousCheck];
              } else {
                res = inclusion._validate(item, localState, options);

                if (!res.errors) {
                  if (inclusion._flags.strip) {
                    internals.fastSplice(items, i);
                    --i;
                    --il;
                  } else if (!this._flags.sparse && res.value === undefined) {
                    errors.push(this.createError('array.sparse', null, {
                      key: state.key,
                      path: localState.path,
                      pos: i
                    }, options));
                    errored = true;
                  } else {
                    items[i] = res.value;
                  }

                  isValid = true;
                  break;
                }
              } // Return the actual error if only one inclusion defined


              if (jl === 1) {
                if (stripUnknown) {
                  internals.fastSplice(items, i);
                  --i;
                  --il;
                  isValid = true;
                  break;
                }

                errors.push(this.createError(wasArray ? 'array.includesOne' : 'array.includesOneSingle', {
                  pos: i,
                  reason: res.errors,
                  value: item
                }, {
                  key: state.key,
                  path: localState.path
                }, options));
                errored = true;

                if (options.abortEarly) {
                  return errors;
                }

                break;
              }
            }

            if (errored) {
              continue;
            }

            if (this._inner.inclusions.length && !isValid) {
              if (stripUnknown) {
                internals.fastSplice(items, i);
                --i;
                --il;
                continue;
              }

              errors.push(this.createError(wasArray ? 'array.includes' : 'array.includesSingle', {
                pos: i,
                value: item
              }, {
                key: state.key,
                path: localState.path
              }, options));

              if (options.abortEarly) {
                return errors;
              }
            }
          }

          if (requireds.length) {
            this._fillMissedErrors.call(this, errors, requireds, state, options);
          }

          if (ordereds.length) {
            this._fillOrderedErrors.call(this, errors, ordereds, state, options);
          }

          return errors.length ? errors : null;
        };

        _class.prototype.describe = function describe() {
          var description = Any.prototype.describe.call(this);

          if (this._inner.ordereds.length) {
            description.orderedItems = [];

            for (var i = 0; i < this._inner.ordereds.length; ++i) {
              description.orderedItems.push(this._inner.ordereds[i].describe());
            }
          }

          if (this._inner.items.length) {
            description.items = [];

            for (var _i = 0; _i < this._inner.items.length; ++_i) {
              description.items.push(this._inner.items[_i].describe());
            }
          }

          return description;
        };

        _class.prototype.items = function items() {
          var _this2 = this;

          var obj = this.clone();

          for (var _len = arguments.length, schemas = Array(_len), _key = 0; _key < _len; _key++) {
            schemas[_key] = arguments[_key];
          }

          Hoek.flatten(schemas).forEach(function (type, index) {
            try {
              type = Cast.schema(_this2._currentJoi, type);
            } catch (castErr) {
              if (castErr.hasOwnProperty('path')) {
                castErr.path = index + '.' + castErr.path;
              } else {
                castErr.path = index;
              }

              castErr.message = castErr.message + '(' + castErr.path + ')';
              throw castErr;
            }

            obj._inner.items.push(type);

            if (type._flags.presence === 'required') {
              obj._inner.requireds.push(type);
            } else if (type._flags.presence === 'forbidden') {
              obj._inner.exclusions.push(type.optional());
            } else {
              obj._inner.inclusions.push(type);
            }
          });
          return obj;
        };

        _class.prototype.ordered = function ordered() {
          var _this3 = this;

          var obj = this.clone();

          for (var _len2 = arguments.length, schemas = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            schemas[_key2] = arguments[_key2];
          }

          Hoek.flatten(schemas).forEach(function (type, index) {
            try {
              type = Cast.schema(_this3._currentJoi, type);
            } catch (castErr) {
              if (castErr.hasOwnProperty('path')) {
                castErr.path = index + '.' + castErr.path;
              } else {
                castErr.path = index;
              }

              castErr.message = castErr.message + '(' + castErr.path + ')';
              throw castErr;
            }

            obj._inner.ordereds.push(type);
          });
          return obj;
        };

        _class.prototype.min = function min(limit) {
          var isRef = Ref.isRef(limit);
          Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');
          return this._test('min', limit, function (value, state, options) {
            var compareTo = void 0;

            if (isRef) {
              compareTo = limit(state.reference || state.parent, options);

              if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {
                return this.createError('array.ref', {
                  ref: limit.key
                }, state, options);
              }
            } else {
              compareTo = limit;
            }

            if (value.length >= compareTo) {
              return value;
            }

            return this.createError('array.min', {
              limit: limit,
              value: value
            }, state, options);
          });
        };

        _class.prototype.max = function max(limit) {
          var isRef = Ref.isRef(limit);
          Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');
          return this._test('max', limit, function (value, state, options) {
            var compareTo = void 0;

            if (isRef) {
              compareTo = limit(state.reference || state.parent, options);

              if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {
                return this.createError('array.ref', {
                  ref: limit.key
                }, state, options);
              }
            } else {
              compareTo = limit;
            }

            if (value.length <= compareTo) {
              return value;
            }

            return this.createError('array.max', {
              limit: limit,
              value: value
            }, state, options);
          });
        };

        _class.prototype.length = function length(limit) {
          var isRef = Ref.isRef(limit);
          Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');
          return this._test('length', limit, function (value, state, options) {
            var compareTo = void 0;

            if (isRef) {
              compareTo = limit(state.reference || state.parent, options);

              if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {
                return this.createError('array.ref', {
                  ref: limit.key
                }, state, options);
              }
            } else {
              compareTo = limit;
            }

            if (value.length === compareTo) {
              return value;
            }

            return this.createError('array.length', {
              limit: limit,
              value: value
            }, state, options);
          });
        };

        _class.prototype.unique = function unique(comparator) {
          Hoek.assert(comparator === undefined || typeof comparator === 'function' || typeof comparator === 'string', 'comparator must be a function or a string');
          var settings = {};

          if (typeof comparator === 'string') {
            settings.path = comparator;
          } else if (typeof comparator === 'function') {
            settings.comparator = comparator;
          }

          return this._test('unique', settings, function (value, state, options) {
            var found = {
              string: Object.create(null),
              number: Object.create(null),
              undefined: Object.create(null),
              "boolean": Object.create(null),
              object: new Map(),
              "function": new Map(),
              custom: new Map()
            };
            var compare = settings.comparator || Hoek.deepEqual;

            for (var i = 0; i < value.length; ++i) {
              var item = settings.path ? Hoek.reach(value[i], settings.path) : value[i];
              var records = settings.comparator ? found.custom : found[typeof item === 'undefined' ? 'undefined' : _typeof(item)]; // All available types are supported, so it's not possible to reach 100% coverage without ignoring this line.
              // I still want to keep the test for future js versions with new types (eg. Symbol).

              if (
              /* $lab:coverage:off$ */
              records
              /* $lab:coverage:on$ */
              ) {
                  if (records instanceof Map) {
                    var entries = records.entries();
                    var current = void 0;

                    while (!(current = entries.next()).done) {
                      if (compare(current.value[0], item)) {
                        var localState = {
                          key: state.key,
                          path: state.path.concat(i),
                          parent: state.parent,
                          reference: state.reference
                        };
                        var context = {
                          pos: i,
                          value: value[i],
                          dupePos: current.value[1],
                          dupeValue: value[current.value[1]]
                        };

                        if (settings.path) {
                          context.path = settings.path;
                        }

                        return this.createError('array.unique', context, localState, options);
                      }
                    }

                    records.set(item, i);
                  } else {
                    if (records[item] !== undefined) {
                      var _localState = {
                        key: state.key,
                        path: state.path.concat(i),
                        parent: state.parent,
                        reference: state.reference
                      };
                      var _context = {
                        pos: i,
                        value: value[i],
                        dupePos: records[item],
                        dupeValue: value[records[item]]
                      };

                      if (settings.path) {
                        _context.path = settings.path;
                      }

                      return this.createError('array.unique', _context, _localState, options);
                    }

                    records[item] = i;
                  }
                }
            }

            return value;
          });
        };

        _class.prototype.sparse = function sparse(enabled) {
          var value = enabled === undefined ? true : !!enabled;

          if (this._flags.sparse === value) {
            return this;
          }

          var obj = this.clone();
          obj._flags.sparse = value;
          return obj;
        };

        _class.prototype.single = function single(enabled) {
          var value = enabled === undefined ? true : !!enabled;

          if (this._flags.single === value) {
            return this;
          }

          var obj = this.clone();
          obj._flags.single = value;
          return obj;
        };

        _class.prototype._fillMissedErrors = function _fillMissedErrors(errors, requireds, state, options) {
          var knownMisses = [];
          var unknownMisses = 0;

          for (var i = 0; i < requireds.length; ++i) {
            var label = requireds[i]._getLabel();

            if (label) {
              knownMisses.push(label);
            } else {
              ++unknownMisses;
            }
          }

          if (knownMisses.length) {
            if (unknownMisses) {
              errors.push(this.createError('array.includesRequiredBoth', {
                knownMisses: knownMisses,
                unknownMisses: unknownMisses
              }, {
                key: state.key,
                path: state.path
              }, options));
            } else {
              errors.push(this.createError('array.includesRequiredKnowns', {
                knownMisses: knownMisses
              }, {
                key: state.key,
                path: state.path
              }, options));
            }
          } else {
            errors.push(this.createError('array.includesRequiredUnknowns', {
              unknownMisses: unknownMisses
            }, {
              key: state.key,
              path: state.path
            }, options));
          }
        };

        _class.prototype._fillOrderedErrors = function _fillOrderedErrors(errors, ordereds, state, options) {
          var requiredOrdereds = [];

          for (var i = 0; i < ordereds.length; ++i) {
            var presence = Hoek.reach(ordereds[i], '_flags.presence');

            if (presence === 'required') {
              requiredOrdereds.push(ordereds[i]);
            }
          }

          if (requiredOrdereds.length) {
            this._fillMissedErrors.call(this, errors, requiredOrdereds, state, options);
          }
        };

        return _class;
      }(Any);

      internals.safeParse = function (value, result) {
        try {
          var converted = JSON.parse(value);

          if (Array.isArray(converted)) {
            result.value = converted;
          }
        } catch (e) {}
      };

      module.exports = new internals.Array();
      /***/
    },
    /* 23 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        // Load modules
        function _defaults(obj, defaults) {
          var keys = Object.getOwnPropertyNames(defaults);

          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = Object.getOwnPropertyDescriptor(defaults, key);

            if (value && value.configurable && obj[key] === undefined) {
              Object.defineProperty(obj, key, value);
            }
          }

          return obj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (_typeof2(call) === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + _typeof2(superClass));
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
        }

        var Any = __webpack_require__(2);

        var Hoek = __webpack_require__(0); // Declare internals


        var internals = {};

        internals.Binary = function (_Any) {
          _inherits(_class, _Any);

          function _class() {
            _classCallCheck(this, _class);

            var _this = _possibleConstructorReturn(this, _Any.call(this));

            _this._type = 'binary';
            return _this;
          }

          _class.prototype._base = function _base(value, state, options) {
            var result = {
              value: value
            };

            if (typeof value === 'string' && options.convert) {
              try {
                result.value = Buffer.from(value, this._flags.encoding);
              } catch (e) {}
            }

            result.errors = Buffer.isBuffer(result.value) ? null : this.createError('binary.base', null, state, options);
            return result;
          };

          _class.prototype.encoding = function encoding(_encoding) {
            Hoek.assert(Buffer.isEncoding(_encoding), 'Invalid encoding:', _encoding);

            if (this._flags.encoding === _encoding) {
              return this;
            }

            var obj = this.clone();
            obj._flags.encoding = _encoding;
            return obj;
          };

          _class.prototype.min = function min(limit) {
            Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');
            return this._test('min', limit, function (value, state, options) {
              if (value.length >= limit) {
                return value;
              }

              return this.createError('binary.min', {
                limit: limit,
                value: value
              }, state, options);
            });
          };

          _class.prototype.max = function max(limit) {
            Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');
            return this._test('max', limit, function (value, state, options) {
              if (value.length <= limit) {
                return value;
              }

              return this.createError('binary.max', {
                limit: limit,
                value: value
              }, state, options);
            });
          };

          _class.prototype.length = function length(limit) {
            Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');
            return this._test('length', limit, function (value, state, options) {
              if (value.length === limit) {
                return value;
              }

              return this.createError('binary.length', {
                limit: limit,
                value: value
              }, state, options);
            });
          };

          return _class;
        }(Any);

        module.exports = new internals.Binary();
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(3).Buffer);
      /***/
    },
    /* 24 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (_typeof2(call) === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + _typeof2(superClass));
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Any = __webpack_require__(2);

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {
        Set: __webpack_require__(9)
      };

      internals.Boolean = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'boolean';
          _this._flags.insensitive = true;
          _this._inner.truthySet = new internals.Set();
          _this._inner.falsySet = new internals.Set();
          return _this;
        }

        _class.prototype._base = function _base(value, state, options) {
          var result = {
            value: value
          };

          if (typeof value === 'string' && options.convert) {
            var normalized = this._flags.insensitive ? value.toLowerCase() : value;
            result.value = normalized === 'true' ? true : normalized === 'false' ? false : value;
          }

          if (typeof result.value !== 'boolean') {
            result.value = this._inner.truthySet.has(value, null, null, this._flags.insensitive) ? true : this._inner.falsySet.has(value, null, null, this._flags.insensitive) ? false : value;
          }

          result.errors = typeof result.value === 'boolean' ? null : this.createError('boolean.base', null, state, options);
          return result;
        };

        _class.prototype.truthy = function truthy() {
          for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
            values[_key] = arguments[_key];
          }

          var obj = this.clone();
          values = Hoek.flatten(values);

          for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            Hoek.assert(value !== undefined, 'Cannot call truthy with undefined');

            obj._inner.truthySet.add(value);
          }

          return obj;
        };

        _class.prototype.falsy = function falsy() {
          for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            values[_key2] = arguments[_key2];
          }

          var obj = this.clone();
          values = Hoek.flatten(values);

          for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            Hoek.assert(value !== undefined, 'Cannot call falsy with undefined');

            obj._inner.falsySet.add(value);
          }

          return obj;
        };

        _class.prototype.insensitive = function insensitive(enabled) {
          var insensitive = enabled === undefined ? true : !!enabled;

          if (this._flags.insensitive === insensitive) {
            return this;
          }

          var obj = this.clone();
          obj._flags.insensitive = insensitive;
          return obj;
        };

        _class.prototype.describe = function describe() {
          var description = Any.prototype.describe.call(this);
          description.truthy = [true].concat(this._inner.truthySet.values());
          description.falsy = [false].concat(this._inner.falsySet.values());
          return description;
        };

        return _class;
      }(Any);

      module.exports = new internals.Boolean();
      /***/
    },
    /* 25 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (_typeof2(call) === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + _typeof2(superClass));
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Hoek = __webpack_require__(0);

      var ObjectType = __webpack_require__(13);

      var Ref = __webpack_require__(1); // Declare internals


      var internals = {};

      internals.Func = function (_ObjectType$construct) {
        _inherits(_class, _ObjectType$construct);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _ObjectType$construct.call(this));

          _this._flags.func = true;
          return _this;
        }

        _class.prototype.arity = function arity(n) {
          Hoek.assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');
          return this._test('arity', n, function (value, state, options) {
            if (value.length === n) {
              return value;
            }

            return this.createError('function.arity', {
              n: n
            }, state, options);
          });
        };

        _class.prototype.minArity = function minArity(n) {
          Hoek.assert(Number.isSafeInteger(n) && n > 0, 'n must be a strict positive integer');
          return this._test('minArity', n, function (value, state, options) {
            if (value.length >= n) {
              return value;
            }

            return this.createError('function.minArity', {
              n: n
            }, state, options);
          });
        };

        _class.prototype.maxArity = function maxArity(n) {
          Hoek.assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');
          return this._test('maxArity', n, function (value, state, options) {
            if (value.length <= n) {
              return value;
            }

            return this.createError('function.maxArity', {
              n: n
            }, state, options);
          });
        };

        _class.prototype.ref = function ref() {
          return this._test('ref', null, function (value, state, options) {
            if (Ref.isRef(value)) {
              return value;
            }

            return this.createError('function.ref', null, state, options);
          });
        };

        _class.prototype["class"] = function _class() {
          return this._test('class', null, function (value, state, options) {
            if (/^\s*class\s/.test(value.toString())) {
              return value;
            }

            return this.createError('function.class', null, state, options);
          });
        };

        return _class;
      }(ObjectType.constructor);

      module.exports = new internals.Func();
      /***/
    },
    /* 26 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (_typeof2(call) === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + _typeof2(superClass));
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Any = __webpack_require__(2);

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {};

      internals.Lazy = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'lazy';
          return _this;
        }

        _class.prototype._base = function _base(value, state, options) {
          var result = {
            value: value
          };
          var lazy = this._flags.lazy;

          if (!lazy) {
            result.errors = this.createError('lazy.base', null, state, options);
            return result;
          }

          var schema = lazy();

          if (!(schema instanceof Any)) {
            result.errors = this.createError('lazy.schema', null, state, options);
            return result;
          }

          return schema._validate(value, state, options);
        };

        _class.prototype.set = function set(fn) {
          Hoek.assert(typeof fn === 'function', 'You must provide a function as first argument');
          var obj = this.clone();
          obj._flags.lazy = fn;
          return obj;
        };

        return _class;
      }(Any);

      module.exports = new internals.Lazy();
      /***/
    },
    /* 27 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (_typeof2(call) === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + _typeof2(superClass));
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Any = __webpack_require__(2);

      var Ref = __webpack_require__(1);

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {
        precisionRx: /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/
      };

      internals.Number = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'number';

          _this._invalids.add(Infinity);

          _this._invalids.add(-Infinity);

          return _this;
        }

        _class.prototype._base = function _base(value, state, options) {
          var result = {
            errors: null,
            value: value
          };

          if (typeof value === 'string' && options.convert) {
            var number = parseFloat(value);
            result.value = isNaN(number) || !isFinite(value) ? NaN : number;
          }

          var isNumber = typeof result.value === 'number' && !isNaN(result.value);

          if (options.convert && 'precision' in this._flags && isNumber) {
            // This is conceptually equivalent to using toFixed but it should be much faster
            var precision = Math.pow(10, this._flags.precision);
            result.value = Math.round(result.value * precision) / precision;
          }

          result.errors = isNumber ? null : this.createError('number.base', null, state, options);
          return result;
        };

        _class.prototype.multiple = function multiple(base) {
          var isRef = Ref.isRef(base);

          if (!isRef) {
            Hoek.assert(typeof base === 'number' && isFinite(base), 'multiple must be a number');
            Hoek.assert(base > 0, 'multiple must be greater than 0');
          }

          return this._test('multiple', base, function (value, state, options) {
            var divisor = isRef ? base(state.reference || state.parent, options) : base;

            if (isRef && (typeof divisor !== 'number' || !isFinite(divisor))) {
              return this.createError('number.ref', {
                ref: base.key
              }, state, options);
            }

            if (value % divisor === 0) {
              return value;
            }

            return this.createError('number.multiple', {
              multiple: base,
              value: value
            }, state, options);
          });
        };

        _class.prototype.integer = function integer() {
          return this._test('integer', undefined, function (value, state, options) {
            return Number.isSafeInteger(value) ? value : this.createError('number.integer', {
              value: value
            }, state, options);
          });
        };

        _class.prototype.negative = function negative() {
          return this._test('negative', undefined, function (value, state, options) {
            if (value < 0) {
              return value;
            }

            return this.createError('number.negative', {
              value: value
            }, state, options);
          });
        };

        _class.prototype.positive = function positive() {
          return this._test('positive', undefined, function (value, state, options) {
            if (value > 0) {
              return value;
            }

            return this.createError('number.positive', {
              value: value
            }, state, options);
          });
        };

        _class.prototype.precision = function precision(limit) {
          Hoek.assert(Number.isSafeInteger(limit), 'limit must be an integer');
          Hoek.assert(!('precision' in this._flags), 'precision already set');

          var obj = this._test('precision', limit, function (value, state, options) {
            var places = value.toString().match(internals.precisionRx);
            var decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);

            if (decimals <= limit) {
              return value;
            }

            return this.createError('number.precision', {
              limit: limit,
              value: value
            }, state, options);
          });

          obj._flags.precision = limit;
          return obj;
        };

        _class.prototype.port = function port() {
          return this._test('port', undefined, function (value, state, options) {
            if (!Number.isSafeInteger(value) || value < 0 || value > 65535) {
              return this.createError('number.port', {
                value: value
              }, state, options);
            }

            return value;
          });
        };

        return _class;
      }(Any);

      internals.compare = function (type, compare) {
        return function (limit) {
          var isRef = Ref.isRef(limit);
          var isNumber = typeof limit === 'number' && !isNaN(limit);
          Hoek.assert(isNumber || isRef, 'limit must be a number or reference');
          return this._test(type, limit, function (value, state, options) {
            var compareTo = void 0;

            if (isRef) {
              compareTo = limit(state.reference || state.parent, options);

              if (!(typeof compareTo === 'number' && !isNaN(compareTo))) {
                return this.createError('number.ref', {
                  ref: limit.key
                }, state, options);
              }
            } else {
              compareTo = limit;
            }

            if (compare(value, compareTo)) {
              return value;
            }

            return this.createError('number.' + type, {
              limit: compareTo,
              value: value
            }, state, options);
          });
        };
      };

      internals.Number.prototype.min = internals.compare('min', function (value, limit) {
        return value >= limit;
      });
      internals.Number.prototype.max = internals.compare('max', function (value, limit) {
        return value <= limit;
      });
      internals.Number.prototype.greater = internals.compare('greater', function (value, limit) {
        return value > limit;
      });
      internals.Number.prototype.less = internals.compare('less', function (value, limit) {
        return value < limit;
      });
      module.exports = new internals.Number();
      /***/
    },
    /* 28 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        // Load modules
        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
          return _typeof2(obj);
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
        };

        function _defaults(obj, defaults) {
          var keys = Object.getOwnPropertyNames(defaults);

          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = Object.getOwnPropertyDescriptor(defaults, key);

            if (value && value.configurable && obj[key] === undefined) {
              Object.defineProperty(obj, key, value);
            }
          }

          return obj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (_typeof2(call) === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + _typeof2(superClass));
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
        }

        var Net = __webpack_require__(15);

        var Hoek = __webpack_require__(0);

        var Isemail = void 0; // Loaded on demand

        var Any = __webpack_require__(2);

        var Ref = __webpack_require__(1);

        var JoiDate = __webpack_require__(12);

        var Uri = __webpack_require__(30);

        var Ip = __webpack_require__(29); // Declare internals


        var internals = {
          uriRegex: Uri.createUriRegex(),
          ipRegex: Ip.createIpRegex(['ipv4', 'ipv6', 'ipvfuture'], 'optional'),
          guidBrackets: {
            '{': '}',
            '[': ']',
            '(': ')',
            '': ''
          },
          guidVersions: {
            uuidv1: '1',
            uuidv2: '2',
            uuidv3: '3',
            uuidv4: '4',
            uuidv5: '5'
          },
          cidrPresences: ['required', 'optional', 'forbidden'],
          normalizationForms: ['NFC', 'NFD', 'NFKC', 'NFKD']
        };

        internals.String = function (_Any) {
          _inherits(_class, _Any);

          function _class() {
            _classCallCheck(this, _class);

            var _this = _possibleConstructorReturn(this, _Any.call(this));

            _this._type = 'string';

            _this._invalids.add('');

            return _this;
          }

          _class.prototype._base = function _base(value, state, options) {
            if (typeof value === 'string' && options.convert) {
              if (this._flags.normalize) {
                value = value.normalize(this._flags.normalize);
              }

              if (this._flags["case"]) {
                value = this._flags["case"] === 'upper' ? value.toLocaleUpperCase() : value.toLocaleLowerCase();
              }

              if (this._flags.trim) {
                value = value.trim();
              }

              if (this._inner.replacements) {
                for (var i = 0; i < this._inner.replacements.length; ++i) {
                  var replacement = this._inner.replacements[i];
                  value = value.replace(replacement.pattern, replacement.replacement);
                }
              }

              if (this._flags.truncate) {
                for (var _i = 0; _i < this._tests.length; ++_i) {
                  var test = this._tests[_i];

                  if (test.name === 'max') {
                    value = value.slice(0, test.arg);
                    break;
                  }
                }
              }

              if (this._flags.byteAligned && value.length % 2 !== 0) {
                value = '0' + value;
              }
            }

            return {
              value: value,
              errors: typeof value === 'string' ? null : this.createError('string.base', {
                value: value
              }, state, options)
            };
          };

          _class.prototype.insensitive = function insensitive() {
            if (this._flags.insensitive) {
              return this;
            }

            var obj = this.clone();
            obj._flags.insensitive = true;
            return obj;
          };

          _class.prototype.creditCard = function creditCard() {
            return this._test('creditCard', undefined, function (value, state, options) {
              var i = value.length;
              var sum = 0;
              var mul = 1;

              while (i--) {
                var _char = value.charAt(i) * mul;

                sum = sum + (_char - (_char > 9) * 9);
                mul = mul ^ 3;
              }

              var check = sum % 10 === 0 && sum > 0;
              return check ? value : this.createError('string.creditCard', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.regex = function regex(pattern, patternOptions) {
            Hoek.assert(pattern instanceof RegExp, 'pattern must be a RegExp');
            var patternObject = {
              pattern: new RegExp(pattern.source, pattern.ignoreCase ? 'i' : undefined) // Future version should break this and forbid unsupported regex flags

            };

            if (typeof patternOptions === 'string') {
              patternObject.name = patternOptions;
            } else if ((typeof patternOptions === 'undefined' ? 'undefined' : _typeof(patternOptions)) === 'object') {
              patternObject.invert = !!patternOptions.invert;

              if (patternOptions.name) {
                patternObject.name = patternOptions.name;
              }
            }

            var errorCode = ['string.regex', patternObject.invert ? '.invert' : '', patternObject.name ? '.name' : '.base'].join('');
            return this._test('regex', patternObject, function (value, state, options) {
              var patternMatch = patternObject.pattern.test(value);

              if (patternMatch ^ patternObject.invert) {
                return value;
              }

              return this.createError(errorCode, {
                name: patternObject.name,
                pattern: patternObject.pattern,
                value: value
              }, state, options);
            });
          };

          _class.prototype.alphanum = function alphanum() {
            return this._test('alphanum', undefined, function (value, state, options) {
              if (/^[a-zA-Z0-9]+$/.test(value)) {
                return value;
              }

              return this.createError('string.alphanum', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.token = function token() {
            return this._test('token', undefined, function (value, state, options) {
              if (/^\w+$/.test(value)) {
                return value;
              }

              return this.createError('string.token', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.email = function email(isEmailOptions) {
            if (isEmailOptions) {
              Hoek.assert((typeof isEmailOptions === 'undefined' ? 'undefined' : _typeof(isEmailOptions)) === 'object', 'email options must be an object');
              Hoek.assert(typeof isEmailOptions.checkDNS === 'undefined', 'checkDNS option is not supported');
              Hoek.assert(typeof isEmailOptions.tldWhitelist === 'undefined' || _typeof(isEmailOptions.tldWhitelist) === 'object', 'tldWhitelist must be an array or object');
              Hoek.assert(typeof isEmailOptions.minDomainAtoms === 'undefined' || Number.isSafeInteger(isEmailOptions.minDomainAtoms) && isEmailOptions.minDomainAtoms > 0, 'minDomainAtoms must be a positive integer');
              Hoek.assert(typeof isEmailOptions.errorLevel === 'undefined' || typeof isEmailOptions.errorLevel === 'boolean' || Number.isSafeInteger(isEmailOptions.errorLevel) && isEmailOptions.errorLevel >= 0, 'errorLevel must be a non-negative integer or boolean');
            }

            return this._test('email', isEmailOptions, function (value, state, options) {
              Isemail = Isemail || __webpack_require__(19);

              try {
                var result = Isemail.validate(value, isEmailOptions);

                if (result === true || result === 0) {
                  return value;
                }
              } catch (e) {}

              return this.createError('string.email', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.ip = function ip() {
            var ipOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var regex = internals.ipRegex;
            Hoek.assert((typeof ipOptions === 'undefined' ? 'undefined' : _typeof(ipOptions)) === 'object', 'options must be an object');

            if (ipOptions.cidr) {
              Hoek.assert(typeof ipOptions.cidr === 'string', 'cidr must be a string');
              ipOptions.cidr = ipOptions.cidr.toLowerCase();
              Hoek.assert(Hoek.contain(internals.cidrPresences, ipOptions.cidr), 'cidr must be one of ' + internals.cidrPresences.join(', ')); // If we only received a `cidr` setting, create a regex for it. But we don't need to create one if `cidr` is "optional" since that is the default

              if (!ipOptions.version && ipOptions.cidr !== 'optional') {
                regex = Ip.createIpRegex(['ipv4', 'ipv6', 'ipvfuture'], ipOptions.cidr);
              }
            } else {
              // Set our default cidr strategy
              ipOptions.cidr = 'optional';
            }

            var versions = void 0;

            if (ipOptions.version) {
              if (!Array.isArray(ipOptions.version)) {
                ipOptions.version = [ipOptions.version];
              }

              Hoek.assert(ipOptions.version.length >= 1, 'version must have at least 1 version specified');
              versions = [];

              for (var i = 0; i < ipOptions.version.length; ++i) {
                var version = ipOptions.version[i];
                Hoek.assert(typeof version === 'string', 'version at position ' + i + ' must be a string');
                version = version.toLowerCase();
                Hoek.assert(Ip.versions[version], 'version at position ' + i + ' must be one of ' + Object.keys(Ip.versions).join(', '));
                versions.push(version);
              } // Make sure we have a set of versions


              versions = Hoek.unique(versions);
              regex = Ip.createIpRegex(versions, ipOptions.cidr);
            }

            return this._test('ip', ipOptions, function (value, state, options) {
              if (regex.test(value)) {
                return value;
              }

              if (versions) {
                return this.createError('string.ipVersion', {
                  value: value,
                  cidr: ipOptions.cidr,
                  version: versions
                }, state, options);
              }

              return this.createError('string.ip', {
                value: value,
                cidr: ipOptions.cidr
              }, state, options);
            });
          };

          _class.prototype.uri = function uri(uriOptions) {
            var customScheme = '';
            var allowRelative = false;
            var relativeOnly = false;
            var regex = internals.uriRegex;

            if (uriOptions) {
              Hoek.assert((typeof uriOptions === 'undefined' ? 'undefined' : _typeof(uriOptions)) === 'object', 'options must be an object');

              if (uriOptions.scheme) {
                Hoek.assert(uriOptions.scheme instanceof RegExp || typeof uriOptions.scheme === 'string' || Array.isArray(uriOptions.scheme), 'scheme must be a RegExp, String, or Array');

                if (!Array.isArray(uriOptions.scheme)) {
                  uriOptions.scheme = [uriOptions.scheme];
                }

                Hoek.assert(uriOptions.scheme.length >= 1, 'scheme must have at least 1 scheme specified'); // Flatten the array into a string to be used to match the schemes.

                for (var i = 0; i < uriOptions.scheme.length; ++i) {
                  var scheme = uriOptions.scheme[i];
                  Hoek.assert(scheme instanceof RegExp || typeof scheme === 'string', 'scheme at position ' + i + ' must be a RegExp or String'); // Add OR separators if a value already exists

                  customScheme = customScheme + (customScheme ? '|' : ''); // If someone wants to match HTTP or HTTPS for example then we need to support both RegExp and String so we don't escape their pattern unknowingly.

                  if (scheme instanceof RegExp) {
                    customScheme = customScheme + scheme.source;
                  } else {
                    Hoek.assert(/[a-zA-Z][a-zA-Z0-9+-\.]*/.test(scheme), 'scheme at position ' + i + ' must be a valid scheme');
                    customScheme = customScheme + Hoek.escapeRegex(scheme);
                  }
                }
              }

              if (uriOptions.allowRelative) {
                allowRelative = true;
              }

              if (uriOptions.relativeOnly) {
                relativeOnly = true;
              }
            }

            if (customScheme || allowRelative || relativeOnly) {
              regex = Uri.createUriRegex(customScheme, allowRelative, relativeOnly);
            }

            return this._test('uri', uriOptions, function (value, state, options) {
              if (regex.test(value)) {
                return value;
              }

              if (relativeOnly) {
                return this.createError('string.uriRelativeOnly', {
                  value: value
                }, state, options);
              }

              if (customScheme) {
                return this.createError('string.uriCustomScheme', {
                  scheme: customScheme,
                  value: value
                }, state, options);
              }

              return this.createError('string.uri', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.isoDate = function isoDate() {
            return this._test('isoDate', undefined, function (value, state, options) {
              if (JoiDate._isIsoDate(value)) {
                if (!options.convert) {
                  return value;
                }

                var d = new Date(value);

                if (!isNaN(d.getTime())) {
                  return d.toISOString();
                }
              }

              return this.createError('string.isoDate', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.guid = function guid(guidOptions) {
            var versionNumbers = '';

            if (guidOptions && guidOptions.version) {
              if (!Array.isArray(guidOptions.version)) {
                guidOptions.version = [guidOptions.version];
              }

              Hoek.assert(guidOptions.version.length >= 1, 'version must have at least 1 valid version specified');
              var versions = new Set();

              for (var i = 0; i < guidOptions.version.length; ++i) {
                var version = guidOptions.version[i];
                Hoek.assert(typeof version === 'string', 'version at position ' + i + ' must be a string');
                version = version.toLowerCase();
                var versionNumber = internals.guidVersions[version];
                Hoek.assert(versionNumber, 'version at position ' + i + ' must be one of ' + Object.keys(internals.guidVersions).join(', '));
                Hoek.assert(!versions.has(versionNumber), 'version at position ' + i + ' must not be a duplicate.');
                versionNumbers += versionNumber;
                versions.add(versionNumber);
              }
            }

            var guidRegex = new RegExp('^([\\[{\\(]?)[0-9A-F]{8}([:-]?)[0-9A-F]{4}\\2?[' + (versionNumbers || '0-9A-F') + '][0-9A-F]{3}\\2?[' + (versionNumbers ? '89AB' : '0-9A-F') + '][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$', 'i');
            return this._test('guid', guidOptions, function (value, state, options) {
              var results = guidRegex.exec(value);

              if (!results) {
                return this.createError('string.guid', {
                  value: value
                }, state, options);
              } // Matching braces


              if (internals.guidBrackets[results[1]] !== results[results.length - 1]) {
                return this.createError('string.guid', {
                  value: value
                }, state, options);
              }

              return value;
            });
          };

          _class.prototype.hex = function hex() {
            var hexOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            Hoek.assert((typeof hexOptions === 'undefined' ? 'undefined' : _typeof(hexOptions)) === 'object', 'hex options must be an object');
            Hoek.assert(typeof hexOptions.byteAligned === 'undefined' || typeof hexOptions.byteAligned === 'boolean', 'byteAligned must be boolean');
            var byteAligned = hexOptions.byteAligned === true;
            var regex = /^[a-f0-9]+$/i;

            var obj = this._test('hex', regex, function (value, state, options) {
              if (regex.test(value)) {
                if (byteAligned && value.length % 2 !== 0) {
                  return this.createError('string.hexAlign', {
                    value: value
                  }, state, options);
                }

                return value;
              }

              return this.createError('string.hex', {
                value: value
              }, state, options);
            });

            if (byteAligned) {
              obj._flags.byteAligned = true;
            }

            return obj;
          };

          _class.prototype.base64 = function base64() {
            var base64Options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // Validation.

            Hoek.assert((typeof base64Options === 'undefined' ? 'undefined' : _typeof(base64Options)) === 'object', 'base64 options must be an object');
            Hoek.assert(typeof base64Options.paddingRequired === 'undefined' || typeof base64Options.paddingRequired === 'boolean', 'paddingRequired must be boolean'); // Determine if padding is required.

            var paddingRequired = base64Options.paddingRequired === false ? base64Options.paddingRequired : base64Options.paddingRequired || true; // Set validation based on preference.

            var regex = paddingRequired ? // Padding is required.
            /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/ // Padding is optional.
            : /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/;
            return this._test('base64', regex, function (value, state, options) {
              if (regex.test(value)) {
                return value;
              }

              return this.createError('string.base64', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.hostname = function hostname() {
            var regex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;
            return this._test('hostname', undefined, function (value, state, options) {
              if (value.length <= 255 && regex.test(value) || Net.isIPv6(value)) {
                return value;
              }

              return this.createError('string.hostname', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.normalize = function normalize() {
            var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'NFC';
            Hoek.assert(Hoek.contain(internals.normalizationForms, form), 'normalization form must be one of ' + internals.normalizationForms.join(', '));

            var obj = this._test('normalize', form, function (value, state, options) {
              if (options.convert || value === value.normalize(form)) {
                return value;
              }

              return this.createError('string.normalize', {
                value: value,
                form: form
              }, state, options);
            });

            obj._flags.normalize = form;
            return obj;
          };

          _class.prototype.lowercase = function lowercase() {
            var obj = this._test('lowercase', undefined, function (value, state, options) {
              if (options.convert || value === value.toLocaleLowerCase()) {
                return value;
              }

              return this.createError('string.lowercase', {
                value: value
              }, state, options);
            });

            obj._flags["case"] = 'lower';
            return obj;
          };

          _class.prototype.uppercase = function uppercase() {
            var obj = this._test('uppercase', undefined, function (value, state, options) {
              if (options.convert || value === value.toLocaleUpperCase()) {
                return value;
              }

              return this.createError('string.uppercase', {
                value: value
              }, state, options);
            });

            obj._flags["case"] = 'upper';
            return obj;
          };

          _class.prototype.trim = function trim() {
            var obj = this._test('trim', undefined, function (value, state, options) {
              if (options.convert || value === value.trim()) {
                return value;
              }

              return this.createError('string.trim', {
                value: value
              }, state, options);
            });

            obj._flags.trim = true;
            return obj;
          };

          _class.prototype.replace = function replace(pattern, replacement) {
            if (typeof pattern === 'string') {
              pattern = new RegExp(Hoek.escapeRegex(pattern), 'g');
            }

            Hoek.assert(pattern instanceof RegExp, 'pattern must be a RegExp');
            Hoek.assert(typeof replacement === 'string', 'replacement must be a String'); // This can not be considere a test like trim, we can't "reject"
            // anything from this rule, so just clone the current object

            var obj = this.clone();

            if (!obj._inner.replacements) {
              obj._inner.replacements = [];
            }

            obj._inner.replacements.push({
              pattern: pattern,
              replacement: replacement
            });

            return obj;
          };

          _class.prototype.truncate = function truncate(enabled) {
            var value = enabled === undefined ? true : !!enabled;

            if (this._flags.truncate === value) {
              return this;
            }

            var obj = this.clone();
            obj._flags.truncate = value;
            return obj;
          };

          return _class;
        }(Any);

        internals.compare = function (type, compare) {
          return function (limit, encoding) {
            var isRef = Ref.isRef(limit);
            Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');
            Hoek.assert(!encoding || Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);
            return this._test(type, limit, function (value, state, options) {
              var compareTo = void 0;

              if (isRef) {
                compareTo = limit(state.reference || state.parent, options);

                if (!Number.isSafeInteger(compareTo)) {
                  return this.createError('string.ref', {
                    ref: limit.key
                  }, state, options);
                }
              } else {
                compareTo = limit;
              }

              if (compare(value, compareTo, encoding)) {
                return value;
              }

              return this.createError('string.' + type, {
                limit: compareTo,
                value: value,
                encoding: encoding
              }, state, options);
            });
          };
        };

        internals.String.prototype.min = internals.compare('min', function (value, limit, encoding) {
          var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
          return length >= limit;
        });
        internals.String.prototype.max = internals.compare('max', function (value, limit, encoding) {
          var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
          return length <= limit;
        });
        internals.String.prototype.length = internals.compare('length', function (value, limit, encoding) {
          var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
          return length === limit;
        }); // Aliases

        internals.String.prototype.uuid = internals.String.prototype.guid;
        module.exports = new internals.String();
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(3).Buffer);
      /***/
    },
    /* 29 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var RFC3986 = __webpack_require__(14); // Declare internals


      var internals = {
        Ip: {
          cidrs: {
            ipv4: {
              required: '\\/(?:' + RFC3986.ipv4Cidr + ')',
              optional: '(?:\\/(?:' + RFC3986.ipv4Cidr + '))?',
              forbidden: ''
            },
            ipv6: {
              required: '\\/' + RFC3986.ipv6Cidr,
              optional: '(?:\\/' + RFC3986.ipv6Cidr + ')?',
              forbidden: ''
            },
            ipvfuture: {
              required: '\\/' + RFC3986.ipv6Cidr,
              optional: '(?:\\/' + RFC3986.ipv6Cidr + ')?',
              forbidden: ''
            }
          },
          versions: {
            ipv4: RFC3986.IPv4address,
            ipv6: RFC3986.IPv6address,
            ipvfuture: RFC3986.IPvFuture
          }
        }
      };

      internals.Ip.createIpRegex = function (versions, cidr) {
        var regex = void 0;

        for (var i = 0; i < versions.length; ++i) {
          var version = versions[i];

          if (!regex) {
            regex = '^(?:' + internals.Ip.versions[version] + internals.Ip.cidrs[version][cidr];
          } else {
            regex += '|' + internals.Ip.versions[version] + internals.Ip.cidrs[version][cidr];
          }
        }

        return new RegExp(regex + ')$');
      };

      module.exports = internals.Ip;
      /***/
    },
    /* 30 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load Modules

      var RFC3986 = __webpack_require__(14); // Declare internals


      var internals = {
        Uri: {
          createUriRegex: function createUriRegex(optionalScheme, allowRelative, relativeOnly) {
            var scheme = RFC3986.scheme;
            var prefix = void 0;

            if (relativeOnly) {
              prefix = '(?:' + RFC3986.relativeRef + ')';
            } else {
              // If we were passed a scheme, use it instead of the generic one
              if (optionalScheme) {
                // Have to put this in a non-capturing group to handle the OR statements
                scheme = '(?:' + optionalScheme + ')';
              }

              var withScheme = '(?:' + scheme + ':' + RFC3986.hierPart + ')';
              prefix = allowRelative ? '(?:' + withScheme + '|' + RFC3986.relativeRef + ')' : withScheme;
            }
            /**
             * URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
             *
             * OR
             *
             * relative-ref = relative-part [ "?" query ] [ "#" fragment ]
             */


            return new RegExp('^' + prefix + '(?:\\?' + RFC3986.query + ')?' + '(?:#' + RFC3986.fragment + ')?$');
          }
        }
      };
      module.exports = internals.Uri;
      /***/
    },
    /* 31 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {};

      exports = module.exports = internals.Topo = function () {
        this._items = [];
        this.nodes = [];
      };

      internals.Topo.prototype.add = function (nodes, options) {
        var _this = this;

        options = options || {}; // Validate rules

        var before = [].concat(options.before || []);
        var after = [].concat(options.after || []);
        var group = options.group || '?';
        var sort = options.sort || 0; // Used for merging only

        Hoek.assert(before.indexOf(group) === -1, 'Item cannot come before itself:', group);
        Hoek.assert(before.indexOf('?') === -1, 'Item cannot come before unassociated items');
        Hoek.assert(after.indexOf(group) === -1, 'Item cannot come after itself:', group);
        Hoek.assert(after.indexOf('?') === -1, 'Item cannot come after unassociated items');
        [].concat(nodes).forEach(function (node, i) {
          var item = {
            seq: _this._items.length,
            sort: sort,
            before: before,
            after: after,
            group: group,
            node: node
          };

          _this._items.push(item);
        }); // Insert event

        var error = this._sort();

        Hoek.assert(!error, 'item', group !== '?' ? 'added into group ' + group : '', 'created a dependencies error');
        return this.nodes;
      };

      internals.Topo.prototype.merge = function (others) {
        others = [].concat(others);

        for (var i = 0; i < others.length; ++i) {
          var other = others[i];

          if (other) {
            for (var j = 0; j < other._items.length; ++j) {
              var item = Hoek.shallow(other._items[j]);

              this._items.push(item);
            }
          }
        } // Sort items


        this._items.sort(internals.mergeSort);

        for (var _i = 0; _i < this._items.length; ++_i) {
          this._items[_i].seq = _i;
        }

        var error = this._sort();

        Hoek.assert(!error, 'merge created a dependencies error');
        return this.nodes;
      };

      internals.mergeSort = function (a, b) {
        return a.sort === b.sort ? 0 : a.sort < b.sort ? -1 : 1;
      };

      internals.Topo.prototype._sort = function () {
        // Construct graph
        var graph = {};
        var graphAfters = Object.create(null); // A prototype can bungle lookups w/ false positives

        var groups = Object.create(null);

        for (var i = 0; i < this._items.length; ++i) {
          var item = this._items[i];
          var seq = item.seq; // Unique across all items

          var group = item.group; // Determine Groups

          groups[group] = groups[group] || [];
          groups[group].push(seq); // Build intermediary graph using 'before'

          graph[seq] = item.before; // Build second intermediary graph with 'after'

          var after = item.after;

          for (var j = 0; j < after.length; ++j) {
            graphAfters[after[j]] = (graphAfters[after[j]] || []).concat(seq);
          }
        } // Expand intermediary graph


        var graphNodes = Object.keys(graph);

        for (var _i2 = 0; _i2 < graphNodes.length; ++_i2) {
          var node = graphNodes[_i2];
          var expandedGroups = [];
          var graphNodeItems = Object.keys(graph[node]);

          for (var _j = 0; _j < graphNodeItems.length; ++_j) {
            var _group = graph[node][graphNodeItems[_j]];
            groups[_group] = groups[_group] || [];

            for (var k = 0; k < groups[_group].length; ++k) {
              expandedGroups.push(groups[_group][k]);
            }
          }

          graph[node] = expandedGroups;
        } // Merge intermediary graph using graphAfters into final graph


        var afterNodes = Object.keys(graphAfters);

        for (var _i3 = 0; _i3 < afterNodes.length; ++_i3) {
          var _group2 = afterNodes[_i3];

          if (groups[_group2]) {
            for (var _j2 = 0; _j2 < groups[_group2].length; ++_j2) {
              var _node = groups[_group2][_j2];
              graph[_node] = graph[_node].concat(graphAfters[_group2]);
            }
          }
        } // Compile ancestors


        var children = void 0;
        var ancestors = {};
        graphNodes = Object.keys(graph);

        for (var _i4 = 0; _i4 < graphNodes.length; ++_i4) {
          var _node2 = graphNodes[_i4];
          children = graph[_node2];

          for (var _j3 = 0; _j3 < children.length; ++_j3) {
            ancestors[children[_j3]] = (ancestors[children[_j3]] || []).concat(_node2);
          }
        } // Topo sort


        var visited = {};
        var sorted = [];

        for (var _i5 = 0; _i5 < this._items.length; ++_i5) {
          // Really looping thru item.seq values out of order
          var next = _i5;

          if (ancestors[_i5]) {
            next = null;

            for (var _j4 = 0; _j4 < this._items.length; ++_j4) {
              // As above, these are item.seq values
              if (visited[_j4] === true) {
                continue;
              }

              if (!ancestors[_j4]) {
                ancestors[_j4] = [];
              }

              var shouldSeeCount = ancestors[_j4].length;
              var seenCount = 0;

              for (var _k = 0; _k < shouldSeeCount; ++_k) {
                if (visited[ancestors[_j4][_k]]) {
                  ++seenCount;
                }
              }

              if (seenCount === shouldSeeCount) {
                next = _j4;
                break;
              }
            }
          }

          if (next !== null) {
            visited[next] = true;
            sorted.push(next);
          }
        }

        if (sorted.length !== this._items.length) {
          return new Error('Invalid dependencies');
        }

        var seqIndex = {};

        for (var _i6 = 0; _i6 < this._items.length; ++_i6) {
          var _item = this._items[_i6];
          seqIndex[_item.seq] = _item;
        }

        var sortedNodes = [];
        this._items = sorted.map(function (value) {
          var sortedItem = seqIndex[value];
          sortedNodes.push(sortedItem.node);
          return sortedItem;
        });
        this.nodes = sortedNodes;
      };
      /***/

    },
    /* 32 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var Joi = __webpack_require__(8);

      module.exports = Joi;
      /***/
    },
    /* 33 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;

      function placeHoldersCount(b64) {
        var len = b64.length;

        if (len % 4 > 0) {
          throw new Error('Invalid string. Length must be a multiple of 4');
        } // the number of equal signs (place holders)
        // if there are two placeholders, than the two characters before it
        // represent one byte
        // if there is only one, then the three characters before it represent 2 bytes
        // this is just a cheap hack to not do indexOf twice


        return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
      }

      function byteLength(b64) {
        // base64 is 4/3 + up to two characters of the original data
        return b64.length * 3 / 4 - placeHoldersCount(b64);
      }

      function toByteArray(b64) {
        var i, l, tmp, placeHolders, arr;
        var len = b64.length;
        placeHolders = placeHoldersCount(b64);
        arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

        l = placeHolders > 0 ? len - 4 : len;
        var L = 0;

        for (i = 0; i < l; i += 4) {
          tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
          arr[L++] = tmp >> 16 & 0xFF;
          arr[L++] = tmp >> 8 & 0xFF;
          arr[L++] = tmp & 0xFF;
        }

        if (placeHolders === 2) {
          tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
          arr[L++] = tmp & 0xFF;
        } else if (placeHolders === 1) {
          tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
          arr[L++] = tmp >> 8 & 0xFF;
          arr[L++] = tmp & 0xFF;
        }

        return arr;
      }

      function tripletToBase64(num) {
        return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
      }

      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];

        for (var i = start; i < end; i += 3) {
          tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
          output.push(tripletToBase64(tmp));
        }

        return output.join('');
      }

      function fromByteArray(uint8) {
        var tmp;
        var len = uint8.length;
        var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

        var output = '';
        var parts = [];
        var maxChunkLength = 16383; // must be multiple of 3
        // go through the array every three bytes, we'll deal with trailing stuff later

        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
          parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
        } // pad the end with zeros, but make sure to not forget the extra bytes


        if (extraBytes === 1) {
          tmp = uint8[len - 1];
          output += lookup[tmp >> 2];
          output += lookup[tmp << 4 & 0x3F];
          output += '==';
        } else if (extraBytes === 2) {
          tmp = (uint8[len - 2] << 8) + uint8[len - 1];
          output += lookup[tmp >> 10];
          output += lookup[tmp >> 4 & 0x3F];
          output += lookup[tmp << 2 & 0x3F];
          output += '=';
        }

        parts.push(output);
        return parts.join('');
      }
      /***/

    },
    /* 34 */

    /***/
    function (module, exports) {
      exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;

        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;

        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }

        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };

      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);

        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);

          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }

          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }

          if (value * c >= 2) {
            e++;
            c /= 2;
          }

          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }

        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

        e = e << mLen | m;
        eLen += mLen;

        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

        buffer[offset + i - d] |= s * 128;
      };
      /***/

    },
    /* 35 */

    /***/
    function (module, exports) {
      var toString = {}.toString;

      module.exports = Array.isArray || function (arr) {
        return toString.call(arr) == '[object Array]';
      };
      /***/

    },
    /* 36 */

    /***/
    function (module, exports) {
      module.exports = {
        "_args": [["joi@13.4.0", "/Users/jeff/projects/joi-browser"]],
        "_development": true,
        "_from": "joi@13.4.0",
        "_id": "joi@13.4.0",
        "_inBundle": false,
        "_integrity": "sha512-JuK4GjEu6j7zr9FuVe2MAseZ6si/8/HaY0qMAejfDFHp7jcH4OKE937mIHM5VT4xDS0q7lpQbszbxKV9rm0yUg==",
        "_location": "/joi",
        "_phantomChildren": {},
        "_requested": {
          "type": "version",
          "registry": true,
          "raw": "joi@13.4.0",
          "name": "joi",
          "escapedName": "joi",
          "rawSpec": "13.4.0",
          "saveSpec": null,
          "fetchSpec": "13.4.0"
        },
        "_requiredBy": ["#DEV:/"],
        "_resolved": "https://registry.npmjs.org/joi/-/joi-13.4.0.tgz",
        "_spec": "13.4.0",
        "_where": "/Users/jeff/projects/joi-browser",
        "bugs": {
          "url": "https://github.com/hapijs/joi/issues"
        },
        "dependencies": {
          "hoek": "5.x.x",
          "isemail": "3.x.x",
          "topo": "3.x.x"
        },
        "description": "Object schema validation",
        "devDependencies": {
          "code": "5.x.x",
          "hapitoc": "1.x.x",
          "lab": "15.x.x"
        },
        "engines": {
          "node": ">=8.9.0"
        },
        "homepage": "https://github.com/hapijs/joi",
        "keywords": ["hapi", "schema", "validation"],
        "license": "BSD-3-Clause",
        "main": "lib/index.js",
        "name": "joi",
        "repository": {
          "type": "git",
          "url": "git://github.com/hapijs/joi.git"
        },
        "scripts": {
          "test": "lab -t 100 -a code -L",
          "test-cov-html": "lab -r html -o coverage.html -a code",
          "test-debug": "lab -a code",
          "toc": "hapitoc",
          "version": "npm run toc && git add API.md README.md"
        },
        "version": "13.4.0"
        /***/

      };
    },
    /* 37 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (process) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // resolves . and .. elements in a path array with directory names there
        // must be no slashes, empty elements, or device names (c:\) in the array
        // (so also no leading and trailing slashes - it does not distinguish
        // relative and absolute paths)
        function normalizeArray(parts, allowAboveRoot) {
          // if the path tries to go above the root, `up` ends up > 0
          var up = 0;

          for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];

            if (last === '.') {
              parts.splice(i, 1);
            } else if (last === '..') {
              parts.splice(i, 1);
              up++;
            } else if (up) {
              parts.splice(i, 1);
              up--;
            }
          } // if the path is allowed to go above the root, restore leading ..s


          if (allowAboveRoot) {
            for (; up--; up) {
              parts.unshift('..');
            }
          }

          return parts;
        } // Split a filename into [root, dir, basename, ext], unix version
        // 'root' is just a slash, or nothing.


        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;

        var splitPath = function splitPath(filename) {
          return splitPathRe.exec(filename).slice(1);
        }; // path.resolve([from ...], to)
        // posix version


        exports.resolve = function () {
          var resolvedPath = '',
              resolvedAbsolute = false;

          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = i >= 0 ? arguments[i] : process.cwd(); // Skip empty and invalid entries

            if (typeof path !== 'string') {
              throw new TypeError('Arguments to path.resolve must be strings');
            } else if (!path) {
              continue;
            }

            resolvedPath = path + '/' + resolvedPath;
            resolvedAbsolute = path.charAt(0) === '/';
          } // At this point the path should be resolved to a full absolute path, but
          // handle relative paths to be safe (might happen when process.cwd() fails)
          // Normalize the path


          resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
            return !!p;
          }), !resolvedAbsolute).join('/');
          return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
        }; // path.normalize(path)
        // posix version


        exports.normalize = function (path) {
          var isAbsolute = exports.isAbsolute(path),
              trailingSlash = substr(path, -1) === '/'; // Normalize the path

          path = normalizeArray(filter(path.split('/'), function (p) {
            return !!p;
          }), !isAbsolute).join('/');

          if (!path && !isAbsolute) {
            path = '.';
          }

          if (path && trailingSlash) {
            path += '/';
          }

          return (isAbsolute ? '/' : '') + path;
        }; // posix version


        exports.isAbsolute = function (path) {
          return path.charAt(0) === '/';
        }; // posix version


        exports.join = function () {
          var paths = Array.prototype.slice.call(arguments, 0);
          return exports.normalize(filter(paths, function (p, index) {
            if (typeof p !== 'string') {
              throw new TypeError('Arguments to path.join must be strings');
            }

            return p;
          }).join('/'));
        }; // path.relative(from, to)
        // posix version


        exports.relative = function (from, to) {
          from = exports.resolve(from).substr(1);
          to = exports.resolve(to).substr(1);

          function trim(arr) {
            var start = 0;

            for (; start < arr.length; start++) {
              if (arr[start] !== '') break;
            }

            var end = arr.length - 1;

            for (; end >= 0; end--) {
              if (arr[end] !== '') break;
            }

            if (start > end) return [];
            return arr.slice(start, end - start + 1);
          }

          var fromParts = trim(from.split('/'));
          var toParts = trim(to.split('/'));
          var length = Math.min(fromParts.length, toParts.length);
          var samePartsLength = length;

          for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
              samePartsLength = i;
              break;
            }
          }

          var outputParts = [];

          for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push('..');
          }

          outputParts = outputParts.concat(toParts.slice(samePartsLength));
          return outputParts.join('/');
        };

        exports.sep = '/';
        exports.delimiter = ':';

        exports.dirname = function (path) {
          var result = splitPath(path),
              root = result[0],
              dir = result[1];

          if (!root && !dir) {
            // No dirname whatsoever
            return '.';
          }

          if (dir) {
            // It has a dirname, strip trailing slash
            dir = dir.substr(0, dir.length - 1);
          }

          return root + dir;
        };

        exports.basename = function (path, ext) {
          var f = splitPath(path)[2]; // TODO: make this comparison case-insensitive on windows?

          if (ext && f.substr(-1 * ext.length) === ext) {
            f = f.substr(0, f.length - ext.length);
          }

          return f;
        };

        exports.extname = function (path) {
          return splitPath(path)[3];
        };

        function filter(xs, f) {
          if (xs.filter) return xs.filter(f);
          var res = [];

          for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs)) res.push(xs[i]);
          }

          return res;
        } // String.prototype.substr - negative index don't work in IE8


        var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
          return str.substr(start, len);
        } : function (str, start, len) {
          if (start < 0) start = str.length + start;
          return str.substr(start, len);
        };
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(7));
      /***/
    },
    /* 38 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (module, global) {
        var __WEBPACK_AMD_DEFINE_RESULT__;
        /*! https://mths.be/punycode v1.4.1 by @mathias */


        ;

        (function (root) {
          /** Detect free variables */
          var freeExports = _typeof2(exports) == 'object' && exports && !exports.nodeType && exports;
          var freeModule = _typeof2(module) == 'object' && module && !module.nodeType && module;
          var freeGlobal = _typeof2(global) == 'object' && global;

          if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
            root = freeGlobal;
          }
          /**
           * The `punycode` object.
           * @name punycode
           * @type Object
           */


          var punycode,

          /** Highest positive signed 32-bit float value */
          maxInt = 2147483647,
              // aka. 0x7FFFFFFF or 2^31-1

          /** Bootstring parameters */
          base = 36,
              tMin = 1,
              tMax = 26,
              skew = 38,
              damp = 700,
              initialBias = 72,
              initialN = 128,
              // 0x80
          delimiter = '-',
              // '\x2D'

          /** Regular expressions */
          regexPunycode = /^xn--/,
              regexNonASCII = /[^\x20-\x7E]/,
              // unprintable ASCII chars + non-ASCII chars
          regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
              // RFC 3490 separators

          /** Error messages */
          errors = {
            'overflow': 'Overflow: input needs wider integers to process',
            'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
            'invalid-input': 'Invalid input'
          },

          /** Convenience shortcuts */
          baseMinusTMin = base - tMin,
              floor = Math.floor,
              stringFromCharCode = String.fromCharCode,

          /** Temporary variable */
          key;
          /*--------------------------------------------------------------------------*/

          /**
           * A generic error utility function.
           * @private
           * @param {String} type The error type.
           * @returns {Error} Throws a `RangeError` with the applicable error message.
           */

          function error(type) {
            throw new RangeError(errors[type]);
          }
          /**
           * A generic `Array#map` utility function.
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} callback The function that gets called for every array
           * item.
           * @returns {Array} A new array of values returned by the callback function.
           */


          function map(array, fn) {
            var length = array.length;
            var result = [];

            while (length--) {
              result[length] = fn(array[length]);
            }

            return result;
          }
          /**
           * A simple `Array#map`-like wrapper to work with domain name strings or email
           * addresses.
           * @private
           * @param {String} domain The domain name or email address.
           * @param {Function} callback The function that gets called for every
           * character.
           * @returns {Array} A new string of characters returned by the callback
           * function.
           */


          function mapDomain(string, fn) {
            var parts = string.split('@');
            var result = '';

            if (parts.length > 1) {
              // In email addresses, only the domain name should be punycoded. Leave
              // the local part (i.e. everything up to `@`) intact.
              result = parts[0] + '@';
              string = parts[1];
            } // Avoid `split(regex)` for IE8 compatibility. See #17.


            string = string.replace(regexSeparators, '\x2E');
            var labels = string.split('.');
            var encoded = map(labels, fn).join('.');
            return result + encoded;
          }
          /**
           * Creates an array containing the numeric code points of each Unicode
           * character in the string. While JavaScript uses UCS-2 internally,
           * this function will convert a pair of surrogate halves (each of which
           * UCS-2 exposes as separate characters) into a single code point,
           * matching UTF-16.
           * @see `punycode.ucs2.encode`
           * @see <https://mathiasbynens.be/notes/javascript-encoding>
           * @memberOf punycode.ucs2
           * @name decode
           * @param {String} string The Unicode input string (UCS-2).
           * @returns {Array} The new array of code points.
           */


          function ucs2decode(string) {
            var output = [],
                counter = 0,
                length = string.length,
                value,
                extra;

            while (counter < length) {
              value = string.charCodeAt(counter++);

              if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);

                if ((extra & 0xFC00) == 0xDC00) {
                  // low surrogate
                  output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                } else {
                  // unmatched surrogate; only append this code unit, in case the next
                  // code unit is the high surrogate of a surrogate pair
                  output.push(value);
                  counter--;
                }
              } else {
                output.push(value);
              }
            }

            return output;
          }
          /**
           * Creates a string based on an array of numeric code points.
           * @see `punycode.ucs2.decode`
           * @memberOf punycode.ucs2
           * @name encode
           * @param {Array} codePoints The array of numeric code points.
           * @returns {String} The new Unicode string (UCS-2).
           */


          function ucs2encode(array) {
            return map(array, function (value) {
              var output = '';

              if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
              }

              output += stringFromCharCode(value);
              return output;
            }).join('');
          }
          /**
           * Converts a basic code point into a digit/integer.
           * @see `digitToBasic()`
           * @private
           * @param {Number} codePoint The basic numeric code point value.
           * @returns {Number} The numeric value of a basic code point (for use in
           * representing integers) in the range `0` to `base - 1`, or `base` if
           * the code point does not represent a value.
           */


          function basicToDigit(codePoint) {
            if (codePoint - 48 < 10) {
              return codePoint - 22;
            }

            if (codePoint - 65 < 26) {
              return codePoint - 65;
            }

            if (codePoint - 97 < 26) {
              return codePoint - 97;
            }

            return base;
          }
          /**
           * Converts a digit/integer into a basic code point.
           * @see `basicToDigit()`
           * @private
           * @param {Number} digit The numeric value of a basic code point.
           * @returns {Number} The basic code point whose value (when used for
           * representing integers) is `digit`, which needs to be in the range
           * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
           * used; else, the lowercase form is used. The behavior is undefined
           * if `flag` is non-zero and `digit` has no uppercase form.
           */


          function digitToBasic(digit, flag) {
            //  0..25 map to ASCII a..z or A..Z
            // 26..35 map to ASCII 0..9
            return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
          }
          /**
           * Bias adaptation function as per section 3.4 of RFC 3492.
           * https://tools.ietf.org/html/rfc3492#section-3.4
           * @private
           */


          function adapt(delta, numPoints, firstTime) {
            var k = 0;
            delta = firstTime ? floor(delta / damp) : delta >> 1;
            delta += floor(delta / numPoints);

            for (;
            /* no initialization */
            delta > baseMinusTMin * tMax >> 1; k += base) {
              delta = floor(delta / baseMinusTMin);
            }

            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
          }
          /**
           * Converts a Punycode string of ASCII-only symbols to a string of Unicode
           * symbols.
           * @memberOf punycode
           * @param {String} input The Punycode string of ASCII-only symbols.
           * @returns {String} The resulting string of Unicode symbols.
           */


          function decode(input) {
            // Don't use UCS-2
            var output = [],
                inputLength = input.length,
                out,
                i = 0,
                n = initialN,
                bias = initialBias,
                basic,
                j,
                index,
                oldi,
                w,
                k,
                digit,
                t,

            /** Cached calculation results */
            baseMinusT; // Handle the basic code points: let `basic` be the number of input code
            // points before the last delimiter, or `0` if there is none, then copy
            // the first basic code points to the output.

            basic = input.lastIndexOf(delimiter);

            if (basic < 0) {
              basic = 0;
            }

            for (j = 0; j < basic; ++j) {
              // if it's not a basic code point
              if (input.charCodeAt(j) >= 0x80) {
                error('not-basic');
              }

              output.push(input.charCodeAt(j));
            } // Main decoding loop: start just after the last delimiter if any basic code
            // points were copied; start at the beginning otherwise.


            for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)
            /* no final expression */
            {
              // `index` is the index of the next character to be consumed.
              // Decode a generalized variable-length integer into `delta`,
              // which gets added to `i`. The overflow checking is easier
              // if we increase `i` as we go, then subtract off its starting
              // value at the end to obtain `delta`.
              for (oldi = i, w = 1, k = base;;
              /* no condition */
              k += base) {
                if (index >= inputLength) {
                  error('invalid-input');
                }

                digit = basicToDigit(input.charCodeAt(index++));

                if (digit >= base || digit > floor((maxInt - i) / w)) {
                  error('overflow');
                }

                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                if (digit < t) {
                  break;
                }

                baseMinusT = base - t;

                if (w > floor(maxInt / baseMinusT)) {
                  error('overflow');
                }

                w *= baseMinusT;
              }

              out = output.length + 1;
              bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
              // incrementing `n` each time, so we'll fix that now:

              if (floor(i / out) > maxInt - n) {
                error('overflow');
              }

              n += floor(i / out);
              i %= out; // Insert `n` at position `i` of the output

              output.splice(i++, 0, n);
            }

            return ucs2encode(output);
          }
          /**
           * Converts a string of Unicode symbols (e.g. a domain name label) to a
           * Punycode string of ASCII-only symbols.
           * @memberOf punycode
           * @param {String} input The string of Unicode symbols.
           * @returns {String} The resulting Punycode string of ASCII-only symbols.
           */


          function encode(input) {
            var n,
                delta,
                handledCPCount,
                basicLength,
                bias,
                j,
                m,
                q,
                k,
                t,
                currentValue,
                output = [],

            /** `inputLength` will hold the number of code points in `input`. */
            inputLength,

            /** Cached calculation results */
            handledCPCountPlusOne,
                baseMinusT,
                qMinusT; // Convert the input in UCS-2 to Unicode

            input = ucs2decode(input); // Cache the length

            inputLength = input.length; // Initialize the state

            n = initialN;
            delta = 0;
            bias = initialBias; // Handle the basic code points

            for (j = 0; j < inputLength; ++j) {
              currentValue = input[j];

              if (currentValue < 0x80) {
                output.push(stringFromCharCode(currentValue));
              }
            }

            handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
            // `basicLength` is the number of basic code points.
            // Finish the basic string - if it is not empty - with a delimiter

            if (basicLength) {
              output.push(delimiter);
            } // Main encoding loop:


            while (handledCPCount < inputLength) {
              // All non-basic code points < n have been handled already. Find the next
              // larger one:
              for (m = maxInt, j = 0; j < inputLength; ++j) {
                currentValue = input[j];

                if (currentValue >= n && currentValue < m) {
                  m = currentValue;
                }
              } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
              // but guard against overflow


              handledCPCountPlusOne = handledCPCount + 1;

              if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                error('overflow');
              }

              delta += (m - n) * handledCPCountPlusOne;
              n = m;

              for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];

                if (currentValue < n && ++delta > maxInt) {
                  error('overflow');
                }

                if (currentValue == n) {
                  // Represent delta as a generalized variable-length integer
                  for (q = delta, k = base;;
                  /* no condition */
                  k += base) {
                    t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                    if (q < t) {
                      break;
                    }

                    qMinusT = q - t;
                    baseMinusT = base - t;
                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                    q = floor(qMinusT / baseMinusT);
                  }

                  output.push(stringFromCharCode(digitToBasic(q, 0)));
                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                  delta = 0;
                  ++handledCPCount;
                }
              }

              ++delta;
              ++n;
            }

            return output.join('');
          }
          /**
           * Converts a Punycode string representing a domain name or an email address
           * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
           * it doesn't matter if you call it on a string that has already been
           * converted to Unicode.
           * @memberOf punycode
           * @param {String} input The Punycoded domain name or email address to
           * convert to Unicode.
           * @returns {String} The Unicode representation of the given Punycode
           * string.
           */


          function toUnicode(input) {
            return mapDomain(input, function (string) {
              return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
            });
          }
          /**
           * Converts a Unicode string representing a domain name or an email address to
           * Punycode. Only the non-ASCII parts of the domain name will be converted,
           * i.e. it doesn't matter if you call it with a domain that's already in
           * ASCII.
           * @memberOf punycode
           * @param {String} input The domain name or email address to convert, as a
           * Unicode string.
           * @returns {String} The Punycode representation of the given domain name or
           * email address.
           */


          function toASCII(input) {
            return mapDomain(input, function (string) {
              return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
            });
          }
          /*--------------------------------------------------------------------------*/

          /** Define the public API */


          punycode = {
            /**
             * A string representing the current Punycode.js version number.
             * @memberOf punycode
             * @type String
             */
            'version': '1.4.1',

            /**
             * An object of methods to convert from JavaScript's internal character
             * representation (UCS-2) to Unicode code points, and back.
             * @see <https://mathiasbynens.be/notes/javascript-encoding>
             * @memberOf punycode
             * @type Object
             */
            'ucs2': {
              'decode': ucs2decode,
              'encode': ucs2encode
            },
            'decode': decode,
            'encode': encode,
            'toASCII': toASCII,
            'toUnicode': toUnicode
          };
          /** Expose `punycode` */
          // Some AMD build optimizers, like r.js, check for specific condition patterns
          // like the following:

          if (true) {
            !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
              return punycode;
            }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else {}
        })(this);
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(41)(module), __webpack_require__(5));
      /***/
    },
    /* 39 */

    /***/
    function (module, exports) {
      if (typeof Object.create === 'function') {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        };
      } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;

          var TempCtor = function TempCtor() {};

          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        };
      }
      /***/

    },
    /* 40 */

    /***/
    function (module, exports) {
      module.exports = function isBuffer(arg) {
        return arg && _typeof2(arg) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
      };
      /***/

    },
    /* 41 */

    /***/
    function (module, exports) {
      module.exports = function (module) {
        if (!module.webpackPolyfill) {
          module.deprecate = function () {};

          module.paths = []; // module.parent = undefined by default

          if (!module.children) module.children = [];
          Object.defineProperty(module, "loaded", {
            enumerable: true,
            get: function get() {
              return module.l;
            }
          });
          Object.defineProperty(module, "id", {
            enumerable: true,
            get: function get() {
              return module.i;
            }
          });
          module.webpackPolyfill = 1;
        }

        return module;
      };
      /***/

    }])
  );
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(46)(module)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Implementation of the multicodec specification.
 *
 * @module multicodec
 * @example
 * const multicodec = require('multicodec')
 *
 * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)
 * // prefixedProtobuf 0x50...
 *
 */


var varint = __webpack_require__(12);

var codecNameToCodeVarint = __webpack_require__(205);

var codeToCodecName = __webpack_require__(206);

var util = __webpack_require__(90);

exports = module.exports;
/**
 * Prefix a buffer with a multicodec-packed.
 *
 * @param {string|number} multicodecStrOrCode
 * @param {Buffer} data
 * @returns {Buffer}
 */

exports.addPrefix = function (multicodecStrOrCode, data) {
  var prefix;

  if (Buffer.isBuffer(multicodecStrOrCode)) {
    prefix = util.varintBufferEncode(multicodecStrOrCode);
  } else {
    if (codecNameToCodeVarint[multicodecStrOrCode]) {
      prefix = codecNameToCodeVarint[multicodecStrOrCode];
    } else {
      throw new Error('multicodec not recognized');
    }
  }

  return Buffer.concat([prefix, data]);
};
/**
 * Decapsulate the multicodec-packed prefix from the data.
 *
 * @param {Buffer} data
 * @returns {Buffer}
 */


exports.rmPrefix = function (data) {
  varint.decode(data);
  return data.slice(varint.decode.bytes);
};
/**
 * Get the codec of the prefixed data.
 * @param {Buffer} prefixedData
 * @returns {string}
 */


exports.getCodec = function (prefixedData) {
  var code = util.varintBufferDecode(prefixedData);
  var codecName = codeToCodecName[code.toString('hex')];

  if (codecName === undefined) {
    throw new Error('Code `0x' + code.toString('hex') + '` not found');
  }

  return codecName;
};
/**
 * Get the name of the codec.
 * @param {number} codec
 * @returns {string}
 */


exports.getName = function (codec) {
  return codeToCodecName[codec.toString(16)];
};
/**
 * Get the code of the codec
 * @param {string} name
 * @returns {number}
 */


exports.getNumber = function (name) {
  var code = codecNameToCodeVarint[name];

  if (code === undefined) {
    throw new Error('Codec `' + name + '` not found');
  }

  return util.varintBufferDecode(code)[0];
};
/**
 * Get the code of the prefixed data.
 * @param {Buffer} prefixedData
 * @returns {number}
 */


exports.getCode = function (prefixedData) {
  return varint.decode(prefixedData);
};
/**
 * Get the code as varint of a codec name.
 * @param {string} codecName
 * @returns {Buffer}
 */


exports.getCodeVarint = function (codecName) {
  var code = codecNameToCodeVarint[codecName];

  if (code === undefined) {
    throw new Error('Codec `' + codecName + '` not found');
  }

  return code;
};
/**
 * Get the varint of a code.
 * @param {Number} code
 * @returns {Array.<number>}
 */


exports.getVarint = function (code) {
  return varint.encode(code);
}; // Make the constants top-level constants


var constants = __webpack_require__(207);

Object.assign(exports, constants); // Human friendly names for printing, e.g. in error messages

exports.print = __webpack_require__(208);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var R = (typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function get() {
    return defaultMaxListeners;
  },
  set: function set(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) {
    args.push(arguments[i]);
  }

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      ReflectApply(listeners[i], this, args);
    }
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + _typeof(listener));
  }

  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = $getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  var args = [];

  for (var i = 0; i < arguments.length; i++) {
    args.push(arguments[i]);
  }

  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + _typeof(listener));
  }

  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + _typeof(listener));
  }

  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + _typeof(listener));
  }

  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) {
    copy[i] = arr[i];
  }

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) {
    list[index] = list[index + 1];
  }

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _require = __webpack_require__(8),
    FILE_SEPARATOR = _require.FILE_SEPARATOR;

var loadMfsRoot = __webpack_require__(88);

var toPathComponents = __webpack_require__(54);

var exporter = __webpack_require__(20);

var errCode = __webpack_require__(2);

var IPFS_PREFIX = 'ipfs';

var toMfsPath =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(context, path) {
    var outputArray, paths, root;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            outputArray = Array.isArray(path);
            paths = Array.isArray(path) ? path : [path];
            _context2.next = 4;
            return loadMfsRoot(context);

          case 4:
            root = _context2.sent;
            paths = paths.map(function (path) {
              path = (path || '').trim();
              path = path.replace(/(\/\/+)/g, '/');

              if (path.endsWith('/') && path.length > 1) {
                path = path.substring(0, path.length - 1);
              }

              if (!path) {
                throw errCode(new Error('paths must not be empty'), 'ERR_NO_PATH');
              }

              if (path.substring(0, 1) !== FILE_SEPARATOR) {
                throw errCode(new Error("paths must start with a leading ".concat(FILE_SEPARATOR)), 'ERR_INVALID_PATH');
              }

              if (path.substring(path.length - FILE_SEPARATOR.length) === FILE_SEPARATOR) {
                path = path.substring(0, path.length - FILE_SEPARATOR.length);
              }

              var pathComponents = toPathComponents(path);

              if (pathComponents[0] === IPFS_PREFIX) {
                // e.g. /ipfs/QMfoo or /ipfs/Qmfoo/sub/path
                var _mfsDirectory;

                if (pathComponents.length === 2) {
                  _mfsDirectory = "".concat(FILE_SEPARATOR).concat(pathComponents.join(FILE_SEPARATOR));
                } else {
                  _mfsDirectory = "".concat(FILE_SEPARATOR).concat(pathComponents.slice(0, pathComponents.length - 1).join(FILE_SEPARATOR));
                }

                return {
                  type: 'ipfs',
                  depth: pathComponents.length - 2,
                  mfsPath: "".concat(FILE_SEPARATOR).concat(pathComponents.join(FILE_SEPARATOR)),
                  mfsDirectory: _mfsDirectory,
                  parts: pathComponents,
                  path: "".concat(FILE_SEPARATOR).concat(pathComponents.join(FILE_SEPARATOR)),
                  name: pathComponents[pathComponents.length - 1]
                };
              }

              var mfsPath = "/".concat(IPFS_PREFIX, "/").concat(root).concat(pathComponents.length ? '/' + pathComponents.join(FILE_SEPARATOR) : '');
              var mfsDirectory = "/".concat(IPFS_PREFIX, "/").concat(root, "/").concat(pathComponents.slice(0, pathComponents.length - 1).join(FILE_SEPARATOR));
              return {
                type: 'mfs',
                depth: pathComponents.length,
                mfsDirectory: mfsDirectory,
                mfsPath: mfsPath,
                parts: pathComponents,
                path: "".concat(FILE_SEPARATOR).concat(pathComponents.join(FILE_SEPARATOR)),
                name: pathComponents[pathComponents.length - 1]
              };
            });
            _context2.next = 8;
            return Promise.all(paths.map(
            /*#__PURE__*/
            function () {
              var _ref2 = _asyncToGenerator(
              /*#__PURE__*/
              _regenerator["default"].mark(function _callee(path) {
                var cidPath, res;
                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        cidPath = path.type === 'mfs' ? path.mfsPath : path.path;
                        _context.prev = 1;
                        _context.next = 4;
                        return exporter(cidPath, context.ipld);

                      case 4:
                        res = _context.sent;
                        path.cid = res.cid;
                        path.mfsPath = "/ipfs/".concat(res.path);
                        path.unixfs = res.unixfs;
                        path.content = res.content;
                        _context.next = 15;
                        break;

                      case 11:
                        _context.prev = 11;
                        _context.t0 = _context["catch"](1);

                        if (!(_context.t0.code !== 'ERR_NOT_FOUND')) {
                          _context.next = 15;
                          break;
                        }

                        throw _context.t0;

                      case 15:
                        path.exists = Boolean(path.cid);

                      case 16:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[1, 11]]);
              }));

              return function (_x3) {
                return _ref2.apply(this, arguments);
              };
            }()));

          case 8:
            if (!outputArray) {
              _context2.next = 10;
              break;
            }

            return _context2.abrupt("return", paths);

          case 10:
            return _context2.abrupt("return", paths[0]);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function toMfsPath(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = toMfsPath;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var pna = __webpack_require__(41);
/*</replacement>*/

/*<replacement>*/


var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;
/*<replacement>*/

var util = __webpack_require__(26);

util.inherits = __webpack_require__(7);
/*</replacement>*/

var Readable = __webpack_require__(110);

var Writable = __webpack_require__(64);

util.inherits(Duplex, Readable);
{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  if (options && options.readable === false) this.readable = false;
  if (options && options.writable === false) this.writable = false;
  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // the no-half-open enforcer

function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();
  pna.nextTick(cb, err);
};

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CID = __webpack_require__(11);

var assert = __webpack_require__(45);

var withIs = __webpack_require__(29);

var visibility = __webpack_require__(92); // Link represents an IPFS Merkle DAG Link between Nodes.


var DAGLink =
/*#__PURE__*/
function () {
  function DAGLink(name, size, cid) {
    _classCallCheck(this, DAGLink);

    assert(cid, 'A link requires a cid to point to'); // assert(size, 'A link requires a size')
    //  note - links should include size, but this assert is disabled
    //  for now to maintain consistency with go-ipfs pinset

    this._name = name || '';
    this._nameBuf = null;
    this._size = size;
    this._cid = new CID(cid); // Make sure we have a nice public API that can be used by an IPLD resolver

    visibility.hidePrivateFields(this);
    visibility.addEnumerableGetters(this, ['Hash', 'Name', 'Tsize']);
  }

  _createClass(DAGLink, [{
    key: "toString",
    value: function toString() {
      return "DAGLink <".concat(this._cid.toBaseEncodedString(), " - name: \"").concat(this.Name, "\", size: ").concat(this.Tsize, ">");
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      if (!this._json) {
        this._json = Object.freeze({
          name: this.Name,
          size: this.Tsize,
          cid: this.Hash.toBaseEncodedString()
        });
      }

      return Object.assign({}, this._json);
    }
  }, {
    key: "Name",
    get: function get() {
      return this._name;
    } // Memoize the Buffer representation of name
    // We need this to sort the links, otherwise
    // we will reallocate new buffers every time
    ,
    set: function set(name) {
      throw new Error("Can't set property: 'name' is immutable");
    }
  }, {
    key: "nameAsBuffer",
    get: function get() {
      if (this._nameBuf !== null) {
        return this._nameBuf;
      }

      this._nameBuf = Buffer.from(this._name);
      return this._nameBuf;
    }
  }, {
    key: "Tsize",
    get: function get() {
      return this._size;
    },
    set: function set(size) {
      throw new Error("Can't set property: 'size' is immutable");
    }
  }, {
    key: "Hash",
    get: function get() {
      return this._cid;
    },
    set: function set(cid) {
      throw new Error("Can't set property: 'cid' is immutable");
    }
  }]);

  return DAGLink;
}();

exports = module.exports = withIs(DAGLink, {
  className: 'DAGLink',
  symbolName: '@ipld/js-ipld-dag-pb/daglink'
});
exports.util = __webpack_require__(224);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

var errCode = __webpack_require__(2);

var CID = __webpack_require__(11);

var resolve = __webpack_require__(242);

var last = __webpack_require__(36);

var toPathComponents = function toPathComponents() {
  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  // split on / unless escaped with \
  return (path.trim().match(/([^\\^/]|\\\/)+/g) || []).filter(Boolean);
};

var cidAndRest = function cidAndRest(path) {
  if (Buffer.isBuffer(path)) {
    return {
      cid: new CID(path),
      toResolve: []
    };
  }

  if (CID.isCID(path)) {
    return {
      cid: path,
      toResolve: []
    };
  }

  if (typeof path === 'string') {
    if (path.indexOf('/ipfs/') === 0) {
      path = path.substring(6);
    }

    var output = toPathComponents(path);
    return {
      cid: new CID(output[0]),
      toResolve: output.slice(1)
    };
  }

  throw errCode(new Error("Unknown path type ".concat(path)), 'ERR_BAD_PATH');
};

var walkPath =
/*#__PURE__*/
function () {
  var _ref = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(path, ipld) {
    var _cidAndRest, cid, toResolve, name, entryPath, startingDepth, result;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _cidAndRest = cidAndRest(path), cid = _cidAndRest.cid, toResolve = _cidAndRest.toResolve;
            name = cid.toBaseEncodedString();
            entryPath = name;
            startingDepth = toResolve.length;

          case 4:
            if (false) {}

            _context.next = 7;
            return _awaitAsyncGenerator(resolve(cid, name, entryPath, toResolve, startingDepth, ipld));

          case 7:
            result = _context.sent;

            if (!(!result.entry && !result.next)) {
              _context.next = 10;
              break;
            }

            throw errCode(new Error("Could not resolve ".concat(path)), 'ERR_NOT_FOUND');

          case 10:
            if (!result.entry) {
              _context.next = 13;
              break;
            }

            _context.next = 13;
            return result.entry;

          case 13:
            if (result.next) {
              _context.next = 15;
              break;
            }

            return _context.abrupt("return");

          case 15:
            // resolve further parts
            toResolve = result.next.toResolve;
            cid = result.next.cid;
            name = result.next.name;
            entryPath = result.next.path;
            _context.next = 4;
            break;

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function walkPath(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var exporter = function exporter(path, ipld) {
  return last(walkPath(path, ipld));
};

var recursive =
/*#__PURE__*/
function () {
  var _ref2 = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(path, ipld) {
    var node, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, child, recurse, _recurse;

    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _recurse = function _ref4() {
              _recurse = _wrapAsyncGenerator(
              /*#__PURE__*/
              _regenerator["default"].mark(function _callee2(node) {
                var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, file, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, subFile;

                return _regenerator["default"].wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _iteratorNormalCompletion2 = true;
                        _didIteratorError2 = false;
                        _context2.prev = 2;
                        _iterator2 = _asyncIterator(node.content());

                      case 4:
                        _context2.next = 6;
                        return _awaitAsyncGenerator(_iterator2.next());

                      case 6:
                        _step2 = _context2.sent;
                        _iteratorNormalCompletion2 = _step2.done;
                        _context2.next = 10;
                        return _awaitAsyncGenerator(_step2.value);

                      case 10:
                        _value2 = _context2.sent;

                        if (_iteratorNormalCompletion2) {
                          _context2.next = 53;
                          break;
                        }

                        file = _value2;
                        _context2.next = 15;
                        return file;

                      case 15:
                        if (!file.unixfs.type.includes('dir')) {
                          _context2.next = 50;
                          break;
                        }

                        _iteratorNormalCompletion3 = true;
                        _didIteratorError3 = false;
                        _context2.prev = 18;
                        _iterator3 = _asyncIterator(recurse(file));

                      case 20:
                        _context2.next = 22;
                        return _awaitAsyncGenerator(_iterator3.next());

                      case 22:
                        _step3 = _context2.sent;
                        _iteratorNormalCompletion3 = _step3.done;
                        _context2.next = 26;
                        return _awaitAsyncGenerator(_step3.value);

                      case 26:
                        _value3 = _context2.sent;

                        if (_iteratorNormalCompletion3) {
                          _context2.next = 34;
                          break;
                        }

                        subFile = _value3;
                        _context2.next = 31;
                        return subFile;

                      case 31:
                        _iteratorNormalCompletion3 = true;
                        _context2.next = 20;
                        break;

                      case 34:
                        _context2.next = 40;
                        break;

                      case 36:
                        _context2.prev = 36;
                        _context2.t0 = _context2["catch"](18);
                        _didIteratorError3 = true;
                        _iteratorError3 = _context2.t0;

                      case 40:
                        _context2.prev = 40;
                        _context2.prev = 41;

                        if (!(!_iteratorNormalCompletion3 && _iterator3["return"] != null)) {
                          _context2.next = 45;
                          break;
                        }

                        _context2.next = 45;
                        return _awaitAsyncGenerator(_iterator3["return"]());

                      case 45:
                        _context2.prev = 45;

                        if (!_didIteratorError3) {
                          _context2.next = 48;
                          break;
                        }

                        throw _iteratorError3;

                      case 48:
                        return _context2.finish(45);

                      case 49:
                        return _context2.finish(40);

                      case 50:
                        _iteratorNormalCompletion2 = true;
                        _context2.next = 4;
                        break;

                      case 53:
                        _context2.next = 59;
                        break;

                      case 55:
                        _context2.prev = 55;
                        _context2.t1 = _context2["catch"](2);
                        _didIteratorError2 = true;
                        _iteratorError2 = _context2.t1;

                      case 59:
                        _context2.prev = 59;
                        _context2.prev = 60;

                        if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
                          _context2.next = 64;
                          break;
                        }

                        _context2.next = 64;
                        return _awaitAsyncGenerator(_iterator2["return"]());

                      case 64:
                        _context2.prev = 64;

                        if (!_didIteratorError2) {
                          _context2.next = 67;
                          break;
                        }

                        throw _iteratorError2;

                      case 67:
                        return _context2.finish(64);

                      case 68:
                        return _context2.finish(59);

                      case 69:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, null, [[2, 55, 59, 69], [18, 36, 40, 50], [41,, 45, 49], [60,, 64, 68]]);
              }));
              return _recurse.apply(this, arguments);
            };

            recurse = function _ref3(_x5) {
              return _recurse.apply(this, arguments);
            };

            _context3.next = 4;
            return _awaitAsyncGenerator(exporter(path, ipld));

          case 4:
            node = _context3.sent;
            _context3.next = 7;
            return node;

          case 7:
            if (!(node.unixfs && node.unixfs.type.includes('dir'))) {
              _context3.next = 42;
              break;
            }

            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context3.prev = 10;
            _iterator = _asyncIterator(recurse(node));

          case 12:
            _context3.next = 14;
            return _awaitAsyncGenerator(_iterator.next());

          case 14:
            _step = _context3.sent;
            _iteratorNormalCompletion = _step.done;
            _context3.next = 18;
            return _awaitAsyncGenerator(_step.value);

          case 18:
            _value = _context3.sent;

            if (_iteratorNormalCompletion) {
              _context3.next = 26;
              break;
            }

            child = _value;
            _context3.next = 23;
            return child;

          case 23:
            _iteratorNormalCompletion = true;
            _context3.next = 12;
            break;

          case 26:
            _context3.next = 32;
            break;

          case 28:
            _context3.prev = 28;
            _context3.t0 = _context3["catch"](10);
            _didIteratorError = true;
            _iteratorError = _context3.t0;

          case 32:
            _context3.prev = 32;
            _context3.prev = 33;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context3.next = 37;
              break;
            }

            _context3.next = 37;
            return _awaitAsyncGenerator(_iterator["return"]());

          case 37:
            _context3.prev = 37;

            if (!_didIteratorError) {
              _context3.next = 40;
              break;
            }

            throw _iteratorError;

          case 40:
            return _context3.finish(37);

          case 41:
            return _context3.finish(32);

          case 42:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[10, 28, 32, 42], [33,, 37, 41]]);
  }));

  return function recursive(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

module.exports = exporter;
module.exports.path = walkPath;
module.exports.recursive = recursive;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = __webpack_require__(102);

var Writable = __webpack_require__(106);

__webpack_require__(7)(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var AssertError = __webpack_require__(116);

var internals = {};

module.exports = function (condition) {
  if (condition) {
    return;
  }

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (args.length === 1 && args[0] instanceof Error) {
    throw args[0];
  }

  throw new AssertError(args);
};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function drain(op, done) {
  var read, abort;

  function sink(_read) {
    read = _read;
    if (abort) return sink.abort() //this function is much simpler to write if you
    //just use recursion, but by using a while loop
    //we do not blow the stack if the stream happens to be sync.
    ;

    (function next() {
      var loop = true,
          cbed = false;

      while (loop) {
        cbed = false;
        read(null, function (end, data) {
          cbed = true;

          if (end = end || abort) {
            loop = false;
            if (done) done(end === true ? null : end);else if (end && end !== true) throw end;
          } else if (op && false === op(data) || abort) {
            loop = false;
            read(abort || true, done || function () {});
          } else if (!loop) {
            next();
          }
        });

        if (!cbed) {
          loop = false;
          return;
        }
      }
    })();
  }

  sink.abort = function (err, cb) {
    if ('function' == typeof err) cb = err, err = true;
    abort = err || true;
    if (read) return read(abort, cb || function () {});
  };

  return sink;
};

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function prop(key) {
  return key && ('string' == typeof key ? function (data) {
    return data[key];
  } : 'object' === _typeof(key) && 'function' === typeof key.exec //regexp
  ? function (data) {
    var v = key.exec(data);
    return v && v[0];
  } : key);
};

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }

  return objectToString(arg) === '[object Array]';
}

exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}

exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}

exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}

exports.isString = isString;

function isSymbol(arg) {
  return _typeof(arg) === 'symbol';
}

exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}

exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}

exports.isRegExp = isRegExp;

function isObject(arg) {
  return _typeof(arg) === 'object' && arg !== null;
}

exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}

exports.isDate = isDate;

function isError(e) {
  return objectToString(e) === '[object Error]' || e instanceof Error;
}

exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}

exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof(arg) === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}

exports.isPrimitive = isPrimitive;
exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var randomFromSeed = __webpack_require__(140);

var ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
var alphabet;
var previousSeed;
var shuffled;

function reset() {
  shuffled = false;
}

function setCharacters(_alphabet_) {
  if (!_alphabet_) {
    if (alphabet !== ORIGINAL) {
      alphabet = ORIGINAL;
      reset();
    }

    return;
  }

  if (_alphabet_ === alphabet) {
    return;
  }

  if (_alphabet_.length !== ORIGINAL.length) {
    throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
  }

  var unique = _alphabet_.split('').filter(function (item, ind, arr) {
    return ind !== arr.lastIndexOf(item);
  });

  if (unique.length) {
    throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
  }

  alphabet = _alphabet_;
  reset();
}

function characters(_alphabet_) {
  setCharacters(_alphabet_);
  return alphabet;
}

function setSeed(seed) {
  randomFromSeed.seed(seed);

  if (previousSeed !== seed) {
    reset();
    previousSeed = seed;
  }
}

function shuffle() {
  if (!alphabet) {
    setCharacters(ORIGINAL);
  }

  var sourceArray = alphabet.split('');
  var targetArray = [];
  var r = randomFromSeed.nextValue();
  var characterIndex;

  while (sourceArray.length > 0) {
    r = randomFromSeed.nextValue();
    characterIndex = Math.floor(r * sourceArray.length);
    targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
  }

  return targetArray.join('');
}

function getShuffled() {
  if (shuffled) {
    return shuffled;
  }

  shuffled = shuffle();
  return shuffled;
}
/**
 * lookup shuffled letter
 * @param index
 * @returns {string}
 */


function lookup(index) {
  var alphabetShuffled = getShuffled();
  return alphabetShuffled[index];
}

function get() {
  return alphabet || ORIGINAL;
}

module.exports = {
  get: get,
  characters: characters,
  seed: setSeed,
  lookup: lookup,
  shuffled: getShuffled
};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var applyDefaultOptions = __webpack_require__(10);

var toMfsPath = __webpack_require__(17);

var exporter = __webpack_require__(20);

var log = __webpack_require__(5)('ipfs:mfs:stat');

var errCode = __webpack_require__(2);

var defaultOptions = {
  withLocal: false
};

module.exports = function (context) {
  return (
    /*#__PURE__*/
    function () {
      var _mfsStat = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(path, options) {
        var _ref, type, cid, mfsPath, exportPath, file;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = applyDefaultOptions(options, defaultOptions);
                log("Fetching stats for ".concat(path));
                _context.next = 4;
                return toMfsPath(context, path);

              case 4:
                _ref = _context.sent;
                type = _ref.type;
                cid = _ref.cid;
                mfsPath = _ref.mfsPath;
                exportPath = type === 'ipfs' && cid ? cid : mfsPath;
                _context.prev = 9;
                _context.next = 12;
                return exporter(exportPath, context.ipld);

              case 12:
                file = _context.sent;
                _context.next = 20;
                break;

              case 15:
                _context.prev = 15;
                _context.t0 = _context["catch"](9);

                if (!(_context.t0.code === 'ERR_NOT_FOUND')) {
                  _context.next = 19;
                  break;
                }

                throw errCode(new Error("".concat(path, " does not exist")), 'ERR_NOT_FOUND');

              case 19:
                throw _context.t0;

              case 20:
                if (statters[file.cid.codec]) {
                  _context.next = 22;
                  break;
                }

                throw new Error("Cannot stat codec ".concat(file.cid.codec));

              case 22:
                return _context.abrupt("return", statters[file.cid.codec](file, options));

              case 23:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[9, 15]]);
      }));

      function mfsStat(_x, _x2) {
        return _mfsStat.apply(this, arguments);
      }

      return mfsStat;
    }()
  );
};

var statters = {
  raw: function raw(file) {
    return {
      cid: file.cid,
      size: file.node.length,
      cumulativeSize: file.node.length,
      blocks: 0,
      type: 'file',
      // for go compatibility
      local: undefined,
      sizeLocal: undefined,
      withLocality: false
    };
  },
  'dag-pb': function dagPb(file) {
    var blocks = file.node.Links.length;
    var size = file.node.size;
    var cumulativeSize = file.node.size;
    var nodeType = null;

    if (file.unixfs) {
      size = file.unixfs.fileSize();
      nodeType = file.unixfs.type;

      if (nodeType.includes('directory')) {
        size = 0;
        cumulativeSize = file.node.size;
      }

      if (nodeType === 'file') {
        blocks = file.unixfs.blockSizes.length;
      }
    }

    return {
      cid: file.cid,
      size: size,
      cumulativeSize: cumulativeSize,
      blocks: blocks,
      type: nodeType,
      local: undefined,
      sizeLocal: undefined,
      withLocality: false
    };
  },
  'dag-cbor': function dagCbor(file) {
    return {
      cid: file.cid,
      local: undefined,
      sizeLocal: undefined,
      withLocality: false
    };
  }
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function withIs(Class, _ref) {
  var className = _ref.className,
      symbolName = _ref.symbolName;
  var symbol = Symbol["for"](symbolName);

  var ClassIsWrapper = _defineProperty({}, className,
  /*#__PURE__*/
  function (_Class) {
    _inherits(_class, _Class);

    function _class() {
      var _getPrototypeOf2;

      var _this2;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this2 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_class)).call.apply(_getPrototypeOf2, [this].concat(args)));
      Object.defineProperty(_assertThisInitialized(_this2), symbol, {
        value: true
      });
      return _this2;
    }

    _createClass(_class, [{
      key: Symbol.toStringTag,
      get: function get() {
        return className;
      }
    }]);

    return _class;
  }(Class))[className];

  ClassIsWrapper["is".concat(className)] = function (obj) {
    return !!(obj && obj[symbol]);
  };

  return ClassIsWrapper;
}

function withIsProto(Class, _ref2) {
  var className = _ref2.className,
      symbolName = _ref2.symbolName,
      withoutNew = _ref2.withoutNew;
  var symbol = Symbol["for"](symbolName);
  /* eslint-disable object-shorthand */

  var ClassIsWrapper = _defineProperty({}, className, function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    if (withoutNew && !(this instanceof ClassIsWrapper)) {
      return _construct(ClassIsWrapper, args);
    }

    var _this = Class.call.apply(Class, [this].concat(args)) || this;

    if (_this && !_this[symbol]) {
      Object.defineProperty(_this, symbol, {
        value: true
      });
    }

    return _this;
  })[className];
  /* eslint-enable object-shorthand */


  ClassIsWrapper.prototype = Object.create(Class.prototype);
  ClassIsWrapper.prototype.constructor = ClassIsWrapper;
  Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {
    get: function get() {
      return className;
    }
  });

  ClassIsWrapper["is".concat(className)] = function (obj) {
    return !!(obj && obj[symbol]);
  };

  return ClassIsWrapper;
}

module.exports = withIs;
module.exports.proto = withIsProto;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var assert = __webpack_require__(45);

var withIs = __webpack_require__(29);

var addNamedLink = __webpack_require__(221);

var visibility = __webpack_require__(92);

var DAGNode =
/*#__PURE__*/
function () {
  function DAGNode(data, links, serializedSize) {
    var _this = this;

    _classCallCheck(this, DAGNode);

    if (serializedSize !== 0) {
      assert(serializedSize, 'A DAGNode requires it\'s serialized size');
    }

    this._data = data || Buffer.alloc(0);
    this._links = links;
    this._serializedSize = serializedSize; // Make sure we have a nice public API that can be used by an IPLD resolver

    visibility.hidePrivateFields(this);
    visibility.addEnumerableGetters(this, ['Data', 'Links']); // Add getters for existing links by the name of the link
    // This is how paths are traversed in IPFS. Links with names won't
    // override existing fields like `data` or `links`.

    links.forEach(function (link, position) {
      addNamedLink(_this, link.Name, position);
    });
  }

  _createClass(DAGNode, [{
    key: "toJSON",
    value: function toJSON() {
      if (!this._json) {
        this._json = Object.freeze({
          data: this.Data,
          links: this._links.map(function (l) {
            return l.toJSON();
          }),
          size: this.size
        });
      }

      return Object.assign({}, this._json);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "DAGNode <data: \"".concat(this.Data.toString('base64'), "\", links: ").concat(this.Links.length, ", size: ").concat(this.size, ">");
    }
  }, {
    key: "size",
    get: function get() {
      if (this._size === undefined) {
        this._size = this._links.reduce(function (sum, l) {
          return sum + l.Tsize;
        }, this._serializedSize);
      }

      return this._size;
    },
    set: function set(size) {
      throw new Error("Can't set property: 'size' is immutable");
    } // Getters for backwards compatible path resolving

  }, {
    key: "Data",
    get: function get() {
      return this._data;
    },
    set: function set(_) {
      throw new Error("Can't set property: 'Data' is immutable");
    }
  }, {
    key: "Links",
    get: function get() {
      return this._links.map(function (link) {
        return {
          Name: link.Name,
          Tsize: link.Tsize,
          Hash: link.Hash
        };
      });
    },
    set: function set(_) {
      throw new Error("Can't set property: 'Links' is immutable");
    }
  }]);

  return DAGNode;
}();

exports = module.exports = withIs(DAGNode, {
  className: 'DAGNode',
  symbolName: '@ipld/js-ipld-dag-pb/dagnode'
});
exports.create = __webpack_require__(31);
exports.clone = __webpack_require__(236);
exports.addLink = __webpack_require__(237);
exports.rmLink = __webpack_require__(238);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var sort = __webpack_require__(222);

var _require = __webpack_require__(32),
    serialize = _require.serialize;

var dagNodeUtil = __webpack_require__(33);

var linkSort = dagNodeUtil.linkSort;

var DAGNode = __webpack_require__(30);

var DAGLink = __webpack_require__(19);

var create = function create(data) {
  var links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (typeof data === 'string') {
    data = Buffer.from(data);
  }

  if (!Buffer.isBuffer(data)) {
    throw new Error('Passed \'data\' is not a buffer or a string!');
  }

  links = links.map(function (link) {
    return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);
  });
  links = sort(links, linkSort);
  var serialized = serialize({
    Data: data,
    Links: links
  });
  return new DAGNode(data, links, serialized.length);
};

module.exports = create;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var CID = __webpack_require__(11);

var protons = __webpack_require__(91);

var proto = protons(__webpack_require__(223));

var DAGLink = __webpack_require__(19);

var DAGNode = __webpack_require__(30);

var multicodec = __webpack_require__(15);

var multihashing = __webpack_require__(93);

exports = module.exports;
exports.codec = multicodec.DAG_PB;
exports.defaultHashAlg = multicodec.SHA2_256;
/**
 * Calculate the CID of the binary blob.
 *
 * @param {Object} binaryBlob - Encoded IPLD Node
 * @param {Object} [userOptions] - Options to create the CID
 * @param {number} [userOptions.cidVersion=1] - CID version number
 * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format
 * @returns {Promise.<CID>}
 */

var cid =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(binaryBlob, userOptions) {
    var defaultOptions, options, multihash, codecName, cid;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            defaultOptions = {
              cidVersion: 1,
              hashAlg: exports.defaultHashAlg
            };
            options = Object.assign(defaultOptions, userOptions);
            _context.next = 4;
            return multihashing(binaryBlob, options.hashAlg);

          case 4:
            multihash = _context.sent;
            codecName = multicodec.print[exports.codec];
            cid = new CID(options.cidVersion, codecName, multihash);
            return _context.abrupt("return", cid);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function cid(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Serialize internal representation into a binary PB block.
 *
 * @param {Object} node - Internal representation of a CBOR block
 * @returns {Buffer} - The encoded binary representation
 */


var serialize = function serialize(node) {
  var data = node.Data;
  var links = node.Links || []; // If the node is not an instance of a DAGNode, the link.hash might be a Base58 encoded string; decode it

  if (!DAGNode.isDAGNode(node) && links) {
    links = links.map(function (link) {
      return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);
    });
  }

  var serialized = proto.PBNode.encode(toProtoBuf({
    Data: data,
    Links: links
  }));
  return serialized;
};
/**
 * Deserialize PB block into the internal representation.
 *
 * @param {Buffer} buffer - Binary representation of a PB block
 * @returns {Object} - An object that conforms to the IPLD Data Model
 */


var deserialize = function deserialize(buffer) {
  var pbn = proto.PBNode.decode(buffer);
  var links = pbn.Links.map(function (link) {
    return new DAGLink(link.Name, link.Tsize, link.Hash);
  });
  var data = pbn.Data == null ? Buffer.alloc(0) : pbn.Data;
  return new DAGNode(data, links, buffer.length);
};

function toProtoBuf(node) {
  var pbn = {};

  if (node.Data && node.Data.length > 0) {
    pbn.Data = node.Data;
  } else {
    // NOTE: this has to be null in order to match go-ipfs serialization `null !== new Buffer(0)`
    pbn.Data = null;
  }

  if (node.Links && node.Links.length > 0) {
    pbn.Links = node.Links.map(function (link) {
      return {
        Hash: link.Hash.buffer,
        Name: link.Name,
        Tsize: link.Tsize
      };
    });
  } else {
    pbn.Links = null;
  }

  return pbn;
}

exports.serialize = serialize;
exports.deserialize = deserialize;
exports.cid = cid;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var DAGLink = __webpack_require__(19);

var _require = __webpack_require__(32),
    cid = _require.cid,
    serialize = _require.serialize;

exports = module.exports;

function cloneData(dagNode) {
  var data;

  if (dagNode.Data && dagNode.Data.length > 0) {
    data = Buffer.alloc(dagNode.Data.length);
    dagNode.Data.copy(data);
  } else {
    data = Buffer.alloc(0);
  }

  return data;
}

function cloneLinks(dagNode) {
  return dagNode.Links.slice();
}

function linkSort(a, b) {
  return Buffer.compare(a.nameAsBuffer, b.nameAsBuffer);
}
/*
 * toDAGLink converts a DAGNode to a DAGLink
 */


var toDAGLink =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(node) {
    var options,
        serialized,
        nodeCid,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            serialized = serialize(node);
            _context.next = 4;
            return cid(serialized);

          case 4:
            nodeCid = _context.sent;
            return _context.abrupt("return", new DAGLink(options.name || '', serialized.length, nodeCid));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function toDAGLink(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.cloneData = cloneData;
exports.cloneLinks = cloneLinks;
exports.linkSort = linkSort;
exports.toDAGLink = toDAGLink;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var _require = __webpack_require__(13),
    DAGLink = _require.DAGLink,
    DAGNode = _require.DAGNode;

var UnixFS = __webpack_require__(6);

var multihashing = __webpack_require__(93);

var Dir = __webpack_require__(56);

var persist = __webpack_require__(35);

var Bucket = __webpack_require__(248);

var extend = __webpack_require__(249);

var hashFn =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(value) {
    var hash, justHash, length, result, i;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return multihashing(Buffer.from(value, 'utf8'), 'murmur3-128');

          case 2:
            hash = _context.sent;
            // Multihashing inserts preamble of 2 bytes. Remove it.
            // Also, murmur3 outputs 128 bit but, accidently, IPFS Go's
            // implementation only uses the first 64, so we must do the same
            // for parity..
            justHash = hash.slice(2, 10);
            length = justHash.length;
            result = Buffer.alloc(length); // TODO: invert buffer because that's how Go impl does it

            for (i = 0; i < length; i++) {
              result[length - i - 1] = justHash[i];
            }

            return _context.abrupt("return", result);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function hashFn(_x5) {
    return _ref.apply(this, arguments);
  };
}();

hashFn.code = 0x22; // TODO: get this from multihashing-async?

var defaultOptions = {
  hashFn: hashFn
};

var DirSharded =
/*#__PURE__*/
function (_Dir) {
  _inherits(DirSharded, _Dir);

  function DirSharded(props, options) {
    var _this3;

    _classCallCheck(this, DirSharded);

    options = extend({}, defaultOptions, options);
    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(DirSharded).call(this, props, options));
    _this3._bucket = Bucket(options);
    return _this3;
  }

  _createClass(DirSharded, [{
    key: "put",
    value: function () {
      var _put = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(name, value) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._bucket.put(name, value);

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function put(_x6, _x7) {
        return _put.apply(this, arguments);
      }

      return put;
    }()
  }, {
    key: "get",
    value: function get(name) {
      return this._bucket.get(name);
    }
  }, {
    key: "childCount",
    value: function childCount() {
      return this._bucket.leafCount();
    }
  }, {
    key: "directChildrenCount",
    value: function directChildrenCount() {
      return this._bucket.childrenCount();
    }
  }, {
    key: "onlyChild",
    value: function onlyChild() {
      return this._bucket.onlyChild();
    }
  }, {
    key: "eachChildSeries",
    value: function eachChildSeries() {
      var _this = this;

      return _wrapAsyncGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3() {
        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value5, key, value;

        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _context3.prev = 2;
                _iterator = _asyncIterator(_this._bucket.eachLeafSeries());

              case 4:
                _context3.next = 6;
                return _awaitAsyncGenerator(_iterator.next());

              case 6:
                _step = _context3.sent;
                _iteratorNormalCompletion = _step.done;
                _context3.next = 10;
                return _awaitAsyncGenerator(_step.value);

              case 10:
                _value = _context3.sent;

                if (_iteratorNormalCompletion) {
                  _context3.next = 18;
                  break;
                }

                _value5 = _value, key = _value5.key, value = _value5.value;
                _context3.next = 15;
                return {
                  key: key,
                  child: value
                };

              case 15:
                _iteratorNormalCompletion = true;
                _context3.next = 4;
                break;

              case 18:
                _context3.next = 24;
                break;

              case 20:
                _context3.prev = 20;
                _context3.t0 = _context3["catch"](2);
                _didIteratorError = true;
                _iteratorError = _context3.t0;

              case 24:
                _context3.prev = 24;
                _context3.prev = 25;

                if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
                  _context3.next = 29;
                  break;
                }

                _context3.next = 29;
                return _awaitAsyncGenerator(_iterator["return"]());

              case 29:
                _context3.prev = 29;

                if (!_didIteratorError) {
                  _context3.next = 32;
                  break;
                }

                throw _iteratorError;

              case 32:
                return _context3.finish(29);

              case 33:
                return _context3.finish(24);

              case 34:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[2, 20, 24, 34], [25,, 29, 33]]);
      }))();
    }
  }, {
    key: "flush",
    value: function flush(path, ipld) {
      var _this2 = this;

      return _wrapAsyncGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4() {
        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, entry;

        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _context4.prev = 2;
                _iterator2 = _asyncIterator(_flush2(path, _this2._bucket, ipld, _this2.options));

              case 4:
                _context4.next = 6;
                return _awaitAsyncGenerator(_iterator2.next());

              case 6:
                _step2 = _context4.sent;
                _iteratorNormalCompletion2 = _step2.done;
                _context4.next = 10;
                return _awaitAsyncGenerator(_step2.value);

              case 10:
                _value2 = _context4.sent;

                if (_iteratorNormalCompletion2) {
                  _context4.next = 18;
                  break;
                }

                entry = _value2;
                _context4.next = 15;
                return entry;

              case 15:
                _iteratorNormalCompletion2 = true;
                _context4.next = 4;
                break;

              case 18:
                _context4.next = 24;
                break;

              case 20:
                _context4.prev = 20;
                _context4.t0 = _context4["catch"](2);
                _didIteratorError2 = true;
                _iteratorError2 = _context4.t0;

              case 24:
                _context4.prev = 24;
                _context4.prev = 25;

                if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
                  _context4.next = 29;
                  break;
                }

                _context4.next = 29;
                return _awaitAsyncGenerator(_iterator2["return"]());

              case 29:
                _context4.prev = 29;

                if (!_didIteratorError2) {
                  _context4.next = 32;
                  break;
                }

                throw _iteratorError2;

              case 32:
                return _context4.finish(29);

              case 33:
                return _context4.finish(24);

              case 34:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, null, [[2, 20, 24, 34], [25,, 29, 33]]);
      }))();
    }
  }]);

  return DirSharded;
}(Dir);

module.exports = DirSharded;
module.exports.hashFn = hashFn;

function _flush2(_x, _x2, _x3, _x4) {
  return _flush.apply(this, arguments);
}

function _flush() {
  _flush = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee5(path, bucket, ipld, options) {
    var children, links, i, child, labelPrefix, shard, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, subShard, _dir, flushedDir, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _value4, entry, label, value, _label, size, data, dir, node, cid;

    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            children = bucket._children;
            links = [];
            i = 0;

          case 3:
            if (!(i < children.length)) {
              _context5.next = 115;
              break;
            }

            child = children.get(i);

            if (child) {
              _context5.next = 7;
              break;
            }

            return _context5.abrupt("continue", 112);

          case 7:
            labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');

            if (!Bucket.isBucket(child)) {
              _context5.next = 54;
              break;
            }

            shard = void 0;
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _context5.prev = 12;
            _context5.t0 = _asyncIterator;
            _context5.next = 16;
            return _awaitAsyncGenerator(_flush2('', child, ipld, options));

          case 16:
            _context5.t1 = _context5.sent;
            _iterator3 = (0, _context5.t0)(_context5.t1);

          case 18:
            _context5.next = 20;
            return _awaitAsyncGenerator(_iterator3.next());

          case 20:
            _step3 = _context5.sent;
            _iteratorNormalCompletion3 = _step3.done;
            _context5.next = 24;
            return _awaitAsyncGenerator(_step3.value);

          case 24:
            _value3 = _context5.sent;

            if (_iteratorNormalCompletion3) {
              _context5.next = 31;
              break;
            }

            subShard = _value3;
            shard = subShard;

          case 28:
            _iteratorNormalCompletion3 = true;
            _context5.next = 18;
            break;

          case 31:
            _context5.next = 37;
            break;

          case 33:
            _context5.prev = 33;
            _context5.t2 = _context5["catch"](12);
            _didIteratorError3 = true;
            _iteratorError3 = _context5.t2;

          case 37:
            _context5.prev = 37;
            _context5.prev = 38;

            if (!(!_iteratorNormalCompletion3 && _iterator3["return"] != null)) {
              _context5.next = 42;
              break;
            }

            _context5.next = 42;
            return _awaitAsyncGenerator(_iterator3["return"]());

          case 42:
            _context5.prev = 42;

            if (!_didIteratorError3) {
              _context5.next = 45;
              break;
            }

            throw _iteratorError3;

          case 45:
            return _context5.finish(42);

          case 46:
            return _context5.finish(37);

          case 47:
            _context5.t3 = links;
            _context5.next = 50;
            return _awaitAsyncGenerator(new DAGLink(labelPrefix, shard.node.size, shard.cid));

          case 50:
            _context5.t4 = _context5.sent;

            _context5.t3.push.call(_context5.t3, _context5.t4);

            _context5.next = 112;
            break;

          case 54:
            if (!(typeof child.value.flush === 'function')) {
              _context5.next = 96;
              break;
            }

            _dir = child.value;
            flushedDir = void 0;
            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _context5.prev = 59;
            _iterator4 = _asyncIterator(_dir.flush(_dir.path, ipld));

          case 61:
            _context5.next = 63;
            return _awaitAsyncGenerator(_iterator4.next());

          case 63:
            _step4 = _context5.sent;
            _iteratorNormalCompletion4 = _step4.done;
            _context5.next = 67;
            return _awaitAsyncGenerator(_step4.value);

          case 67:
            _value4 = _context5.sent;

            if (_iteratorNormalCompletion4) {
              _context5.next = 76;
              break;
            }

            entry = _value4;
            flushedDir = entry;
            _context5.next = 73;
            return flushedDir;

          case 73:
            _iteratorNormalCompletion4 = true;
            _context5.next = 61;
            break;

          case 76:
            _context5.next = 82;
            break;

          case 78:
            _context5.prev = 78;
            _context5.t5 = _context5["catch"](59);
            _didIteratorError4 = true;
            _iteratorError4 = _context5.t5;

          case 82:
            _context5.prev = 82;
            _context5.prev = 83;

            if (!(!_iteratorNormalCompletion4 && _iterator4["return"] != null)) {
              _context5.next = 87;
              break;
            }

            _context5.next = 87;
            return _awaitAsyncGenerator(_iterator4["return"]());

          case 87:
            _context5.prev = 87;

            if (!_didIteratorError4) {
              _context5.next = 90;
              break;
            }

            throw _iteratorError4;

          case 90:
            return _context5.finish(87);

          case 91:
            return _context5.finish(82);

          case 92:
            label = labelPrefix + child.key;
            links.push(new DAGLink(label, flushedDir.node.size, flushedDir.cid));
            _context5.next = 112;
            break;

          case 96:
            value = child.value;

            if (value.node) {
              _context5.next = 105;
              break;
            }

            if (!value.cid) {
              _context5.next = 104;
              break;
            }

            _context5.next = 101;
            return _awaitAsyncGenerator(ipld.get(value.cid));

          case 101:
            value.node = _context5.sent;
            _context5.next = 105;
            break;

          case 104:
            return _context5.abrupt("continue", 112);

          case 105:
            _label = labelPrefix + child.key;
            size = value.node.length || value.node.size || value.node.Size;
            _context5.t6 = links;
            _context5.next = 110;
            return _awaitAsyncGenerator(new DAGLink(_label, size, value.cid));

          case 110:
            _context5.t7 = _context5.sent;

            _context5.t6.push.call(_context5.t6, _context5.t7);

          case 112:
            i++;
            _context5.next = 3;
            break;

          case 115:
            // go-ipfs uses little endian, that's why we have to
            // reverse the bit field before storing it
            data = Buffer.from(children.bitField().reverse());
            dir = new UnixFS('hamt-sharded-directory', data);
            dir.fanout = bucket.tableSize();
            dir.hashType = options.hashFn.code;
            node = DAGNode.create(dir.marshal(), links);
            _context5.next = 122;
            return _awaitAsyncGenerator(persist(node, ipld, options));

          case 122:
            cid = _context5.sent;
            _context5.next = 125;
            return {
              cid: cid,
              node: node,
              unixfs: dir,
              path: path
            };

          case 125:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, null, [[12, 33, 37, 47], [38,, 42, 46], [59, 78, 82, 92], [83,, 87, 91]]);
  }));
  return _flush.apply(this, arguments);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var mh = __webpack_require__(9);

var mc = __webpack_require__(15);

var persist = function persist(node, ipld, options) {
  if (!options.codec && node.length) {
    options.cidVersion = 1;
    options.codec = 'raw';
  }

  if (isNaN(options.hashAlg)) {
    options.hashAlg = mh.names[options.hashAlg];
  }

  if (options.hashAlg !== mh.names['sha2-256']) {
    options.cidVersion = 1;
  }

  if (options.format) {
    options.codec = options.format;
  }

  var format = mc[options.codec.toUpperCase().replace(/-/g, '_')];
  return ipld.put(node, format, options);
};

module.exports = persist;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var last =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(iterator) {
    var res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 2;
            _iterator = _asyncIterator(iterator);

          case 4:
            _context.next = 6;
            return _iterator.next();

          case 6:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 10;
            return _step.value;

          case 10:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 17;
              break;
            }

            entry = _value;
            res = entry;

          case 14:
            _iteratorNormalCompletion = true;
            _context.next = 4;
            break;

          case 17:
            _context.next = 23;
            break;

          case 19:
            _context.prev = 19;
            _context.t0 = _context["catch"](2);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 23:
            _context.prev = 23;
            _context.prev = 24;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 28;
              break;
            }

            _context.next = 28;
            return _iterator["return"]();

          case 28:
            _context.prev = 28;

            if (!_didIteratorError) {
              _context.next = 31;
              break;
            }

            throw _iteratorError;

          case 31:
            return _context.finish(28);

          case 32:
            return _context.finish(23);

          case 33:
            return _context.abrupt("return", res);

          case 34:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 19, 23, 33], [24,, 28, 32]]);
  }));

  return function last(_x) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = last;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var log = __webpack_require__(5)('ipfs:mfs:utils:update-mfs-root');

var _require = __webpack_require__(8),
    MFS_ROOT_KEY = _require.MFS_ROOT_KEY;

var updateMfsRoot =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(context, cid) {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            log("New MFS root will be ".concat(cid));
            _context.next = 3;
            return context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer);

          case 3:
            return _context.abrupt("return", cid);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function updateMfsRoot(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = updateMfsRoot;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var log = __webpack_require__(5)('ipfs:mfs:utils:update-tree');

var addLink = __webpack_require__(39);

var defaultOptions = {
  shardSplitThreshold: 1000 // loop backwards through the trail, replacing links of all components to update CIDs

};

var updateTree =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(context, trail, options) {
    var index, child, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, node, cid, name, result;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = Object.assign({}, defaultOptions, options);
            log('Trail', trail);
            trail = trail.slice().reverse();
            index = 0;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 6;
            _iterator = _asyncIterator(context.ipld.getMany(trail.map(function (node) {
              return node.cid;
            })));

          case 8:
            _context.next = 10;
            return _iterator.next();

          case 10:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 14;
            return _step.value;

          case 14:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 30;
              break;
            }

            node = _value;
            cid = trail[index].cid;
            name = trail[index].name;
            index++;

            if (child) {
              _context.next = 23;
              break;
            }

            child = {
              cid: cid,
              name: name,
              size: node.size
            };
            return _context.abrupt("continue", 27);

          case 23:
            _context.next = 25;
            return addLink(context, {
              parent: node,
              name: child.name,
              cid: child.cid,
              size: child.size,
              flush: options.flush,
              shardSplitThreshold: options.shardSplitThreshold,
              format: options.format,
              hashAlg: options.hashAlg,
              cidVersion: options.cidVersion
            });

          case 25:
            result = _context.sent;
            // new child for next loop
            child = {
              cid: result.cid,
              name: name,
              size: result.node.size
            };

          case 27:
            _iteratorNormalCompletion = true;
            _context.next = 8;
            break;

          case 30:
            _context.next = 36;
            break;

          case 32:
            _context.prev = 32;
            _context.t0 = _context["catch"](6);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 36:
            _context.prev = 36;
            _context.prev = 37;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 41;
              break;
            }

            _context.next = 41;
            return _iterator["return"]();

          case 41:
            _context.prev = 41;

            if (!_didIteratorError) {
              _context.next = 44;
              break;
            }

            throw _iteratorError;

          case 44:
            return _context.finish(41);

          case 45:
            return _context.finish(36);

          case 46:
            log("Final CID ".concat(child.cid));
            return _context.abrupt("return", child.cid);

          case 48:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[6, 32, 36, 46], [37,, 41, 45]]);
  }));

  return function updateTree(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = updateTree;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _require = __webpack_require__(13),
    DAGNode = _require.DAGNode,
    DAGLink = _require.DAGLink;

var CID = __webpack_require__(11);

var log = __webpack_require__(5)('ipfs:mfs:core:utils:add-link');

var UnixFS = __webpack_require__(6);

var DirSharded = __webpack_require__(34);

var _require2 = __webpack_require__(99),
    updateHamtDirectory = _require2.updateHamtDirectory,
    recreateHamtLevel = _require2.recreateHamtLevel,
    createShard = _require2.createShard,
    toPrefix = _require2.toPrefix,
    addLinksToHamtBucket = _require2.addLinksToHamtBucket;

var errCode = __webpack_require__(2);

var mc = __webpack_require__(15);

var mh = __webpack_require__(9);

var last = __webpack_require__(36);

var addLink =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(context, options) {
    var meta;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!options.parentCid && !options.parent)) {
              _context.next = 2;
              break;
            }

            throw errCode(new Error('No parent node or CID passed to addLink'), 'EINVALIDPARENT');

          case 2:
            if (!(options.parentCid && !CID.isCID(options.parentCid))) {
              _context.next = 4;
              break;
            }

            throw errCode(new Error('Invalid CID passed to addLink'), 'EINVALIDPARENTCID');

          case 4:
            if (options.parent) {
              _context.next = 9;
              break;
            }

            log("Loading parent node ".concat(options.parentCid));
            _context.next = 8;
            return context.ipld.get(options.parentCid);

          case 8:
            options.parent = _context.sent;

          case 9:
            if (options.cid) {
              _context.next = 11;
              break;
            }

            throw errCode(new Error('No child cid passed to addLink'), 'EINVALIDCHILDCID');

          case 11:
            if (options.name) {
              _context.next = 13;
              break;
            }

            throw errCode(new Error('No child name passed to addLink'), 'EINVALIDCHILDNAME');

          case 13:
            if (!CID.isCID(options.cid)) {
              options.cid = new CID(options.cid);
            }

            if (!(!options.size && options.size !== 0)) {
              _context.next = 16;
              break;
            }

            throw errCode(new Error('No child size passed to addLink'), 'EINVALIDCHILDSIZE');

          case 16:
            meta = UnixFS.unmarshal(options.parent.Data);

            if (!(meta.type === 'hamt-sharded-directory')) {
              _context.next = 20;
              break;
            }

            log('Adding link to sharded directory');
            return _context.abrupt("return", addToShardedDirectory(context, options));

          case 20:
            if (!(options.parent.Links.length >= options.shardSplitThreshold)) {
              _context.next = 23;
              break;
            }

            log('Converting directory to sharded directory');
            return _context.abrupt("return", convertToShardedDirectory(context, options));

          case 23:
            log("Adding ".concat(options.name, " (").concat(options.cid, ") to regular directory"));
            return _context.abrupt("return", addToDirectory(context, options));

          case 25:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function addLink(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var convertToShardedDirectory =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(context, options) {
    var result;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return createShard(context, options.parent.Links.map(function (link) {
              return {
                name: link.Name,
                size: link.Tsize,
                cid: link.Hash
              };
            }).concat({
              name: options.name,
              size: options.size,
              cid: options.cid
            }), options);

          case 2:
            result = _context2.sent;
            log("Converted directory to sharded directory ".concat(result.cid));
            return _context2.abrupt("return", result);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function convertToShardedDirectory(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

var addToDirectory =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(context, options) {
    var parent, format, hashAlg, cid;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return DAGNode.rmLink(options.parent, options.name);

          case 2:
            parent = _context3.sent;
            _context3.next = 5;
            return DAGNode.addLink(parent, new DAGLink(options.name, options.size, options.cid));

          case 5:
            parent = _context3.sent;
            format = mc[options.format.toUpperCase().replace(/-/g, '_')];
            hashAlg = mh.names[options.hashAlg]; // Persist the new parent DAGNode

            _context3.next = 10;
            return context.ipld.put(parent, format, {
              cidVersion: options.cidVersion,
              hashAlg: hashAlg,
              hashOnly: !options.flush
            });

          case 10:
            cid = _context3.sent;
            return _context3.abrupt("return", {
              node: parent,
              cid: cid
            });

          case 12:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function addToDirectory(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();

var addToShardedDirectory =
/*#__PURE__*/
function () {
  var _ref4 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee4(context, options) {
    var _ref5, shard, path, result, oldLink, newLink, parent;

    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return addFileToShardedDirectory(context, options);

          case 2:
            _ref5 = _context4.sent;
            shard = _ref5.shard;
            path = _ref5.path;
            _context4.next = 7;
            return last(shard.flush('', context.ipld));

          case 7:
            result = _context4.sent;
            // we have written out the shard, but only one sub-shard will have been written so replace it in the original shard
            oldLink = options.parent.Links.find(function (link) {
              return link.Name.substring(0, 2) === path[0].prefix;
            });
            newLink = result.node.Links.find(function (link) {
              return link.Name.substring(0, 2) === path[0].prefix;
            });
            parent = options.parent;

            if (!oldLink) {
              _context4.next = 15;
              break;
            }

            _context4.next = 14;
            return DAGNode.rmLink(options.parent, oldLink.Name);

          case 14:
            parent = _context4.sent;

          case 15:
            _context4.next = 17;
            return DAGNode.addLink(parent, newLink);

          case 17:
            parent = _context4.sent;
            return _context4.abrupt("return", updateHamtDirectory(context, parent.Links, path[0].bucket, options));

          case 19:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function addToShardedDirectory(_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();

var addFileToShardedDirectory =
/*#__PURE__*/
function () {
  var _ref6 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee5(context, options) {
    var file, rootBucket, shard, position, path, index, _loop, _ret;

    return _regenerator["default"].wrap(function _callee5$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            file = {
              name: options.name,
              cid: options.cid,
              size: options.size // start at the root bucket and descend, loading nodes as we go

            };
            _context6.next = 3;
            return recreateHamtLevel(options.parent.Links);

          case 3:
            rootBucket = _context6.sent;
            shard = new DirSharded({
              root: true,
              dir: true,
              parent: null,
              parentKey: null,
              path: '',
              dirty: true,
              flat: false
            }, options);
            shard._bucket = rootBucket; // load subshards until the bucket & position no longer changes

            _context6.next = 8;
            return rootBucket._findNewBucketAndPos(file.name);

          case 8:
            position = _context6.sent;
            path = toBucketPath(position);
            path[0].node = options.parent;
            index = 0;
            _loop =
            /*#__PURE__*/
            _regenerator["default"].mark(function _loop() {
              var segment, node, link, subShard, _position, nextSegment;

              return _regenerator["default"].wrap(function _loop$(_context5) {
                while (1) {
                  switch (_context5.prev = _context5.next) {
                    case 0:
                      segment = path[index];
                      index++;
                      node = segment.node;
                      link = node.Links.find(function (link) {
                        return link.Name.substring(0, 2) === segment.prefix;
                      });

                      if (link) {
                        _context5.next = 8;
                        break;
                      }

                      // prefix is new, file will be added to the current bucket
                      log("Link ".concat(segment.prefix).concat(file.name, " will be added"));
                      index = path.length;
                      return _context5.abrupt("return", "break");

                    case 8:
                      if (!(link.Name === "".concat(segment.prefix).concat(file.name))) {
                        _context5.next = 12;
                        break;
                      }

                      // file already existed, file will be added to the current bucket
                      log("Link ".concat(segment.prefix).concat(file.name, " will be replaced"));
                      index = path.length;
                      return _context5.abrupt("return", "break");

                    case 12:
                      if (!(link.Name.length > 2)) {
                        _context5.next = 16;
                        break;
                      }

                      // another file had the same prefix, will be replaced with a subshard
                      log("Link ".concat(link.Name, " will be replaced with a subshard"));
                      index = path.length;
                      return _context5.abrupt("return", "break");

                    case 16:
                      // load sub-shard
                      log("Found subshard ".concat(segment.prefix));
                      _context5.next = 19;
                      return context.ipld.get(link.Hash);

                    case 19:
                      subShard = _context5.sent;

                      if (path[index]) {
                        _context5.next = 29;
                        break;
                      }

                      log("Loaded new subshard ".concat(segment.prefix));
                      _context5.next = 24;
                      return recreateHamtLevel(subShard.Links, rootBucket, segment.bucket, parseInt(segment.prefix, 16));

                    case 24:
                      _context5.next = 26;
                      return rootBucket._findNewBucketAndPos(file.name);

                    case 26:
                      _position = _context5.sent;
                      path.push({
                        bucket: _position.bucket,
                        prefix: toPrefix(_position.pos),
                        node: subShard
                      });
                      return _context5.abrupt("return", "break");

                    case 29:
                      nextSegment = path[index]; // add next level's worth of links to bucket

                      _context5.next = 32;
                      return addLinksToHamtBucket(subShard.Links, nextSegment.bucket, rootBucket);

                    case 32:
                      nextSegment.node = subShard;

                    case 33:
                    case "end":
                      return _context5.stop();
                  }
                }
              }, _loop);
            });

          case 13:
            if (!(index < path.length)) {
              _context6.next = 20;
              break;
            }

            return _context6.delegateYield(_loop(), "t0", 15);

          case 15:
            _ret = _context6.t0;

            if (!(_ret === "break")) {
              _context6.next = 18;
              break;
            }

            return _context6.abrupt("break", 20);

          case 18:
            _context6.next = 13;
            break;

          case 20:
            _context6.next = 22;
            return shard._bucket.put(file.name, {
              size: file.size,
              cid: file.cid
            });

          case 22:
            return _context6.abrupt("return", {
              shard: shard,
              path: path
            });

          case 23:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee5);
  }));

  return function addFileToShardedDirectory(_x9, _x10) {
    return _ref6.apply(this, arguments);
  };
}();

var toBucketPath = function toBucketPath(position) {
  var bucket = position.bucket;
  var positionInBucket = position.pos;
  var path = [{
    bucket: bucket,
    prefix: toPrefix(positionInBucket)
  }];
  bucket = position.bucket._parent;
  positionInBucket = position.bucket._posAtParent;

  while (bucket) {
    path.push({
      bucket: bucket,
      prefix: toPrefix(positionInBucket)
    });
    positionInBucket = bucket._posAtParent;
    bucket = bucket._parent;
  }

  path.reverse();
  return path;
};

module.exports = addLink;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

/*<replacement>*/

var Buffer = __webpack_require__(51).Buffer;
/*</replacement>*/


var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;

  switch (encoding && encoding.toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
    case 'raw':
      return true;

    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;

  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';

      case 'latin1':
      case 'binary':
        return 'latin1';

      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;

      default:
        if (retried) return; // undefined

        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
}

; // Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings

function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);

  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
} // StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.


exports.StringDecoder = StringDecoder;

function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;

  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;

    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;

    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;

    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }

  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;

  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }

  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer

StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
}; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.


function utf8CheckByte(_byte) {
  if (_byte <= 0x7F) return 0;else if (_byte >> 5 === 0x06) return 2;else if (_byte >> 4 === 0x0E) return 3;else if (_byte >> 3 === 0x1E) return 4;
  return _byte >> 6 === 0x02 ? -1 : -2;
} // Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.


function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }

    return nb;
  }

  return 0;
} // Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.


function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return "\uFFFD";
  }

  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return "\uFFFD";
    }

    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return "\uFFFD";
      }
    }
  }
} // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.


function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;

  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
} // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.


function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
} // For UTF-8, a replacement character is added when ending on a partial
// character.


function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + "\uFFFD";
  return r;
} // UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.


function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);

    if (r) {
      var c = r.charCodeAt(r.length - 1);

      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }

    return r;
  }

  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
} // For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.


function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';

  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }

  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;

  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }

  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
} // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)


function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (typeof process === 'undefined' || !process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = {
    nextTick: nextTick
  };
} else {
  module.exports = process;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }

  var len = arguments.length;
  var args, i;

  switch (len) {
    case 0:
    case 1:
      return process.nextTick(fn);

    case 2:
      return process.nextTick(function afterTickOne() {
        fn.call(null, arg1);
      });

    case 3:
      return process.nextTick(function afterTickTwo() {
        fn.call(null, arg1, arg2);
      });

    case 4:
      return process.nextTick(function afterTickThree() {
        fn.call(null, arg1, arg2, arg3);
      });

    default:
      args = new Array(len - 1);
      i = 0;

      while (i < args.length) {
        args[i++] = arguments[i];
      }

      return process.nextTick(function afterTick() {
        fn.apply(null, args);
      });
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Reach = __webpack_require__(66);

var internals = {};

exports.keys = function (obj) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return options.symbols !== false ? Reflect.ownKeys(obj) : Object.getOwnPropertyNames(obj); // Defaults to true
};

exports.store = function (source, keys) {
  var storage = new Map();

  for (var i = 0; i < keys.length; ++i) {
    var key = keys[i];
    var value = Reach(source, key);

    if (_typeof(value) === 'object' || typeof value === 'function') {
      storage.set(key, value);
      internals.reachSet(source, key, undefined);
    }
  }

  return storage;
};

exports.restore = function (copy, source, storage) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = storage[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2),
          key = _step$value[0],
          value = _step$value[1];

      internals.reachSet(copy, key, value);
      internals.reachSet(source, key, value);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

internals.reachSet = function (obj, key, value) {
  var path = Array.isArray(key) ? key : key.split('.');
  var ref = obj;

  for (var i = 0; i < path.length; ++i) {
    var segment = path[i];

    if (i + 1 === path.length) {
      ref[segment] = value;
    }

    ref = ref[segment];
  }
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var implementation = __webpack_require__(331);

module.exports = Function.prototype.bind || implementation;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* globals
	Atomics,
	SharedArrayBuffer,
*/

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var undefined; // eslint-disable-line no-shadow-restricted-names

var ThrowTypeError = Object.getOwnPropertyDescriptor ? function () {
  return Object.getOwnPropertyDescriptor(arguments, 'callee').get;
}() : function () {
  throw new TypeError();
};
var hasSymbols = typeof Symbol === 'function' && _typeof(Symbol.iterator) === 'symbol';

var getProto = Object.getPrototypeOf || function (x) {
  return x.__proto__;
}; // eslint-disable-line no-proto


var generator; // = function * () {};

var generatorFunction = generator ? getProto(generator) : undefined;
var asyncFn; // async function() {};

var asyncFunction = asyncFn ? asyncFn.constructor : undefined;
var asyncGen; // async function * () {};

var asyncGenFunction = asyncGen ? getProto(asyncGen) : undefined;
var asyncGenIterator = asyncGen ? asyncGen() : undefined;
var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);
var INTRINSICS = {
  '$ %Array%': Array,
  '$ %ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
  '$ %ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer.prototype,
  '$ %ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
  '$ %ArrayPrototype%': Array.prototype,
  '$ %ArrayProto_entries%': Array.prototype.entries,
  '$ %ArrayProto_forEach%': Array.prototype.forEach,
  '$ %ArrayProto_keys%': Array.prototype.keys,
  '$ %ArrayProto_values%': Array.prototype.values,
  '$ %AsyncFromSyncIteratorPrototype%': undefined,
  '$ %AsyncFunction%': asyncFunction,
  '$ %AsyncFunctionPrototype%': asyncFunction ? asyncFunction.prototype : undefined,
  '$ %AsyncGenerator%': asyncGen ? getProto(asyncGenIterator) : undefined,
  '$ %AsyncGeneratorFunction%': asyncGenFunction,
  '$ %AsyncGeneratorPrototype%': asyncGenFunction ? asyncGenFunction.prototype : undefined,
  '$ %AsyncIteratorPrototype%': asyncGenIterator && hasSymbols && Symbol.asyncIterator ? asyncGenIterator[Symbol.asyncIterator]() : undefined,
  '$ %Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
  '$ %Boolean%': Boolean,
  '$ %BooleanPrototype%': Boolean.prototype,
  '$ %DataView%': typeof DataView === 'undefined' ? undefined : DataView,
  '$ %DataViewPrototype%': typeof DataView === 'undefined' ? undefined : DataView.prototype,
  '$ %Date%': Date,
  '$ %DatePrototype%': Date.prototype,
  '$ %decodeURI%': decodeURI,
  '$ %decodeURIComponent%': decodeURIComponent,
  '$ %encodeURI%': encodeURI,
  '$ %encodeURIComponent%': encodeURIComponent,
  '$ %Error%': Error,
  '$ %ErrorPrototype%': Error.prototype,
  '$ %eval%': eval,
  // eslint-disable-line no-eval
  '$ %EvalError%': EvalError,
  '$ %EvalErrorPrototype%': EvalError.prototype,
  '$ %Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
  '$ %Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined : Float32Array.prototype,
  '$ %Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
  '$ %Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined : Float64Array.prototype,
  '$ %Function%': Function,
  '$ %FunctionPrototype%': Function.prototype,
  '$ %Generator%': generator ? getProto(generator()) : undefined,
  '$ %GeneratorFunction%': generatorFunction,
  '$ %GeneratorPrototype%': generatorFunction ? generatorFunction.prototype : undefined,
  '$ %Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
  '$ %Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined : Int8Array.prototype,
  '$ %Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
  '$ %Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined : Int8Array.prototype,
  '$ %Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
  '$ %Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined : Int32Array.prototype,
  '$ %isFinite%': isFinite,
  '$ %isNaN%': isNaN,
  '$ %IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
  '$ %JSON%': JSON,
  '$ %JSONParse%': JSON.parse,
  '$ %Map%': typeof Map === 'undefined' ? undefined : Map,
  '$ %MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
  '$ %MapPrototype%': typeof Map === 'undefined' ? undefined : Map.prototype,
  '$ %Math%': Math,
  '$ %Number%': Number,
  '$ %NumberPrototype%': Number.prototype,
  '$ %Object%': Object,
  '$ %ObjectPrototype%': Object.prototype,
  '$ %ObjProto_toString%': Object.prototype.toString,
  '$ %ObjProto_valueOf%': Object.prototype.valueOf,
  '$ %parseFloat%': parseFloat,
  '$ %parseInt%': parseInt,
  '$ %Promise%': typeof Promise === 'undefined' ? undefined : Promise,
  '$ %PromisePrototype%': typeof Promise === 'undefined' ? undefined : Promise.prototype,
  '$ %PromiseProto_then%': typeof Promise === 'undefined' ? undefined : Promise.prototype.then,
  '$ %Promise_all%': typeof Promise === 'undefined' ? undefined : Promise.all,
  '$ %Promise_reject%': typeof Promise === 'undefined' ? undefined : Promise.reject,
  '$ %Promise_resolve%': typeof Promise === 'undefined' ? undefined : Promise.resolve,
  '$ %Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
  '$ %RangeError%': RangeError,
  '$ %RangeErrorPrototype%': RangeError.prototype,
  '$ %ReferenceError%': ReferenceError,
  '$ %ReferenceErrorPrototype%': ReferenceError.prototype,
  '$ %Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
  '$ %RegExp%': RegExp,
  '$ %RegExpPrototype%': RegExp.prototype,
  '$ %Set%': typeof Set === 'undefined' ? undefined : Set,
  '$ %SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
  '$ %SetPrototype%': typeof Set === 'undefined' ? undefined : Set.prototype,
  '$ %SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
  '$ %SharedArrayBufferPrototype%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer.prototype,
  '$ %String%': String,
  '$ %StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
  '$ %StringPrototype%': String.prototype,
  '$ %Symbol%': hasSymbols ? Symbol : undefined,
  '$ %SymbolPrototype%': hasSymbols ? Symbol.prototype : undefined,
  '$ %SyntaxError%': SyntaxError,
  '$ %SyntaxErrorPrototype%': SyntaxError.prototype,
  '$ %ThrowTypeError%': ThrowTypeError,
  '$ %TypedArray%': TypedArray,
  '$ %TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined,
  '$ %TypeError%': TypeError,
  '$ %TypeErrorPrototype%': TypeError.prototype,
  '$ %Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
  '$ %Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array.prototype,
  '$ %Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
  '$ %Uint8ClampedArrayPrototype%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray.prototype,
  '$ %Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
  '$ %Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array.prototype,
  '$ %Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
  '$ %Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array.prototype,
  '$ %URIError%': URIError,
  '$ %URIErrorPrototype%': URIError.prototype,
  '$ %WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
  '$ %WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined : WeakMap.prototype,
  '$ %WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,
  '$ %WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined : WeakSet.prototype
};

module.exports = function GetIntrinsic(name, allowMissing) {
  if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
    throw new TypeError('"allowMissing" argument must be a boolean');
  }

  var key = '$ ' + name;

  if (!(key in INTRINSICS)) {
    throw new SyntaxError('intrinsic ' + name + ' does not exist!');
  } // istanbul ignore if // hopefully this is impossible to test :-)


  if (typeof INTRINSICS[key] === 'undefined' && !allowMissing) {
    throw new TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
  }

  return INTRINSICS[key];
};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var objectAssign = __webpack_require__(132); // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */


function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }

  if (y < x) {
    return 1;
  }

  return 0;
}

function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }

  return !!(b != null && b._isBuffer);
} // based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


var util = __webpack_require__(69);

var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;

var functionsHaveNames = function () {
  return function foo() {}.name === 'foo';
}();

function pToString(obj) {
  return Object.prototype.toString.call(obj);
}

function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }

  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }

  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }

  if (!arrbuf) {
    return false;
  }

  if (arrbuf instanceof DataView) {
    return true;
  }

  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }

  return false;
} // 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.


var assert = module.exports = ok; // 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/; // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js

function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }

  if (functionsHaveNames) {
    return func.name;
  }

  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;

  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }

  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();

    if (err.stack) {
      var out = err.stack; // try to strip useless frames

      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);

      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
}; // assert.AssertionError instanceof Error


util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }

  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' + name + ']';
}

function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);
} // At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.
// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.


function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
} // EXTENSION! allows for well behaved errors defined elsewhere.


assert.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}

assert.ok = ok; // 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
}; // 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);


assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
}; // 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);


assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0; // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
  } else if ((actual === null || _typeof(actual) !== 'object') && (expected === null || _typeof(expected) !== 'object')) {
    return strict ? actual === expected : actual == expected; // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0; // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {
      actual: [],
      expected: []
    };
    var actualIndex = memos.actual.indexOf(actual);

    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);
    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined) return false; // if one is a primitive, the other must be same

  if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;

  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }

  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i; // having the same number of owned properties (keys incorporates
  // hasOwnProperty)

  if (ka.length !== kb.length) return false; //the same set of keys (although not necessarily the same order),

  ka.sort();
  kb.sort(); //~~~cheap key test

  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i]) return false;
  } //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test


  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
  }

  return true;
} // 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);


assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;

function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
} // 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);


assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
}; // 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);


assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {// Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;

  try {
    block();
  } catch (e) {
    error = e;
  }

  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);
  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
    throw actual;
  }
} // 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);


assert["throws"] = function (block,
/*optional*/
error,
/*optional*/
message) {
  _throws(true, block, error, message);
}; // EXTENSION! This is annoying to write outside this module.


assert.doesNotThrow = function (block,
/*optional*/
error,
/*optional*/
message) {
  _throws(false, block, error, message);
};

assert.ifError = function (err) {
  if (err) throw err;
}; // Expose a strict only variant of assert


function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}

assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }

  return keys;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var abortCb = __webpack_require__(82);

module.exports = function values(array, onAbort) {
  if (!array) return function (abort, cb) {
    if (abort) return abortCb(cb, abort, onAbort);
    return cb(true);
  };
  if (!Array.isArray(array)) array = Object.keys(array).map(function (k) {
    return array[k];
  });
  var i = 0;
  return function (abort, cb) {
    if (abort) return abortCb(cb, abort, onAbort);
    if (i >= array.length) cb(true);else cb(null, array[i++]);
  };
};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var drain = __webpack_require__(24);

module.exports = function reduce(reducer, acc, cb) {
  if (!cb) cb = acc, acc = null;
  var sink = drain(function (data) {
    acc = reducer(acc, data);
  }, function (err) {
    cb(err, acc);
  });
  if (arguments.length === 2) return function (source) {
    source(null, function (end, data) {
      //if ended immediately, and no initial...
      if (end) return cb(end === true ? null : end);
      acc = data;
      sink(source);
    });
  };else return sink;
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var tester = __webpack_require__(84);

module.exports = function filter(test) {
  //regexp
  test = tester(test);
  return function (read) {
    return function next(end, cb) {
      var sync,
          loop = true;

      while (loop) {
        loop = false;
        sync = true;
        read(end, function (end, data) {
          if (!end && !test(data)) return sync ? loop = true : next(end, cb);
          cb(end, data);
        });
        sync = false;
      }
    };
  };
};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pull = __webpack_require__(81);

var Source = __webpack_require__(191);

var path = __webpack_require__(192);

var os = __webpack_require__(193);

var uuid = __webpack_require__(80);

exports.asyncFilter = function (test) {
  var busy = false;
  var abortCb;
  var aborted;
  return function (read) {
    return function next(abort, cb) {
      if (aborted) return cb(aborted);

      if (abort) {
        aborted = abort;

        if (!busy) {
          read(abort, cb);
        } else {
          read(abort, function () {
            // if we are still busy, wait for the test to complete.
            if (busy) abortCb = cb;else cb(abort);
          });
        }
      } else {
        read(null, function (end, data) {
          if (end) cb(end);else if (aborted) cb(aborted);else {
            busy = true;
            test(data, function (err, valid) {
              busy = false;

              if (aborted) {
                cb(aborted);
                abortCb(aborted);
              } else if (err) {
                next(err, cb);
              } else if (valid) {
                cb(null, data);
              } else {
                next(null, cb);
              }
            });
          }
        });
      }
    };
  };
};

exports.asyncSort = function (sorter) {
  var source = Source();
  var sink = pull.collect(function (err, ary) {
    if (err) {
      return source.abort(err);
    }

    sorter(ary, function (err, res) {
      if (err) {
        return source.abort(err);
      }

      source.resolve(pull.values(ary));
    });
  });
  return function (read) {
    sink(read);
    return source;
  };
};

exports.replaceStartWith = function (s, r) {
  var matcher = new RegExp('^' + r);
  return s.replace(matcher, '');
};

exports.tmpdir = function () {
  return path.join(os.tmpdir(), uuid());
};

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(1);

var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}

if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
}

SafeBuffer.prototype = Object.create(Buffer.prototype); // Copy static methods from Buffer

copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }

  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  var buf = Buffer(size);

  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }

  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return buffer.SlowBuffer(size);
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {// THIS FILE IS GENERATED, DO NO EDIT MANUALLY
// For more information see the README.md

/* eslint-disable dot-notation */
 // serialization

exports['protobuf'] = Buffer.from('50', 'hex');
exports['cbor'] = Buffer.from('51', 'hex');
exports['rlp'] = Buffer.from('60', 'hex');
exports['bencode'] = Buffer.from('63', 'hex');
exports['json'] = Buffer.from('0200', 'hex');
exports['messagepack'] = Buffer.from('0201', 'hex'); // multiformat

exports['multicodec'] = Buffer.from('30', 'hex');
exports['multihash'] = Buffer.from('31', 'hex');
exports['multiaddr'] = Buffer.from('32', 'hex');
exports['multibase'] = Buffer.from('33', 'hex'); // multihash

exports['identity'] = Buffer.from('00', 'hex');
exports['sha1'] = Buffer.from('11', 'hex');
exports['sha2-256'] = Buffer.from('12', 'hex');
exports['sha2-512'] = Buffer.from('13', 'hex');
exports['sha3-512'] = Buffer.from('14', 'hex');
exports['sha3-384'] = Buffer.from('15', 'hex');
exports['sha3-256'] = Buffer.from('16', 'hex');
exports['sha3-224'] = Buffer.from('17', 'hex');
exports['shake-128'] = Buffer.from('18', 'hex');
exports['shake-256'] = Buffer.from('19', 'hex');
exports['keccak-224'] = Buffer.from('1a', 'hex');
exports['keccak-256'] = Buffer.from('1b', 'hex');
exports['keccak-384'] = Buffer.from('1c', 'hex');
exports['keccak-512'] = Buffer.from('1d', 'hex');
exports['murmur3-128'] = Buffer.from('22', 'hex');
exports['murmur3-32'] = Buffer.from('23', 'hex');
exports['dbl-sha2-256'] = Buffer.from('56', 'hex');
exports['md4'] = Buffer.from('d4', 'hex');
exports['md5'] = Buffer.from('d5', 'hex');
exports['bmt'] = Buffer.from('d6', 'hex');
exports['x11'] = Buffer.from('1100', 'hex');
exports['blake2b-8'] = Buffer.from('b201', 'hex');
exports['blake2b-16'] = Buffer.from('b202', 'hex');
exports['blake2b-24'] = Buffer.from('b203', 'hex');
exports['blake2b-32'] = Buffer.from('b204', 'hex');
exports['blake2b-40'] = Buffer.from('b205', 'hex');
exports['blake2b-48'] = Buffer.from('b206', 'hex');
exports['blake2b-56'] = Buffer.from('b207', 'hex');
exports['blake2b-64'] = Buffer.from('b208', 'hex');
exports['blake2b-72'] = Buffer.from('b209', 'hex');
exports['blake2b-80'] = Buffer.from('b20a', 'hex');
exports['blake2b-88'] = Buffer.from('b20b', 'hex');
exports['blake2b-96'] = Buffer.from('b20c', 'hex');
exports['blake2b-104'] = Buffer.from('b20d', 'hex');
exports['blake2b-112'] = Buffer.from('b20e', 'hex');
exports['blake2b-120'] = Buffer.from('b20f', 'hex');
exports['blake2b-128'] = Buffer.from('b210', 'hex');
exports['blake2b-136'] = Buffer.from('b211', 'hex');
exports['blake2b-144'] = Buffer.from('b212', 'hex');
exports['blake2b-152'] = Buffer.from('b213', 'hex');
exports['blake2b-160'] = Buffer.from('b214', 'hex');
exports['blake2b-168'] = Buffer.from('b215', 'hex');
exports['blake2b-176'] = Buffer.from('b216', 'hex');
exports['blake2b-184'] = Buffer.from('b217', 'hex');
exports['blake2b-192'] = Buffer.from('b218', 'hex');
exports['blake2b-200'] = Buffer.from('b219', 'hex');
exports['blake2b-208'] = Buffer.from('b21a', 'hex');
exports['blake2b-216'] = Buffer.from('b21b', 'hex');
exports['blake2b-224'] = Buffer.from('b21c', 'hex');
exports['blake2b-232'] = Buffer.from('b21d', 'hex');
exports['blake2b-240'] = Buffer.from('b21e', 'hex');
exports['blake2b-248'] = Buffer.from('b21f', 'hex');
exports['blake2b-256'] = Buffer.from('b220', 'hex');
exports['blake2b-264'] = Buffer.from('b221', 'hex');
exports['blake2b-272'] = Buffer.from('b222', 'hex');
exports['blake2b-280'] = Buffer.from('b223', 'hex');
exports['blake2b-288'] = Buffer.from('b224', 'hex');
exports['blake2b-296'] = Buffer.from('b225', 'hex');
exports['blake2b-304'] = Buffer.from('b226', 'hex');
exports['blake2b-312'] = Buffer.from('b227', 'hex');
exports['blake2b-320'] = Buffer.from('b228', 'hex');
exports['blake2b-328'] = Buffer.from('b229', 'hex');
exports['blake2b-336'] = Buffer.from('b22a', 'hex');
exports['blake2b-344'] = Buffer.from('b22b', 'hex');
exports['blake2b-352'] = Buffer.from('b22c', 'hex');
exports['blake2b-360'] = Buffer.from('b22d', 'hex');
exports['blake2b-368'] = Buffer.from('b22e', 'hex');
exports['blake2b-376'] = Buffer.from('b22f', 'hex');
exports['blake2b-384'] = Buffer.from('b230', 'hex');
exports['blake2b-392'] = Buffer.from('b231', 'hex');
exports['blake2b-400'] = Buffer.from('b232', 'hex');
exports['blake2b-408'] = Buffer.from('b233', 'hex');
exports['blake2b-416'] = Buffer.from('b234', 'hex');
exports['blake2b-424'] = Buffer.from('b235', 'hex');
exports['blake2b-432'] = Buffer.from('b236', 'hex');
exports['blake2b-440'] = Buffer.from('b237', 'hex');
exports['blake2b-448'] = Buffer.from('b238', 'hex');
exports['blake2b-456'] = Buffer.from('b239', 'hex');
exports['blake2b-464'] = Buffer.from('b23a', 'hex');
exports['blake2b-472'] = Buffer.from('b23b', 'hex');
exports['blake2b-480'] = Buffer.from('b23c', 'hex');
exports['blake2b-488'] = Buffer.from('b23d', 'hex');
exports['blake2b-496'] = Buffer.from('b23e', 'hex');
exports['blake2b-504'] = Buffer.from('b23f', 'hex');
exports['blake2b-512'] = Buffer.from('b240', 'hex');
exports['blake2s-8'] = Buffer.from('b241', 'hex');
exports['blake2s-16'] = Buffer.from('b242', 'hex');
exports['blake2s-24'] = Buffer.from('b243', 'hex');
exports['blake2s-32'] = Buffer.from('b244', 'hex');
exports['blake2s-40'] = Buffer.from('b245', 'hex');
exports['blake2s-48'] = Buffer.from('b246', 'hex');
exports['blake2s-56'] = Buffer.from('b247', 'hex');
exports['blake2s-64'] = Buffer.from('b248', 'hex');
exports['blake2s-72'] = Buffer.from('b249', 'hex');
exports['blake2s-80'] = Buffer.from('b24a', 'hex');
exports['blake2s-88'] = Buffer.from('b24b', 'hex');
exports['blake2s-96'] = Buffer.from('b24c', 'hex');
exports['blake2s-104'] = Buffer.from('b24d', 'hex');
exports['blake2s-112'] = Buffer.from('b24e', 'hex');
exports['blake2s-120'] = Buffer.from('b24f', 'hex');
exports['blake2s-128'] = Buffer.from('b250', 'hex');
exports['blake2s-136'] = Buffer.from('b251', 'hex');
exports['blake2s-144'] = Buffer.from('b252', 'hex');
exports['blake2s-152'] = Buffer.from('b253', 'hex');
exports['blake2s-160'] = Buffer.from('b254', 'hex');
exports['blake2s-168'] = Buffer.from('b255', 'hex');
exports['blake2s-176'] = Buffer.from('b256', 'hex');
exports['blake2s-184'] = Buffer.from('b257', 'hex');
exports['blake2s-192'] = Buffer.from('b258', 'hex');
exports['blake2s-200'] = Buffer.from('b259', 'hex');
exports['blake2s-208'] = Buffer.from('b25a', 'hex');
exports['blake2s-216'] = Buffer.from('b25b', 'hex');
exports['blake2s-224'] = Buffer.from('b25c', 'hex');
exports['blake2s-232'] = Buffer.from('b25d', 'hex');
exports['blake2s-240'] = Buffer.from('b25e', 'hex');
exports['blake2s-248'] = Buffer.from('b25f', 'hex');
exports['blake2s-256'] = Buffer.from('b260', 'hex');
exports['skein256-8'] = Buffer.from('b301', 'hex');
exports['skein256-16'] = Buffer.from('b302', 'hex');
exports['skein256-24'] = Buffer.from('b303', 'hex');
exports['skein256-32'] = Buffer.from('b304', 'hex');
exports['skein256-40'] = Buffer.from('b305', 'hex');
exports['skein256-48'] = Buffer.from('b306', 'hex');
exports['skein256-56'] = Buffer.from('b307', 'hex');
exports['skein256-64'] = Buffer.from('b308', 'hex');
exports['skein256-72'] = Buffer.from('b309', 'hex');
exports['skein256-80'] = Buffer.from('b30a', 'hex');
exports['skein256-88'] = Buffer.from('b30b', 'hex');
exports['skein256-96'] = Buffer.from('b30c', 'hex');
exports['skein256-104'] = Buffer.from('b30d', 'hex');
exports['skein256-112'] = Buffer.from('b30e', 'hex');
exports['skein256-120'] = Buffer.from('b30f', 'hex');
exports['skein256-128'] = Buffer.from('b310', 'hex');
exports['skein256-136'] = Buffer.from('b311', 'hex');
exports['skein256-144'] = Buffer.from('b312', 'hex');
exports['skein256-152'] = Buffer.from('b313', 'hex');
exports['skein256-160'] = Buffer.from('b314', 'hex');
exports['skein256-168'] = Buffer.from('b315', 'hex');
exports['skein256-176'] = Buffer.from('b316', 'hex');
exports['skein256-184'] = Buffer.from('b317', 'hex');
exports['skein256-192'] = Buffer.from('b318', 'hex');
exports['skein256-200'] = Buffer.from('b319', 'hex');
exports['skein256-208'] = Buffer.from('b31a', 'hex');
exports['skein256-216'] = Buffer.from('b31b', 'hex');
exports['skein256-224'] = Buffer.from('b31c', 'hex');
exports['skein256-232'] = Buffer.from('b31d', 'hex');
exports['skein256-240'] = Buffer.from('b31e', 'hex');
exports['skein256-248'] = Buffer.from('b31f', 'hex');
exports['skein256-256'] = Buffer.from('b320', 'hex');
exports['skein512-8'] = Buffer.from('b321', 'hex');
exports['skein512-16'] = Buffer.from('b322', 'hex');
exports['skein512-24'] = Buffer.from('b323', 'hex');
exports['skein512-32'] = Buffer.from('b324', 'hex');
exports['skein512-40'] = Buffer.from('b325', 'hex');
exports['skein512-48'] = Buffer.from('b326', 'hex');
exports['skein512-56'] = Buffer.from('b327', 'hex');
exports['skein512-64'] = Buffer.from('b328', 'hex');
exports['skein512-72'] = Buffer.from('b329', 'hex');
exports['skein512-80'] = Buffer.from('b32a', 'hex');
exports['skein512-88'] = Buffer.from('b32b', 'hex');
exports['skein512-96'] = Buffer.from('b32c', 'hex');
exports['skein512-104'] = Buffer.from('b32d', 'hex');
exports['skein512-112'] = Buffer.from('b32e', 'hex');
exports['skein512-120'] = Buffer.from('b32f', 'hex');
exports['skein512-128'] = Buffer.from('b330', 'hex');
exports['skein512-136'] = Buffer.from('b331', 'hex');
exports['skein512-144'] = Buffer.from('b332', 'hex');
exports['skein512-152'] = Buffer.from('b333', 'hex');
exports['skein512-160'] = Buffer.from('b334', 'hex');
exports['skein512-168'] = Buffer.from('b335', 'hex');
exports['skein512-176'] = Buffer.from('b336', 'hex');
exports['skein512-184'] = Buffer.from('b337', 'hex');
exports['skein512-192'] = Buffer.from('b338', 'hex');
exports['skein512-200'] = Buffer.from('b339', 'hex');
exports['skein512-208'] = Buffer.from('b33a', 'hex');
exports['skein512-216'] = Buffer.from('b33b', 'hex');
exports['skein512-224'] = Buffer.from('b33c', 'hex');
exports['skein512-232'] = Buffer.from('b33d', 'hex');
exports['skein512-240'] = Buffer.from('b33e', 'hex');
exports['skein512-248'] = Buffer.from('b33f', 'hex');
exports['skein512-256'] = Buffer.from('b340', 'hex');
exports['skein512-264'] = Buffer.from('b341', 'hex');
exports['skein512-272'] = Buffer.from('b342', 'hex');
exports['skein512-280'] = Buffer.from('b343', 'hex');
exports['skein512-288'] = Buffer.from('b344', 'hex');
exports['skein512-296'] = Buffer.from('b345', 'hex');
exports['skein512-304'] = Buffer.from('b346', 'hex');
exports['skein512-312'] = Buffer.from('b347', 'hex');
exports['skein512-320'] = Buffer.from('b348', 'hex');
exports['skein512-328'] = Buffer.from('b349', 'hex');
exports['skein512-336'] = Buffer.from('b34a', 'hex');
exports['skein512-344'] = Buffer.from('b34b', 'hex');
exports['skein512-352'] = Buffer.from('b34c', 'hex');
exports['skein512-360'] = Buffer.from('b34d', 'hex');
exports['skein512-368'] = Buffer.from('b34e', 'hex');
exports['skein512-376'] = Buffer.from('b34f', 'hex');
exports['skein512-384'] = Buffer.from('b350', 'hex');
exports['skein512-392'] = Buffer.from('b351', 'hex');
exports['skein512-400'] = Buffer.from('b352', 'hex');
exports['skein512-408'] = Buffer.from('b353', 'hex');
exports['skein512-416'] = Buffer.from('b354', 'hex');
exports['skein512-424'] = Buffer.from('b355', 'hex');
exports['skein512-432'] = Buffer.from('b356', 'hex');
exports['skein512-440'] = Buffer.from('b357', 'hex');
exports['skein512-448'] = Buffer.from('b358', 'hex');
exports['skein512-456'] = Buffer.from('b359', 'hex');
exports['skein512-464'] = Buffer.from('b35a', 'hex');
exports['skein512-472'] = Buffer.from('b35b', 'hex');
exports['skein512-480'] = Buffer.from('b35c', 'hex');
exports['skein512-488'] = Buffer.from('b35d', 'hex');
exports['skein512-496'] = Buffer.from('b35e', 'hex');
exports['skein512-504'] = Buffer.from('b35f', 'hex');
exports['skein512-512'] = Buffer.from('b360', 'hex');
exports['skein1024-8'] = Buffer.from('b361', 'hex');
exports['skein1024-16'] = Buffer.from('b362', 'hex');
exports['skein1024-24'] = Buffer.from('b363', 'hex');
exports['skein1024-32'] = Buffer.from('b364', 'hex');
exports['skein1024-40'] = Buffer.from('b365', 'hex');
exports['skein1024-48'] = Buffer.from('b366', 'hex');
exports['skein1024-56'] = Buffer.from('b367', 'hex');
exports['skein1024-64'] = Buffer.from('b368', 'hex');
exports['skein1024-72'] = Buffer.from('b369', 'hex');
exports['skein1024-80'] = Buffer.from('b36a', 'hex');
exports['skein1024-88'] = Buffer.from('b36b', 'hex');
exports['skein1024-96'] = Buffer.from('b36c', 'hex');
exports['skein1024-104'] = Buffer.from('b36d', 'hex');
exports['skein1024-112'] = Buffer.from('b36e', 'hex');
exports['skein1024-120'] = Buffer.from('b36f', 'hex');
exports['skein1024-128'] = Buffer.from('b370', 'hex');
exports['skein1024-136'] = Buffer.from('b371', 'hex');
exports['skein1024-144'] = Buffer.from('b372', 'hex');
exports['skein1024-152'] = Buffer.from('b373', 'hex');
exports['skein1024-160'] = Buffer.from('b374', 'hex');
exports['skein1024-168'] = Buffer.from('b375', 'hex');
exports['skein1024-176'] = Buffer.from('b376', 'hex');
exports['skein1024-184'] = Buffer.from('b377', 'hex');
exports['skein1024-192'] = Buffer.from('b378', 'hex');
exports['skein1024-200'] = Buffer.from('b379', 'hex');
exports['skein1024-208'] = Buffer.from('b37a', 'hex');
exports['skein1024-216'] = Buffer.from('b37b', 'hex');
exports['skein1024-224'] = Buffer.from('b37c', 'hex');
exports['skein1024-232'] = Buffer.from('b37d', 'hex');
exports['skein1024-240'] = Buffer.from('b37e', 'hex');
exports['skein1024-248'] = Buffer.from('b37f', 'hex');
exports['skein1024-256'] = Buffer.from('b380', 'hex');
exports['skein1024-264'] = Buffer.from('b381', 'hex');
exports['skein1024-272'] = Buffer.from('b382', 'hex');
exports['skein1024-280'] = Buffer.from('b383', 'hex');
exports['skein1024-288'] = Buffer.from('b384', 'hex');
exports['skein1024-296'] = Buffer.from('b385', 'hex');
exports['skein1024-304'] = Buffer.from('b386', 'hex');
exports['skein1024-312'] = Buffer.from('b387', 'hex');
exports['skein1024-320'] = Buffer.from('b388', 'hex');
exports['skein1024-328'] = Buffer.from('b389', 'hex');
exports['skein1024-336'] = Buffer.from('b38a', 'hex');
exports['skein1024-344'] = Buffer.from('b38b', 'hex');
exports['skein1024-352'] = Buffer.from('b38c', 'hex');
exports['skein1024-360'] = Buffer.from('b38d', 'hex');
exports['skein1024-368'] = Buffer.from('b38e', 'hex');
exports['skein1024-376'] = Buffer.from('b38f', 'hex');
exports['skein1024-384'] = Buffer.from('b390', 'hex');
exports['skein1024-392'] = Buffer.from('b391', 'hex');
exports['skein1024-400'] = Buffer.from('b392', 'hex');
exports['skein1024-408'] = Buffer.from('b393', 'hex');
exports['skein1024-416'] = Buffer.from('b394', 'hex');
exports['skein1024-424'] = Buffer.from('b395', 'hex');
exports['skein1024-432'] = Buffer.from('b396', 'hex');
exports['skein1024-440'] = Buffer.from('b397', 'hex');
exports['skein1024-448'] = Buffer.from('b398', 'hex');
exports['skein1024-456'] = Buffer.from('b399', 'hex');
exports['skein1024-464'] = Buffer.from('b39a', 'hex');
exports['skein1024-472'] = Buffer.from('b39b', 'hex');
exports['skein1024-480'] = Buffer.from('b39c', 'hex');
exports['skein1024-488'] = Buffer.from('b39d', 'hex');
exports['skein1024-496'] = Buffer.from('b39e', 'hex');
exports['skein1024-504'] = Buffer.from('b39f', 'hex');
exports['skein1024-512'] = Buffer.from('b3a0', 'hex');
exports['skein1024-520'] = Buffer.from('b3a1', 'hex');
exports['skein1024-528'] = Buffer.from('b3a2', 'hex');
exports['skein1024-536'] = Buffer.from('b3a3', 'hex');
exports['skein1024-544'] = Buffer.from('b3a4', 'hex');
exports['skein1024-552'] = Buffer.from('b3a5', 'hex');
exports['skein1024-560'] = Buffer.from('b3a6', 'hex');
exports['skein1024-568'] = Buffer.from('b3a7', 'hex');
exports['skein1024-576'] = Buffer.from('b3a8', 'hex');
exports['skein1024-584'] = Buffer.from('b3a9', 'hex');
exports['skein1024-592'] = Buffer.from('b3aa', 'hex');
exports['skein1024-600'] = Buffer.from('b3ab', 'hex');
exports['skein1024-608'] = Buffer.from('b3ac', 'hex');
exports['skein1024-616'] = Buffer.from('b3ad', 'hex');
exports['skein1024-624'] = Buffer.from('b3ae', 'hex');
exports['skein1024-632'] = Buffer.from('b3af', 'hex');
exports['skein1024-640'] = Buffer.from('b3b0', 'hex');
exports['skein1024-648'] = Buffer.from('b3b1', 'hex');
exports['skein1024-656'] = Buffer.from('b3b2', 'hex');
exports['skein1024-664'] = Buffer.from('b3b3', 'hex');
exports['skein1024-672'] = Buffer.from('b3b4', 'hex');
exports['skein1024-680'] = Buffer.from('b3b5', 'hex');
exports['skein1024-688'] = Buffer.from('b3b6', 'hex');
exports['skein1024-696'] = Buffer.from('b3b7', 'hex');
exports['skein1024-704'] = Buffer.from('b3b8', 'hex');
exports['skein1024-712'] = Buffer.from('b3b9', 'hex');
exports['skein1024-720'] = Buffer.from('b3ba', 'hex');
exports['skein1024-728'] = Buffer.from('b3bb', 'hex');
exports['skein1024-736'] = Buffer.from('b3bc', 'hex');
exports['skein1024-744'] = Buffer.from('b3bd', 'hex');
exports['skein1024-752'] = Buffer.from('b3be', 'hex');
exports['skein1024-760'] = Buffer.from('b3bf', 'hex');
exports['skein1024-768'] = Buffer.from('b3c0', 'hex');
exports['skein1024-776'] = Buffer.from('b3c1', 'hex');
exports['skein1024-784'] = Buffer.from('b3c2', 'hex');
exports['skein1024-792'] = Buffer.from('b3c3', 'hex');
exports['skein1024-800'] = Buffer.from('b3c4', 'hex');
exports['skein1024-808'] = Buffer.from('b3c5', 'hex');
exports['skein1024-816'] = Buffer.from('b3c6', 'hex');
exports['skein1024-824'] = Buffer.from('b3c7', 'hex');
exports['skein1024-832'] = Buffer.from('b3c8', 'hex');
exports['skein1024-840'] = Buffer.from('b3c9', 'hex');
exports['skein1024-848'] = Buffer.from('b3ca', 'hex');
exports['skein1024-856'] = Buffer.from('b3cb', 'hex');
exports['skein1024-864'] = Buffer.from('b3cc', 'hex');
exports['skein1024-872'] = Buffer.from('b3cd', 'hex');
exports['skein1024-880'] = Buffer.from('b3ce', 'hex');
exports['skein1024-888'] = Buffer.from('b3cf', 'hex');
exports['skein1024-896'] = Buffer.from('b3d0', 'hex');
exports['skein1024-904'] = Buffer.from('b3d1', 'hex');
exports['skein1024-912'] = Buffer.from('b3d2', 'hex');
exports['skein1024-920'] = Buffer.from('b3d3', 'hex');
exports['skein1024-928'] = Buffer.from('b3d4', 'hex');
exports['skein1024-936'] = Buffer.from('b3d5', 'hex');
exports['skein1024-944'] = Buffer.from('b3d6', 'hex');
exports['skein1024-952'] = Buffer.from('b3d7', 'hex');
exports['skein1024-960'] = Buffer.from('b3d8', 'hex');
exports['skein1024-968'] = Buffer.from('b3d9', 'hex');
exports['skein1024-976'] = Buffer.from('b3da', 'hex');
exports['skein1024-984'] = Buffer.from('b3db', 'hex');
exports['skein1024-992'] = Buffer.from('b3dc', 'hex');
exports['skein1024-1000'] = Buffer.from('b3dd', 'hex');
exports['skein1024-1008'] = Buffer.from('b3de', 'hex');
exports['skein1024-1016'] = Buffer.from('b3df', 'hex');
exports['skein1024-1024'] = Buffer.from('b3e0', 'hex'); // multiaddr

exports['ip4'] = Buffer.from('04', 'hex');
exports['tcp'] = Buffer.from('06', 'hex');
exports['dccp'] = Buffer.from('21', 'hex');
exports['ip6'] = Buffer.from('29', 'hex');
exports['ip6zone'] = Buffer.from('2a', 'hex');
exports['dns'] = Buffer.from('35', 'hex');
exports['dns4'] = Buffer.from('36', 'hex');
exports['dns6'] = Buffer.from('37', 'hex');
exports['dnsaddr'] = Buffer.from('38', 'hex');
exports['sctp'] = Buffer.from('84', 'hex');
exports['udp'] = Buffer.from('0111', 'hex');
exports['p2p-webrtc-star'] = Buffer.from('0113', 'hex');
exports['p2p-webrtc-direct'] = Buffer.from('0114', 'hex');
exports['p2p-stardust'] = Buffer.from('0115', 'hex');
exports['p2p-circuit'] = Buffer.from('0122', 'hex');
exports['udt'] = Buffer.from('012d', 'hex');
exports['utp'] = Buffer.from('012e', 'hex');
exports['unix'] = Buffer.from('0190', 'hex');
exports['p2p'] = Buffer.from('01a5', 'hex');
exports['ipfs'] = Buffer.from('01a5', 'hex');
exports['https'] = Buffer.from('01bb', 'hex');
exports['onion'] = Buffer.from('01bc', 'hex');
exports['onion3'] = Buffer.from('01bd', 'hex');
exports['garlic64'] = Buffer.from('01be', 'hex');
exports['garlic32'] = Buffer.from('01bf', 'hex');
exports['quic'] = Buffer.from('01cc', 'hex');
exports['ws'] = Buffer.from('01dd', 'hex');
exports['wss'] = Buffer.from('01de', 'hex');
exports['p2p-websocket-star'] = Buffer.from('01df', 'hex');
exports['http'] = Buffer.from('01e0', 'hex'); // ipld

exports['raw'] = Buffer.from('55', 'hex');
exports['dag-pb'] = Buffer.from('70', 'hex');
exports['dag-cbor'] = Buffer.from('71', 'hex');
exports['libp2p-key'] = Buffer.from('72', 'hex');
exports['git-raw'] = Buffer.from('78', 'hex');
exports['torrent-info'] = Buffer.from('7b', 'hex');
exports['torrent-file'] = Buffer.from('7c', 'hex');
exports['leofcoin-block'] = Buffer.from('81', 'hex');
exports['leofcoin-tx'] = Buffer.from('82', 'hex');
exports['leofcoin-pr'] = Buffer.from('83', 'hex');
exports['eth-block'] = Buffer.from('90', 'hex');
exports['eth-block-list'] = Buffer.from('91', 'hex');
exports['eth-tx-trie'] = Buffer.from('92', 'hex');
exports['eth-tx'] = Buffer.from('93', 'hex');
exports['eth-tx-receipt-trie'] = Buffer.from('94', 'hex');
exports['eth-tx-receipt'] = Buffer.from('95', 'hex');
exports['eth-state-trie'] = Buffer.from('96', 'hex');
exports['eth-account-snapshot'] = Buffer.from('97', 'hex');
exports['eth-storage-trie'] = Buffer.from('98', 'hex');
exports['bitcoin-block'] = Buffer.from('b0', 'hex');
exports['bitcoin-tx'] = Buffer.from('b1', 'hex');
exports['zcash-block'] = Buffer.from('c0', 'hex');
exports['zcash-tx'] = Buffer.from('c1', 'hex');
exports['stellar-block'] = Buffer.from('d0', 'hex');
exports['stellar-tx'] = Buffer.from('d1', 'hex');
exports['decred-block'] = Buffer.from('e0', 'hex');
exports['decred-tx'] = Buffer.from('e1', 'hex');
exports['dash-block'] = Buffer.from('f0', 'hex');
exports['dash-tx'] = Buffer.from('f1', 'hex');
exports['swarm-manifest'] = Buffer.from('fa', 'hex');
exports['swarm-feed'] = Buffer.from('fb', 'hex');
exports['dag-json'] = Buffer.from('0129', 'hex'); // namespace

exports['path'] = Buffer.from('2f', 'hex');
exports['ipld-ns'] = Buffer.from('e2', 'hex');
exports['ipfs-ns'] = Buffer.from('e3', 'hex');
exports['swarm-ns'] = Buffer.from('e4', 'hex');
exports['ipns-ns'] = Buffer.from('e5', 'hex');
exports['zeronet'] = Buffer.from('e6', 'hex'); // key

exports['ed25519-pub'] = Buffer.from('ed', 'hex'); // holochain

exports['holochain-adr-v0'] = Buffer.from('807124', 'hex');
exports['holochain-adr-v1'] = Buffer.from('817124', 'hex');
exports['holochain-key-v0'] = Buffer.from('947124', 'hex');
exports['holochain-key-v1'] = Buffer.from('957124', 'hex');
exports['holochain-sig-v0'] = Buffer.from('a27124', 'hex');
exports['holochain-sig-v1'] = Buffer.from('a37124', 'hex');
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.defined = function (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val));
};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toPathComponents = function toPathComponents() {
  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  // split on / unless escaped with \
  return (path.trim().match(/([^\\^/]|\\\/)+/g) || []).filter(Boolean);
};

module.exports = toPathComponents;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var SparseArray = __webpack_require__(245);

var wrapHash = __webpack_require__(246);

var defaultOptions = {
  bits: 8
};

var Bucket =
/*#__PURE__*/
function () {
  function Bucket(options, parent, posAtParent) {
    _classCallCheck(this, Bucket);

    this._options = Object.assign({}, defaultOptions, options);
    this._popCount = 0;
    this._parent = parent;
    this._posAtParent = posAtParent;

    if (!this._options.hashFn) {
      throw new Error('please define an options.hashFn');
    } // make sure we only wrap options.hashFn once in the whole tree


    if (!this._options.hash) {
      this._options.hash = wrapHash(this._options.hashFn);
    }

    this._children = new SparseArray();
  }

  _createClass(Bucket, [{
    key: "put",
    value: function () {
      var _put = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(key, value) {
        var place;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this._findNewBucketAndPos(key);

              case 2:
                place = _context.sent;
                _context.next = 5;
                return place.bucket._putAt(place, key, value);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function put(_x, _x2) {
        return _put.apply(this, arguments);
      }

      return put;
    }()
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(key) {
        var child;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._findChild(key);

              case 2:
                child = _context2.sent;

                if (!child) {
                  _context2.next = 5;
                  break;
                }

                return _context2.abrupt("return", child.value);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function get(_x3) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: "del",
    value: function () {
      var _del = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3(key) {
        var place, child;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this._findPlace(key);

              case 2:
                place = _context3.sent;
                child = place.bucket._at(place.pos);

                if (child && child.key === key) {
                  place.bucket._delAt(place.pos);
                }

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function del(_x4) {
        return _del.apply(this, arguments);
      }

      return del;
    }()
  }, {
    key: "leafCount",
    value: function leafCount() {
      return this._children.compactArray().reduce(function (acc, child) {
        if (child instanceof Bucket) {
          return acc + child.leafCount();
        }

        return acc + 1;
      }, 0);
    }
  }, {
    key: "childrenCount",
    value: function childrenCount() {
      return this._children.length;
    }
  }, {
    key: "onlyChild",
    value: function onlyChild() {
      return this._children.get(0);
    }
  }, {
    key: "eachLeafSeries",
    value:
    /*#__PURE__*/
    _regenerator["default"].mark(function eachLeafSeries() {
      var children, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, child, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, c2;

      return _regenerator["default"].wrap(function eachLeafSeries$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              children = this._children.compactArray();
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context4.prev = 4;
              _iterator = children[Symbol.iterator]();

            case 6:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context4.next = 42;
                break;
              }

              child = _step.value;

              if (!(child instanceof Bucket)) {
                _context4.next = 37;
                break;
              }

              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context4.prev = 12;
              _iterator2 = child.eachLeafSeries()[Symbol.iterator]();

            case 14:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context4.next = 21;
                break;
              }

              c2 = _step2.value;
              _context4.next = 18;
              return c2;

            case 18:
              _iteratorNormalCompletion2 = true;
              _context4.next = 14;
              break;

            case 21:
              _context4.next = 27;
              break;

            case 23:
              _context4.prev = 23;
              _context4.t0 = _context4["catch"](12);
              _didIteratorError2 = true;
              _iteratorError2 = _context4.t0;

            case 27:
              _context4.prev = 27;
              _context4.prev = 28;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 30:
              _context4.prev = 30;

              if (!_didIteratorError2) {
                _context4.next = 33;
                break;
              }

              throw _iteratorError2;

            case 33:
              return _context4.finish(30);

            case 34:
              return _context4.finish(27);

            case 35:
              _context4.next = 39;
              break;

            case 37:
              _context4.next = 39;
              return child;

            case 39:
              _iteratorNormalCompletion = true;
              _context4.next = 6;
              break;

            case 42:
              _context4.next = 48;
              break;

            case 44:
              _context4.prev = 44;
              _context4.t1 = _context4["catch"](4);
              _didIteratorError = true;
              _iteratorError = _context4.t1;

            case 48:
              _context4.prev = 48;
              _context4.prev = 49;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 51:
              _context4.prev = 51;

              if (!_didIteratorError) {
                _context4.next = 54;
                break;
              }

              throw _iteratorError;

            case 54:
              return _context4.finish(51);

            case 55:
              return _context4.finish(48);

            case 56:
            case "end":
              return _context4.stop();
          }
        }
      }, eachLeafSeries, this, [[4, 44, 48, 56], [12, 23, 27, 35], [28,, 30, 34], [49,, 51, 55]]);
    })
  }, {
    key: "serialize",
    value: function serialize(map, reduce) {
      // serialize to a custom non-sparse representation
      return reduce(this._children.reduce(function (acc, child, index) {
        if (child) {
          if (child instanceof Bucket) {
            acc.push(child.serialize(map, reduce));
          } else {
            acc.push(map(child, index));
          }
        }

        return acc;
      }, []));
    }
  }, {
    key: "asyncTransform",
    value: function () {
      var _asyncTransform = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4(asyncMap, asyncReduce) {
        return _regenerator["default"].wrap(function _callee4$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt("return", asyncTransformBucket(this, asyncMap, asyncReduce));

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee4, this);
      }));

      function asyncTransform(_x5, _x6) {
        return _asyncTransform.apply(this, arguments);
      }

      return asyncTransform;
    }()
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.serialize(mapNode, reduceNodes);
    }
  }, {
    key: "prettyPrint",
    value: function prettyPrint() {
      return JSON.stringify(this.toJSON(), null, '  ');
    }
  }, {
    key: "tableSize",
    value: function tableSize() {
      return Math.pow(2, this._options.bits);
    }
  }, {
    key: "_findChild",
    value: function () {
      var _findChild2 = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee5(key) {
        var result, child;
        return _regenerator["default"].wrap(function _callee5$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._findPlace(key);

              case 2:
                result = _context6.sent;
                child = result.bucket._at(result.pos);

                if (!(child && child.key === key)) {
                  _context6.next = 6;
                  break;
                }

                return _context6.abrupt("return", child);

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee5, this);
      }));

      function _findChild(_x7) {
        return _findChild2.apply(this, arguments);
      }

      return _findChild;
    }()
  }, {
    key: "_findPlace",
    value: function () {
      var _findPlace2 = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee6(key) {
        var hashValue, index, child;
        return _regenerator["default"].wrap(function _callee6$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                hashValue = this._options.hash(key);
                _context7.next = 3;
                return hashValue.take(this._options.bits);

              case 3:
                index = _context7.sent;
                child = this._children.get(index);

                if (!(child instanceof Bucket)) {
                  _context7.next = 7;
                  break;
                }

                return _context7.abrupt("return", child._findPlace(hashValue));

              case 7:
                return _context7.abrupt("return", {
                  bucket: this,
                  pos: index,
                  hash: hashValue
                });

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee6, this);
      }));

      function _findPlace(_x8) {
        return _findPlace2.apply(this, arguments);
      }

      return _findPlace;
    }()
  }, {
    key: "_findNewBucketAndPos",
    value: function () {
      var _findNewBucketAndPos2 = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee7(key) {
        var place, child, bucket, newPlace;
        return _regenerator["default"].wrap(function _callee7$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this._findPlace(key);

              case 2:
                place = _context8.sent;
                child = place.bucket._at(place.pos);

                if (!(child && child.key !== key)) {
                  _context8.next = 12;
                  break;
                }

                // conflict
                bucket = new Bucket(this._options, place.bucket, place.pos);

                place.bucket._putObjectAt(place.pos, bucket); // put the previous value


                _context8.next = 9;
                return bucket._findPlace(child.hash);

              case 9:
                newPlace = _context8.sent;

                newPlace.bucket._putAt(newPlace, child.key, child.value);

                return _context8.abrupt("return", bucket._findNewBucketAndPos(place.hash));

              case 12:
                return _context8.abrupt("return", place);

              case 13:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee7, this);
      }));

      function _findNewBucketAndPos(_x9) {
        return _findNewBucketAndPos2.apply(this, arguments);
      }

      return _findNewBucketAndPos;
    }()
  }, {
    key: "_putAt",
    value: function _putAt(place, key, value) {
      this._putObjectAt(place.pos, {
        key: key,
        value: value,
        hash: place.hash
      });
    }
  }, {
    key: "_putObjectAt",
    value: function _putObjectAt(pos, object) {
      if (!this._children.get(pos)) {
        this._popCount++;
      }

      this._children.set(pos, object);
    }
  }, {
    key: "_delAt",
    value: function _delAt(pos) {
      if (this._children.get(pos)) {
        this._popCount--;
      }

      this._children.unset(pos);

      this._level();
    }
  }, {
    key: "_level",
    value: function _level() {
      if (this._parent && this._popCount <= 1) {
        if (this._popCount === 1) {
          // remove myself from parent, replacing me with my only child
          var onlyChild = this._children.find(exists);

          if (!(onlyChild instanceof Bucket)) {
            var hash = onlyChild.hash;
            hash.untake(this._options.bits);
            var place = {
              pos: this._posAtParent,
              hash: hash
            };

            this._parent._putAt(place, onlyChild.key, onlyChild.value);
          }
        } else {
          this._parent._delAt(this._posAtParent);
        }
      }
    }
  }, {
    key: "_at",
    value: function _at(index) {
      return this._children.get(index);
    }
  }], [{
    key: "isBucket",
    value: function isBucket(o) {
      return o instanceof Bucket;
    }
  }]);

  return Bucket;
}();

function exists(o) {
  return Boolean(o);
}

function mapNode(node, index) {
  return node.key;
}

function reduceNodes(nodes) {
  return nodes;
}

function asyncTransformBucket(_x10, _x11, _x12) {
  return _asyncTransformBucket.apply(this, arguments);
}

function _asyncTransformBucket() {
  _asyncTransformBucket = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee8(bucket, asyncMap, asyncReduce) {
    var output, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, child, mappedChildren;

    return _regenerator["default"].wrap(function _callee8$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            output = [];
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            _context9.prev = 4;
            _iterator3 = bucket._children.compactArray()[Symbol.iterator]();

          case 6:
            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
              _context9.next = 21;
              break;
            }

            child = _step3.value;

            if (!(child instanceof Bucket)) {
              _context9.next = 13;
              break;
            }

            _context9.next = 11;
            return asyncTransformBucket(child, asyncMap, asyncReduce);

          case 11:
            _context9.next = 17;
            break;

          case 13:
            _context9.next = 15;
            return asyncMap(child);

          case 15:
            mappedChildren = _context9.sent;
            output.push({
              bitField: bucket._children.bitField(),
              children: mappedChildren
            });

          case 17:
            return _context9.abrupt("return", asyncReduce(output));

          case 18:
            _iteratorNormalCompletion3 = true;
            _context9.next = 6;
            break;

          case 21:
            _context9.next = 27;
            break;

          case 23:
            _context9.prev = 23;
            _context9.t0 = _context9["catch"](4);
            _didIteratorError3 = true;
            _iteratorError3 = _context9.t0;

          case 27:
            _context9.prev = 27;
            _context9.prev = 28;

            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }

          case 30:
            _context9.prev = 30;

            if (!_didIteratorError3) {
              _context9.next = 33;
              break;
            }

            throw _iteratorError3;

          case 33:
            return _context9.finish(30);

          case 34:
            return _context9.finish(27);

          case 35:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee8, null, [[4, 23, 27, 35], [28,, 30, 34]]);
  }));
  return _asyncTransformBucket.apply(this, arguments);
}

module.exports = Bucket;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function Dir(props, options) {
  _classCallCheck(this, Dir);

  this.options = options || {};
  Object.assign(this, props);
};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var errCode = __webpack_require__(2);

var log = __webpack_require__(5)('ipfs:mfs:mkdir');

var exporter = __webpack_require__(20);

var createNode = __webpack_require__(254);

var toPathComponents = __webpack_require__(54);

var updateMfsRoot = __webpack_require__(37);

var updateTree = __webpack_require__(38);

var addLink = __webpack_require__(39);

var withMfsRoot = __webpack_require__(88);

var applyDefaultOptions = __webpack_require__(10);

var _require = __webpack_require__(8),
    FILE_SEPARATOR = _require.FILE_SEPARATOR;

var defaultOptions = {
  parents: false,
  hashAlg: 'sha2-256',
  cidVersion: 0,
  shardSplitThreshold: 1000,
  format: 'dag-pb',
  flush: true
};

module.exports = function (context) {
  return (
    /*#__PURE__*/
    function () {
      var _mfsMkdir = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(path, options) {
        var pathComponents, root, parent, trail, emptyDir, i, subPathComponents, subPath, newRootCid;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = applyDefaultOptions(options, defaultOptions);

                if (path) {
                  _context.next = 3;
                  break;
                }

                throw new Error('no path given to Mkdir');

              case 3:
                path = path.trim();

                if (!(path === FILE_SEPARATOR)) {
                  _context.next = 8;
                  break;
                }

                if (!options.parents) {
                  _context.next = 7;
                  break;
                }

                return _context.abrupt("return");

              case 7:
                throw errCode(new Error("cannot create directory '".concat(FILE_SEPARATOR, "': Already exists")), 'ERR_INVALID_PATH');

              case 8:
                if (!(path.substring(0, 1) !== FILE_SEPARATOR)) {
                  _context.next = 10;
                  break;
                }

                throw errCode(new Error('paths must start with a leading /'), 'ERR_INVALID_PATH');

              case 10:
                log("Creating ".concat(path));
                pathComponents = toPathComponents(path);

                if (!(pathComponents[0] === 'ipfs')) {
                  _context.next = 14;
                  break;
                }

                throw errCode(new Error("path cannot have the prefix 'ipfs'"), 'ERR_INVALID_PATH');

              case 14:
                _context.next = 16;
                return withMfsRoot(context);

              case 16:
                root = _context.sent;
                trail = [];
                _context.next = 20;
                return createNode(context, 'directory', options);

              case 20:
                emptyDir = _context.sent;
                i = 0;

              case 22:
                if (!(i <= pathComponents.length)) {
                  _context.next = 51;
                  break;
                }

                subPathComponents = pathComponents.slice(0, i);
                subPath = "/ipfs/".concat(root, "/").concat(subPathComponents.join('/'));
                _context.prev = 25;
                _context.next = 28;
                return exporter(subPath, context.ipld);

              case 28:
                parent = _context.sent;
                log("".concat(subPath, " existed"));
                log("".concat(subPath, " had children ").concat(parent.node.Links.map(function (link) {
                  return link.Name;
                })));

                if (!(i === pathComponents.length)) {
                  _context.next = 35;
                  break;
                }

                if (!options.parents) {
                  _context.next = 34;
                  break;
                }

                return _context.abrupt("return");

              case 34:
                throw errCode(new Error('file already exists'), 'ERR_ALREADY_EXISTS');

              case 35:
                trail.push({
                  name: parent.name,
                  cid: parent.cid
                });
                _context.next = 48;
                break;

              case 38:
                _context.prev = 38;
                _context.t0 = _context["catch"](25);

                if (!(_context.t0.code === 'ERR_NOT_FOUND')) {
                  _context.next = 47;
                  break;
                }

                if (!(i < pathComponents.length && !options.parents)) {
                  _context.next = 43;
                  break;
                }

                throw errCode(new Error("Intermediate directory path ".concat(subPath, " does not exist, use the -p flag to create it")), 'ERR_NOT_FOUND');

              case 43:
                _context.next = 45;
                return addEmptyDir(context, subPathComponents[subPathComponents.length - 1], emptyDir, trail[trail.length - 1], trail, options);

              case 45:
                _context.next = 48;
                break;

              case 47:
                throw _context.t0;

              case 48:
                i++;
                _context.next = 22;
                break;

              case 51:
                _context.next = 53;
                return updateTree(context, trail, options);

              case 53:
                newRootCid = _context.sent;
                _context.next = 56;
                return updateMfsRoot(context, newRootCid);

              case 56:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[25, 38]]);
      }));

      function mfsMkdir(_x, _x2) {
        return _mfsMkdir.apply(this, arguments);
      }

      return mfsMkdir;
    }()
  );
};

var addEmptyDir =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(context, childName, emptyDir, parent, trail, options) {
    var result;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            log("Adding empty dir called ".concat(childName, " to ").concat(parent.cid));
            _context2.next = 3;
            return addLink(context, {
              parent: parent.node,
              parentCid: parent.cid,
              size: emptyDir.node.size,
              cid: emptyDir.cid,
              name: childName,
              format: options.format,
              hashAlg: options.hashAlg,
              cidVersion: options.cidVersion
            });

          case 3:
            result = _context2.sent;
            trail[trail.length - 1].cid = result.cid;
            trail.push({
              name: childName,
              cid: emptyDir.cid
            });

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function addEmptyDir(_x3, _x4, _x5, _x6, _x7, _x8) {
    return _ref.apply(this, arguments);
  };
}();

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var toMfsPath = __webpack_require__(17);

function toSources(_x, _x2) {
  return _toSources.apply(this, arguments);
}

function _toSources() {
  _toSources = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(context, args) {
    var sources;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // Support weird mfs.mv([source, dest], options, callback) signature
            if (Array.isArray(args[0])) {
              args = args[0];
            }

            sources = args.filter(function (arg) {
              return typeof arg === 'string';
            }).map(function (source) {
              return source.trim();
            });
            _context.next = 4;
            return toMfsPath(context, sources);

          case 4:
            _context.t0 = _context.sent;
            return _context.abrupt("return", {
              sources: _context.t0
            });

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _toSources.apply(this, arguments);
}

module.exports = toSources;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var exporter = __webpack_require__(20);

var log = __webpack_require__(5)('ipfs:mfs:utils:to-trail');

var toTrail =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(context, path) {
    var output, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, fsEntry;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            log("Creating trail for path ".concat(path));
            output = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 4;
            _iterator = _asyncIterator(exporter.path(path, context.ipld));

          case 6:
            _context.next = 8;
            return _iterator.next();

          case 8:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 12;
            return _step.value;

          case 12:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 19;
              break;
            }

            fsEntry = _value;
            output.push({
              name: fsEntry.name,
              cid: fsEntry.cid,
              size: fsEntry.node.size,
              type: fsEntry.unixfs ? fsEntry.unixfs.type : undefined
            });

          case 16:
            _iteratorNormalCompletion = true;
            _context.next = 6;
            break;

          case 19:
            _context.next = 25;
            break;

          case 21:
            _context.prev = 21;
            _context.t0 = _context["catch"](4);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 25:
            _context.prev = 25;
            _context.prev = 26;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 30;
              break;
            }

            _context.next = 30;
            return _iterator["return"]();

          case 30:
            _context.prev = 30;

            if (!_didIteratorError) {
              _context.next = 33;
              break;
            }

            throw _iteratorError;

          case 33:
            return _context.finish(30);

          case 34:
            return _context.finish(25);

          case 35:
            return _context.abrupt("return", output);

          case 36:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 21, 25, 35], [26,, 30, 34]]);
  }));

  return function toTrail(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = toTrail;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function batch(_x, _x2) {
  return _batch.apply(this, arguments);
}

function _batch() {
  _batch = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(source, size) {
    var things, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, set;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            things = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 3;
            _iterator = _asyncIterator(source);

          case 5:
            _context.next = 7;
            return _awaitAsyncGenerator(_iterator.next());

          case 7:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 11;
            return _awaitAsyncGenerator(_step.value);

          case 11:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 24;
              break;
            }

            set = _value;
            things = things.concat(set);

          case 15:
            if (!(things.length >= size)) {
              _context.next = 21;
              break;
            }

            _context.next = 18;
            return things.slice(0, size);

          case 18:
            things = things.slice(size);
            _context.next = 15;
            break;

          case 21:
            _iteratorNormalCompletion = true;
            _context.next = 5;
            break;

          case 24:
            _context.next = 30;
            break;

          case 26:
            _context.prev = 26;
            _context.t0 = _context["catch"](3);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 30:
            _context.prev = 30;
            _context.prev = 31;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 35;
              break;
            }

            _context.next = 35;
            return _awaitAsyncGenerator(_iterator["return"]());

          case 35:
            _context.prev = 35;

            if (!_didIteratorError) {
              _context.next = 38;
              break;
            }

            throw _iteratorError;

          case 38:
            return _context.finish(35);

          case 39:
            return _context.finish(30);

          case 40:
            if (!things.length) {
              _context.next = 46;
              break;
            }

            _context.next = 43;
            return things.slice(0, size);

          case 43:
            things = things.slice(size);
            _context.next = 40;
            break;

          case 46:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 26, 30, 40], [31,, 35, 39]]);
  }));
  return _batch.apply(this, arguments);
}

module.exports = batch;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).


var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(21).codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports = module.exports = __webpack_require__(110);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(64);
exports.Duplex = __webpack_require__(18);
exports.Transform = __webpack_require__(113);
exports.PassThrough = __webpack_require__(301);

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(1);

var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}

if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
} // Copy static methods from Buffer


copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }

  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  var buf = Buffer(size);

  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }

  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return buffer.SlowBuffer(size);
};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

/*<replacement>*/

var pna = __webpack_require__(41);
/*</replacement>*/


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/

var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var util = __webpack_require__(26);

util.inherits = __webpack_require__(7);
/*</replacement>*/

/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(107)
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(111);
/*</replacement>*/

/*<replacement>*/


var Buffer = __webpack_require__(63).Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/


var destroyImpl = __webpack_require__(112);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(18);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  var isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

  this.highWaterMark = Math.floor(this.highWaterMark); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(18); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options["final"] === 'function') this._final = options["final"];
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

  stream.emit('error', er);
  pna.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }

  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }

  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;
  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      stream.emit('error', err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(86).setImmediate, __webpack_require__(4)))

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Types = __webpack_require__(118);

var Utils = __webpack_require__(42);

var internals = {
  needsProtoHack: new Set([Types.set, Types.map, Types.weakSet, Types.weakMap])
};

module.exports = internals.clone = function (obj) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _seen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (_typeof(obj) !== 'object' || obj === null) {
    return obj;
  }

  var clone = internals.clone;
  var seen = _seen;

  if (options.shallow) {
    if (options.shallow !== true) {
      return internals.cloneWithShallow(obj, options);
    }

    clone = function clone(value) {
      return value;
    };
  } else {
    seen = seen || new Map();
    var lookup = seen.get(obj);

    if (lookup) {
      return lookup;
    }
  }

  var baseProto = Types.getInternalProto(obj);
  var newObj;

  switch (baseProto) {
    case Types.buffer:
      return Buffer && Buffer.from(obj);
    // $lab:coverage:ignore$

    case Types.date:
      return new Date(obj.getTime());

    case Types.regex:
      return new RegExp(obj);

    case Types.array:
      newObj = [];
      break;

    default:
      if (options.prototype !== false) {
        // Defaults to true
        var proto = Object.getPrototypeOf(obj);

        if (proto && proto.isImmutable) {
          return obj;
        }

        if (internals.needsProtoHack.has(baseProto)) {
          newObj = new proto.constructor();

          if (proto !== baseProto) {
            Object.setPrototypeOf(newObj, proto);
          }
        } else {
          newObj = Object.create(proto);
        }
      } else if (internals.needsProtoHack.has(baseProto)) {
        newObj = new baseProto.constructor();
      } else {
        newObj = {};
      }

  }

  if (seen) {
    seen.set(obj, newObj); // Set seen, since obj could recurse
  }

  if (baseProto === Types.set) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var value = _step.value;
        newObj.add(clone(value, options, seen));
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } else if (baseProto === Types.map) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = obj[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _step2$value = _slicedToArray(_step2.value, 2),
            key = _step2$value[0],
            _value = _step2$value[1];

        newObj.set(key, clone(_value, options, seen));
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  var keys = Utils.keys(obj, options);

  for (var i = 0; i < keys.length; ++i) {
    var key = keys[i];

    if (baseProto === Types.array && key === 'length') {
      continue;
    }

    var descriptor = Object.getOwnPropertyDescriptor(obj, key);

    if (descriptor && (descriptor.get || descriptor.set)) {
      Object.defineProperty(newObj, key, descriptor);
    } else {
      Object.defineProperty(newObj, key, {
        enumerable: descriptor ? descriptor.enumerable : true,
        writable: true,
        configurable: true,
        value: clone(obj[key], options, seen)
      });
    }
  }

  if (baseProto === Types.array) {
    newObj.length = obj.length;
  }

  return newObj;
};

internals.cloneWithShallow = function (source, options) {
  var keys = options.shallow;
  options = Object.assign({}, options);
  options.shallow = false;
  var storage = Utils.store(source, keys); // Move shallow copy items to storage

  var copy = internals.clone(source, options); // Deep copy the rest

  Utils.restore(copy, source, storage); // Shallow copy the stored items and restore

  return copy;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Assert = __webpack_require__(23);

var internals = {};

module.exports = function (obj, chain, options) {
  if (chain === false || chain === null || chain === undefined) {
    return obj;
  }

  options = options || {};

  if (typeof options === 'string') {
    options = {
      separator: options
    };
  }

  var isChainArray = Array.isArray(chain);
  Assert(!isChainArray || !options.separator, 'Separator option no valid for array-based chain');
  var path = isChainArray ? chain : chain.split(options.separator || '.');
  var ref = obj;

  for (var i = 0; i < path.length; ++i) {
    var key = path[i];
    var type = options.iterables && internals.iterables(ref);

    if (Array.isArray(ref) || type === 'set') {
      var number = Number(key);

      if (Number.isInteger(number)) {
        key = number < 0 ? ref.length + number : number;
      }
    }

    if (!ref || typeof ref === 'function' && options.functions === false || // Defaults to true
    !type && ref[key] === undefined) {
      Assert(!options.strict || i + 1 === path.length, 'Missing segment', key, 'in reach path ', chain);
      Assert(_typeof(ref) === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);
      ref = options["default"];
      break;
    }

    if (!type) {
      ref = ref[key];
    } else if (type === 'set') {
      ref = _toConsumableArray(ref)[key];
    } else {
      // type === 'map'
      ref = ref.get(key);
    }
  }

  return ref;
};

internals.iterables = function (ref) {
  if (ref instanceof Set) {
    return 'set';
  }

  if (ref instanceof Map) {
    return 'map';
  }
};

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(43);

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var fnToStr = Function.prototype.toString;
var constructorRegex = /^\s*class\b/;

var isES6ClassFn = function isES6ClassFunction(value) {
  try {
    var fnStr = fnToStr.call(value);
    return constructorRegex.test(fnStr);
  } catch (e) {
    return false; // not a function
  }
};

var tryFunctionObject = function tryFunctionToStr(value) {
  try {
    if (isES6ClassFn(value)) {
      return false;
    }

    fnToStr.call(value);
    return true;
  } catch (e) {
    return false;
  }
};

var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && _typeof(Symbol.toStringTag) === 'symbol';

module.exports = function isCallable(value) {
  if (!value) {
    return false;
  }

  if (typeof value !== 'function' && _typeof(value) !== 'object') {
    return false;
  }

  if (typeof value === 'function' && !value.prototype) {
    return true;
  }

  if (hasToStringTag) {
    return tryFunctionObject(value);
  }

  if (isES6ClassFn(value)) {
    return false;
  }

  var strClass = toStr.call(value);
  return strClass === fnClass || strClass === genClass;
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
  var keys = Object.keys(obj);
  var descriptors = {};

  for (var i = 0; i < keys.length; i++) {
    descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
  }

  return descriptors;
};

var formatRegExp = /%[sdj%]/g;

exports.format = function (f) {
  if (!isString(f)) {
    var objects = [];

    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }

    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function (x) {
    if (x === '%%') return '%';
    if (i >= len) return x;

    switch (x) {
      case '%s':
        return String(args[i++]);

      case '%d':
        return Number(args[i++]);

      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }

      default:
        return x;
    }
  });

  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }

  return str;
}; // Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.


exports.deprecate = function (fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  } // Allow for deprecating things in the process of starting up.


  if (typeof process === 'undefined') {
    return function () {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;

  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }

      warned = true;
    }

    return fn.apply(this, arguments);
  }

  return deprecated;
};

var debugs = {};
var debugEnviron;

exports.debuglog = function (set) {
  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();

  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;

      debugs[set] = function () {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function () {};
    }
  }

  return debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */

/* legacy: obj, showHidden, depth, colors*/


function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  }; // legacy...

  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];

  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  } // set default options


  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}

exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
}; // Don't use 'blue' not visible on cmd.exe

inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function stylizeNoColor(str, styleType) {
  return str;
}

function arrayToHash(array) {
  var hash = {};
  array.forEach(function (val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);

    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }

    return ret;
  } // Primitive types cannot have properties


  var primitive = formatPrimitive(ctx, value);

  if (primitive) {
    return primitive;
  } // Look up the keys of the object.


  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  } // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  } // Some type of object without properties can be shortcutted.


  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }

    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }

    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }

    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}']; // Make Array say that they are Array

  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  } // Make functions say that they are functions


  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  } // Make RegExps say that they are RegExps


  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  } // Make dates with properties first say the date


  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  } // Make error with message first say the error


  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);
  var output;

  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }

  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

  if (isNull(value)) return ctx.stylize('null', 'null');
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];

  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }

  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || {
    value: value[key]
  };

  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }

  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }

      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }

  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }

    name = JSON.stringify('' + key);

    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function (prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
} // NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.


function isArray(ar) {
  return Array.isArray(ar);
}

exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}

exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}

exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}

exports.isString = isString;

function isSymbol(arg) {
  return _typeof(arg) === 'symbol';
}

exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}

exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

exports.isRegExp = isRegExp;

function isObject(arg) {
  return _typeof(arg) === 'object' && arg !== null;
}

exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

exports.isDate = isDate;

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}

exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}

exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof(arg) === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}

exports.isPrimitive = isPrimitive;
exports.isBuffer = __webpack_require__(133);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
} // log is just a thin wrapper to console.log that prepends a timestamp


exports.log = function () {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */


exports.inherits = __webpack_require__(134);

exports._extend = function (origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i = keys.length;

  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }

  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];

    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }

    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn,
    enumerable: false,
    writable: false,
    configurable: true
  });
  return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
};

exports.promisify.custom = kCustomPromisifiedSymbol;

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }

  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  } // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.


  function callbackified() {
    var args = [];

    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();

    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }

    var self = this;

    var cb = function cb() {
      return maybeCb.apply(self, arguments);
    }; // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)


    original.apply(this, args).then(function (ret) {
      process.nextTick(cb, null, ret);
    }, function (rej) {
      process.nextTick(callbackifyOnRejected, rej, cb);
    });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
  return callbackified;
}

exports.callbackify = callbackify;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var mortice = __webpack_require__(137);

var lock;

module.exports = function (repoOwner) {
  if (lock) {
    return lock;
  }

  var mutex = mortice({
    // ordinarily the main thread would store the read/write lock but
    // if we are the thread that owns the repo, we can store the lock
    // on this process even if we are a worker thread
    singleProcess: repoOwner
  });
  lock = {
    readLock: function readLock(func) {
      return (
        /*#__PURE__*/
        _asyncToGenerator(
        /*#__PURE__*/
        _regenerator["default"].mark(function _callee() {
          var releaseLock,
              _len,
              args,
              _key,
              _args = arguments;

          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return mutex.readLock();

                case 2:
                  releaseLock = _context.sent;
                  _context.prev = 3;

                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args[_key];
                  }

                  _context.next = 7;
                  return func.apply(null, args);

                case 7:
                  return _context.abrupt("return", _context.sent);

                case 8:
                  _context.prev = 8;
                  releaseLock();
                  return _context.finish(8);

                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[3,, 8, 11]]);
        }))
      );
    },
    writeLock: function writeLock(func) {
      return (
        /*#__PURE__*/
        _asyncToGenerator(
        /*#__PURE__*/
        _regenerator["default"].mark(function _callee2() {
          var releaseLock,
              _len2,
              args,
              _key2,
              _args2 = arguments;

          return _regenerator["default"].wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return mutex.writeLock();

                case 2:
                  releaseLock = _context2.sent;
                  _context2.prev = 3;

                  for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args2[_key2];
                  }

                  _context2.next = 7;
                  return func.apply(null, args);

                case 7:
                  return _context2.abrupt("return", _context2.sent);

                case 8:
                  _context2.prev = 8;
                  releaseLock();
                  return _context2.finish(8);

                case 11:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, null, [[3,, 8, 11]]);
        }))
      );
    }
  };
  return lock;
};

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(139);

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  WORKER_REQUEST_READ_LOCK: 'lock:worker:request-read',
  WORKER_RELEASE_READ_LOCK: 'lock:worker:release-read',
  MASTER_GRANT_READ_LOCK: 'lock:master:grant-read',
  WORKER_REQUEST_WRITE_LOCK: 'lock:worker:request-write',
  WORKER_RELEASE_WRITE_LOCK: 'lock:worker:release-write',
  MASTER_GRANT_WRITE_LOCK: 'lock:master:grant-write'
};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var events = {};

var observable = function observable(worker) {
  worker.addEventListener('message', function (event) {
    observable.dispatchEvent('message', worker, event);
  });

  if (worker.port) {
    worker.port.addEventListener('message', function (event) {
      observable.dispatchEvent('message', worker, event);
    });
  }
};

observable.addEventListener = function (type, fn) {
  if (!events[type]) {
    events[type] = [];
  }

  events[type].push(fn);
};

observable.removeEventListener = function (type, fn) {
  if (!events[type]) {
    return;
  }

  events[type] = events[type].filter(function (listener) {
    return listener === fn;
  });
};

observable.dispatchEvent = function () {
  var args = Array.prototype.slice.call(arguments);
  var type = args.shift();

  if (!events[type]) {
    return;
  }

  events[type].forEach(function (fn) {
    return fn.apply(null, args);
  });
};

module.exports = observable;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var keys = __webpack_require__(150);

var hasSymbols = typeof Symbol === 'function' && _typeof(Symbol('foo')) === 'symbol';
var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function isFunction(fn) {
  return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function arePropertyDescriptorsSupported() {
  var obj = {};

  try {
    origDefineProperty(obj, 'x', {
      enumerable: false,
      value: obj
    }); // eslint-disable-next-line no-unused-vars, no-restricted-syntax

    for (var _ in obj) {
      // jscs:ignore disallowUnusedVariables
      return false;
    }

    return obj.x === obj;
  } catch (e) {
    /* this is IE 8. */
    return false;
  }
};

var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function defineProperty(object, name, value, predicate) {
  if (name in object && (!isFunction(predicate) || !predicate())) {
    return;
  }

  if (supportsDescriptors) {
    origDefineProperty(object, name, {
      configurable: true,
      enumerable: false,
      value: value,
      writable: true
    });
  } else {
    object[name] = value;
  }
};

var defineProperties = function defineProperties(object, map) {
  var predicates = arguments.length > 2 ? arguments[2] : {};
  var props = keys(map);

  if (hasSymbols) {
    props = concat.call(props, Object.getOwnPropertySymbols(map));
  }

  for (var i = 0; i < props.length; i += 1) {
    defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
  }
};

defineProperties.supportsDescriptors = !!supportsDescriptors;
module.exports = defineProperties;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
  var str = toStr.call(value);
  var isArgs = str === '[object Arguments]';

  if (!isArgs) {
    isArgs = str !== '[object Array]' && value !== null && _typeof(value) === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr.call(value.callee) === '[object Function]';
  }

  return isArgs;
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* globals self, window, global */

/* eslint no-negated-condition: 0, no-new-func: 0 */


if (typeof self !== 'undefined') {
  module.exports = self;
} else if (typeof window !== 'undefined') {
  module.exports = window;
} else if (typeof global !== 'undefined') {
  module.exports = global;
} else {
  module.exports = Function('return this')();
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)))

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var implementation = __webpack_require__(76);

module.exports = function getPolyfill() {
  if ((typeof global === "undefined" ? "undefined" : _typeof(global)) !== 'object' || !global || global.Math !== Math || global.Array !== Array) {
    return implementation;
  }

  return global;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)))

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* @flow */


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var uuid = __webpack_require__(80);

var withIs = __webpack_require__(29);

var pathSepS = '/';
var pathSepB = Buffer.from(pathSepS);
var pathSep = pathSepB[0];
/**
 * A Key represents the unique identifier of an object.
 * Our Key scheme is inspired by file systems and Google App Engine key model.
 * Keys are meant to be unique across a system. Keys are hierarchical,
 * incorporating more and more specific namespaces. Thus keys can be deemed
 * 'children' or 'ancestors' of other keys:
 * - `new Key('/Comedy')`
 * - `new Key('/Comedy/MontyPython')`
 * Also, every namespace can be parametrized to embed relevant object
 * information. For example, the Key `name` (most specific namespace) could
 * include the object type:
 * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`
 * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`
 * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`
 *
 */

var Key =
/*#__PURE__*/
function () {
  /* :: _buf: Buffer */
  function Key(s
  /* : string|Buffer */
  , clean
  /* : ?bool */
  ) {
    _classCallCheck(this, Key);

    if (typeof s === 'string') {
      this._buf = Buffer.from(s);
    } else if (Buffer.isBuffer(s)) {
      this._buf = s;
    }

    if (clean == null) {
      clean = true;
    }

    if (clean) {
      this.clean();
    }

    if (this._buf.length === 0 || this._buf[0] !== pathSep) {
      throw new Error("Invalid key: ".concat(this.toString()));
    }
  }
  /**
   * Convert to the string representation
   *
   * @param {string} [encoding='utf8']
   * @returns {string}
   */


  _createClass(Key, [{
    key: "toString",
    value: function toString(encoding
    /* : ?buffer$Encoding */
    )
    /* : string */
    {
      return this._buf.toString(encoding || 'utf8');
    }
    /**
     * Return the buffer representation of the key
     *
     * @returns {Buffer}
     */

  }, {
    key: "toBuffer",
    value: function toBuffer()
    /* : Buffer */
    {
      return this._buf;
    } // waiting on https://github.com/facebook/flow/issues/2286
    // $FlowFixMe

  }, {
    key: "clean",

    /**
     * Cleanup the current key
     *
     * @returns {void}
     */
    value: function clean() {
      if (!this._buf || this._buf.length === 0) {
        this._buf = Buffer.from(pathSepS);
      }

      if (this._buf[0] !== pathSep) {
        this._buf = Buffer.concat([pathSepB, this._buf]);
      } // normalize does not remove trailing slashes


      while (this._buf.length > 1 && this._buf[this._buf.length - 1] === pathSep) {
        this._buf = this._buf.slice(0, -1);
      }
    }
    /**
     * Check if the given key is sorted lower than ourself.
     *
     * @param {Key} key
     * @returns {bool}
     */

  }, {
    key: "less",
    value: function less(key
    /* : Key */
    )
    /* : bool */
    {
      var list1 = this.list();
      var list2 = key.list();

      for (var i = 0; i < list1.length; i++) {
        if (list2.length < i + 1) {
          return false;
        }

        var c1 = list1[i];
        var c2 = list2[i];

        if (c1 < c2) {
          return true;
        } else if (c1 > c2) {
          return false;
        }
      }

      return list1.length < list2.length;
    }
    /**
     * Returns the key with all parts in reversed order.
     *
     * @returns {Key}
     *
     * @example
     * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()
     * // => Key('/Actor:JohnCleese/MontyPython/Comedy')
     */

  }, {
    key: "reverse",
    value: function reverse()
    /* : Key */
    {
      return Key.withNamespaces(this.list().slice().reverse());
    }
    /**
     * Returns the `namespaces` making up this Key.
     *
     * @returns {Array<string>}
     */

  }, {
    key: "namespaces",
    value: function namespaces()
    /* : Array<string> */
    {
      return this.list();
    }
    /** Returns the "base" namespace of this key.
     *
     * @returns {string}
     *
     * @example
     * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()
     * // => 'Actor:JohnCleese'
     *
     */

  }, {
    key: "baseNamespace",
    value: function baseNamespace()
    /* : string */
    {
      var ns = this.namespaces();
      return ns[ns.length - 1];
    }
    /**
     * Returns the `list` representation of this key.
     *
     * @returns {Array<string>}
     *
     * @example
     * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()
     * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']
     *
     */

  }, {
    key: "list",
    value: function list()
    /* : Array<string> */
    {
      return this.toString().split(pathSepS).slice(1);
    }
    /**
     * Returns the "type" of this key (value of last namespace).
     *
     * @returns {string}
     *
     * @example
     * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()
     * // => 'Actor'
     *
     */

  }, {
    key: "type",
    value: function type()
    /* : string */
    {
      return namespaceType(this.baseNamespace());
    }
    /**
     * Returns the "name" of this key (field of last namespace).
     *
     * @returns {string}
     *
     * @example
     * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()
     * // => 'JohnCleese'
     */

  }, {
    key: "name",
    value: function name()
    /* : string */
    {
      return namespaceValue(this.baseNamespace());
    }
    /**
     * Returns an "instance" of this type key (appends value to namespace).
     *
     * @param {string} s
     * @returns {Key}
     *
     * @example
     * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')
     * // => Key('/Comedy/MontyPython/Actor:JohnCleese')
     */

  }, {
    key: "instance",
    value: function instance(s
    /* : string */
    )
    /* : Key */
    {
      return new _Key(this.toString() + ':' + s);
    }
    /**
     * Returns the "path" of this key (parent + type).
     *
     * @returns {Key}
     *
     * @example
     * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()
     * // => Key('/Comedy/MontyPython/Actor')
     *
     */

  }, {
    key: "path",
    value: function path()
    /* : Key */
    {
      var p = this.parent().toString();

      if (!p.endsWith(pathSepS)) {
        p += pathSepS;
      }

      p += this.type();
      return new _Key(p);
    }
    /**
     * Returns the `parent` Key of this Key.
     *
     * @returns {Key}
     *
     * @example
     * new Key("/Comedy/MontyPython/Actor:JohnCleese").parent()
     * // => Key("/Comedy/MontyPython")
     *
     */

  }, {
    key: "parent",
    value: function parent()
    /* : Key */
    {
      var list = this.list();

      if (list.length === 1) {
        return new _Key(pathSepS);
      }

      return new _Key(list.slice(0, -1).join(pathSepS));
    }
    /**
     * Returns the `child` Key of this Key.
     *
     * @param {Key} key
     * @returns {Key}
     *
     * @example
     * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))
     * // => Key('/Comedy/MontyPython/Actor:JohnCleese')
     *
     */

  }, {
    key: "child",
    value: function child(key
    /* : Key */
    )
    /* : Key */
    {
      if (this.toString() === pathSepS) {
        return key;
      } else if (key.toString() === pathSepS) {
        return this;
      }

      return new _Key(this.toString() + key.toString(), false);
    }
    /**
     * Returns whether this key is a prefix of `other`
     *
     * @param {Key} other
     * @returns {bool}
     *
     * @example
     * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')
     * // => true
     *
     */

  }, {
    key: "isAncestorOf",
    value: function isAncestorOf(other
    /* : Key */
    )
    /* : bool */
    {
      if (other.toString() === this.toString()) {
        return false;
      }

      return other.toString().startsWith(this.toString());
    }
    /**
     * Returns whether this key is a contains another as prefix.
     *
     * @param {Key} other
     * @returns {bool}
     *
     * @example
     * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')
     * // => true
     *
     */

  }, {
    key: "isDecendantOf",
    value: function isDecendantOf(other
    /* : Key */
    )
    /* : bool */
    {
      if (other.toString() === this.toString()) {
        return false;
      }

      return this.toString().startsWith(other.toString());
    }
    /**
     * Returns wether this key has only one namespace.
     *
     * @returns {bool}
     *
     */

  }, {
    key: "isTopLevel",
    value: function isTopLevel()
    /* : bool */
    {
      return this.list().length === 1;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get()
    /* : string */
    {
      return "[Key ".concat(this.toString(), "]");
    }
    /**
     * Constructs a key out of a namespace array.
     *
     * @param {Array<string>} list
     * @returns {Key}
     *
     * @example
     * Key.withNamespaces(['one', 'two'])
     * // => Key('/one/two')
     *
     */

  }], [{
    key: "withNamespaces",
    value: function withNamespaces(list
    /* : Array<string> */
    )
    /* : Key */
    {
      return new _Key(list.join(pathSepS));
    }
    /**
     * Returns a randomly (uuid) generated key.
     *
     * @returns {Key}
     *
     * @example
     * Key.random()
     * // => Key('/f98719ea086343f7b71f32ea9d9d521d')
     *
     */

  }, {
    key: "random",
    value: function random()
    /* : Key */
    {
      return new _Key(uuid().replace(/-/g, ''));
    }
  }]);

  return Key;
}();
/**
 * The first component of a namespace. `foo` in `foo:bar`
 *
 * @param {string} ns
 * @returns {string}
 */


function namespaceType(ns
/* : string */
)
/* : string */
{
  var parts = ns.split(':');

  if (parts.length < 2) {
    return '';
  }

  return parts.slice(0, -1).join(':');
}
/**
 * The last component of a namespace, `baz` in `foo:bar:baz`.
 *
 * @param {string} ns
 * @returns {string}
 */


function namespaceValue(ns
/* : string */
)
/* : string */
{
  var parts = ns.split(':');
  return parts[parts.length - 1];
}

var _Key = withIs(Key, {
  className: 'Key',
  symbolName: '@ipfs/interface-datastore/key'
});

module.exports = _Key;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var rng = __webpack_require__(163);

var bytesToUuid = __webpack_require__(164);

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof options == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }

  options = options || {};
  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var sources = __webpack_require__(166);

var sinks = __webpack_require__(172);

var throughs = __webpack_require__(178);

exports = module.exports = __webpack_require__(186);
exports.pull = exports;

for (var k in sources) {
  exports[k] = sources[k];
}

for (var k in throughs) {
  exports[k] = throughs[k];
}

for (var k in sinks) {
  exports[k] = sinks[k];
}

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function abortCb(cb, abort, onAbort) {
  cb(abort);
  onAbort && onAbort(abort === true ? null : abort);
  return;
};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var abortCb = __webpack_require__(82);

module.exports = function once(value, onAbort) {
  return function (abort, cb) {
    if (abort) return abortCb(cb, abort, onAbort);

    if (value != null) {
      var _value = value;
      value = null;
      cb(null, _value);
    } else cb(true);
  };
};

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var prop = __webpack_require__(25);

function id(e) {
  return e;
}

module.exports = function tester(test) {
  return 'object' === _typeof(test) && 'function' === typeof test.test //regexp
  ? function (data) {
    return test.test(data);
  } : prop(test) || id;
};

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function id(e) {
  return e;
}

var prop = __webpack_require__(25);

var filter = __webpack_require__(49); //drop items you have already seen.


module.exports = function unique(field, invert) {
  field = prop(field) || id;
  var seen = {};
  return filter(function (data) {
    var key = field(data);
    if (seen[key]) return !!invert; //false, by default
    else seen[key] = true;
    return !invert; //true by default
  });
};

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
var apply = Function.prototype.apply; // DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};

exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};

exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}

Timeout.prototype.unref = Timeout.prototype.ref = function () {};

Timeout.prototype.close = function () {
  this._clearFn.call(scope, this._id);
}; // Does not start the time, just sets up the members needed.


exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);
  var msecs = item._idleTimeout;

  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
}; // setimmediate attaches itself to the global object


__webpack_require__(189); // On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.


exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || void 0 && (void 0).setImmediate;
exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || void 0 && (void 0).clearImmediate;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)))

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var errcode = __webpack_require__(2);

module.exports.dbOpenFailedError = function (err) {
  err = err || new Error('Cannot open database');
  return errcode(err, 'ERR_DB_OPEN_FAILED');
};

module.exports.dbDeleteFailedError = function (err) {
  err = err || new Error('Delete failed');
  return errcode(err, 'ERR_DB_DELETE_FAILED');
};

module.exports.dbWriteFailedError = function (err) {
  err = err || new Error('Write failed');
  return errcode(err, 'ERR_DB_WRITE_FAILED');
};

module.exports.notFoundError = function (err) {
  err = err || new Error('Not Found');
  return errcode(err, 'ERR_NOT_FOUND');
};

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var CID = __webpack_require__(11);

var UnixFs = __webpack_require__(6);

var _require = __webpack_require__(13),
    DAGNode = _require.DAGNode;

var log = __webpack_require__(5)('ipfs:mfs:utils:with-mfs-root');

var mc = __webpack_require__(15);

var mh = __webpack_require__(9);

var _require2 = __webpack_require__(8),
    MFS_ROOT_KEY = _require2.MFS_ROOT_KEY;

var loadMfsRoot =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(context) {
    var cid, buf, node;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return context.repo.datastore.open();

          case 2:
            _context.prev = 2;
            _context.next = 5;
            return context.repo.datastore.get(MFS_ROOT_KEY);

          case 5:
            buf = _context.sent;
            cid = new CID(buf);
            _context.next = 20;
            break;

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](2);

            if (!(_context.t0.code !== 'ERR_NOT_FOUND')) {
              _context.next = 13;
              break;
            }

            throw _context.t0;

          case 13:
            log('Creating new MFS root');
            node = DAGNode.create(new UnixFs('directory').marshal());
            _context.next = 17;
            return context.ipld.put(node, mc.DAG_PB, {
              cidVersion: 0,
              hashAlg: mh.names['sha2-256'] // why can't ipld look this up?

            });

          case 17:
            cid = _context.sent;
            _context.next = 20;
            return context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer);

          case 20:
            log("Loaded MFS root /ipfs/".concat(cid));
            return _context.abrupt("return", cid);

          case 22:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 9]]);
  }));

  return function loadMfsRoot(_x) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = loadMfsRoot;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// base-x encoding
// Forked from https://github.com/cryptocoinjs/bs58
// Originally written by Mike Hearn for BitcoinJ
// Copyright (c) 2011 Google Inc
// Ported to JavaScript by Stefan Thomas
// Merged Buffer refactorings from base58-native by Stephen Pair
// Copyright (c) 2013 BitPay Inc
var Buffer = __webpack_require__(51).Buffer;

module.exports = function base(ALPHABET) {
  var ALPHABET_MAP = {};
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0); // pre-compute lookup table

  for (var z = 0; z < ALPHABET.length; z++) {
    var x = ALPHABET.charAt(z);
    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous');
    ALPHABET_MAP[x] = z;
  }

  function encode(source) {
    if (source.length === 0) return '';
    var digits = [0];

    for (var i = 0; i < source.length; ++i) {
      for (var j = 0, carry = source[i]; j < digits.length; ++j) {
        carry += digits[j] << 8;
        digits[j] = carry % BASE;
        carry = carry / BASE | 0;
      }

      while (carry > 0) {
        digits.push(carry % BASE);
        carry = carry / BASE | 0;
      }
    }

    var string = ''; // deal with leading zeros

    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
      string += LEADER;
    } // convert digits to a string


    for (var q = digits.length - 1; q >= 0; --q) {
      string += ALPHABET[digits[q]];
    }

    return string;
  }

  function decodeUnsafe(string) {
    if (typeof string !== 'string') throw new TypeError('Expected String');
    if (string.length === 0) return Buffer.allocUnsafe(0);
    var bytes = [0];

    for (var i = 0; i < string.length; i++) {
      var value = ALPHABET_MAP[string[i]];
      if (value === undefined) return;

      for (var j = 0, carry = value; j < bytes.length; ++j) {
        carry += bytes[j] * BASE;
        bytes[j] = carry & 0xff;
        carry >>= 8;
      }

      while (carry > 0) {
        bytes.push(carry & 0xff);
        carry >>= 8;
      }
    } // deal with leading zeros


    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {
      bytes.push(0);
    }

    return Buffer.from(bytes.reverse());
  }

  function decode(string) {
    var buffer = decodeUnsafe(string);
    if (buffer) return buffer;
    throw new Error('Non-base' + BASE + ' character');
  }

  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  };
};

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var varint = __webpack_require__(12);

module.exports = {
  numberToBuffer: numberToBuffer,
  bufferToNumber: bufferToNumber,
  varintBufferEncode: varintBufferEncode,
  varintBufferDecode: varintBufferDecode
};

function bufferToNumber(buf) {
  return parseInt(buf.toString('hex'), 16);
}

function numberToBuffer(num) {
  var hexString = num.toString(16);

  if (hexString.length % 2 === 1) {
    hexString = '0' + hexString;
  }

  return Buffer.from(hexString, 'hex');
}

function varintBufferEncode(input) {
  return Buffer.from(varint.encode(bufferToNumber(input)));
}

function varintBufferDecode(input) {
  return numberToBuffer(varint.decode(input));
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var schema = __webpack_require__(210);

var compile = __webpack_require__(214);

var flatten = function flatten(values) {
  if (!values) return null;
  var result = {};
  Object.keys(values).forEach(function (k) {
    result[k] = values[k].value;
  });
  return result;
};

module.exports = function (proto, opts) {
  if (!opts) opts = {};
  if (!proto) throw new Error('Pass in a .proto string or a protobuf-schema parsed object');
  var sch = _typeof(proto) === 'object' && !Buffer.isBuffer(proto) ? proto : schema.parse(proto); // to not make toString,toJSON enumarable we make a fire-and-forget prototype

  var Messages = function Messages() {
    var self = this;
    compile(sch, opts.encodings || {}).forEach(function (m) {
      self[m.name] = flatten(m.values) || m;
    });
  };

  Messages.prototype.toString = function () {
    return schema.stringify(sch);
  };

  Messages.prototype.toJSON = function () {
    return sch;
  };

  return new Messages();
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Make certain getters enumnerable
 *
 * This can be used to add additional getters that are enumerable and hence
 * show up on an `Object.keys()` call.
 *
 * @param {Object} object - The object it should be applied to
 * @param {Array.<String>} fields - The fields that should be made enumnerable
 */

var addEnumerableGetters = function addEnumerableGetters(object, fields) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var field = _step.value;
      var prop = void 0;
      var proto = object; // Walk up the proottype chain until a property with the given name is
      // found

      while (prop === undefined) {
        proto = Object.getPrototypeOf(proto);

        if (proto === null) {
          throw new Error("no getter named '".concat(field, "' found"));
        }

        prop = Object.getOwnPropertyDescriptor(proto, field);
      } // There is a property with the correct name, but it's not a getter


      if (prop.get === undefined) {
        throw new Error("no getter named '".concat(field, "' found"));
      }

      Object.defineProperty(object, field, {
        enumerable: true,
        get: prop.get
      });
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};
/**
 * Makes all properties with a leading underscore non-enumerable.
 *
 * @param {Object} object - The object it should be applied to
 */


var hidePrivateFields = function hidePrivateFields(object) {
  for (var key in object) {
    if (key[0] === '_') {
      Object.defineProperty(object, key, {
        enumerable: false
      });
    }
  }
};

module.exports = {
  addEnumerableGetters: addEnumerableGetters,
  hidePrivateFields: hidePrivateFields
};

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _require = __webpack_require__(1),
    Buffer = _require.Buffer;

var errcode = __webpack_require__(2);

var multihash = __webpack_require__(9);

var crypto = __webpack_require__(225);
/**
 * Hash the given `buf` using the algorithm specified by `alg`.
 * @param {Buffer} buf - The value to hash.
 * @param {number|string} alg - The algorithm to use eg 'sha1'
 * @param {number} [length] - Optionally trim the result to this length.
 * @returns {Promise<Buffer>}
 */


function Multihashing(_x, _x2, _x3) {
  return _Multihashing.apply(this, arguments);
}
/**
 * The `buffer` module for easy use in the browser.
 *
 * @type {Buffer}
 */


function _Multihashing() {
  _Multihashing = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(buf, alg, length) {
    var digest;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return Multihashing.digest(buf, alg, length);

          case 2:
            digest = _context3.sent;
            return _context3.abrupt("return", multihash.encode(digest, alg, length));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _Multihashing.apply(this, arguments);
}

Multihashing.Buffer = Buffer; // for browser things

/**
 * Expose multihash itself, to avoid silly double requires.
 */

Multihashing.multihash = multihash;
/**
 * @param {Buffer} buf - The value to hash.
 * @param {number|string} alg - The algorithm to use eg 'sha1'
 * @param {number} [length] - Optionally trim the result to this length.
 * @returns {Promise<Buffer>}
 */

Multihashing.digest =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(buf, alg, length) {
    var hash, digest;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            hash = Multihashing.createHash(alg);
            _context.next = 3;
            return hash(buf);

          case 3:
            digest = _context.sent;
            return _context.abrupt("return", length ? digest.slice(0, length) : digest);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Creates a function that hashes with the given algorithm
 *
 * @param {string|number} alg - The algorithm to use eg 'sha1'
 *
 * @returns {function} - The hash function corresponding to `alg`
 */


Multihashing.createHash = function (alg) {
  if (!alg) {
    throw errcode('hash algorithm must be specified', 'ERR_HASH_ALGORITHM_NOT_SPECIFIED');
  }

  alg = multihash.coerceCode(alg);

  if (!Multihashing.functions[alg]) {
    throw errcode("multihash function '".concat(alg, "' not yet supported"), 'ERR_HASH_ALGORITHM_NOT_SUPPORTED');
  }

  return Multihashing.functions[alg];
};
/**
 * Mapping of multihash codes to their hashing functions.
 * @type {Object}
 */


Multihashing.functions = {
  // sha1
  0x11: crypto.sha1,
  // sha2-256
  0x12: crypto.sha2256,
  // sha2-512
  0x13: crypto.sha2512,
  // sha3-512
  0x14: crypto.sha3512,
  // sha3-384
  0x15: crypto.sha3384,
  // sha3-256
  0x16: crypto.sha3256,
  // sha3-224
  0x17: crypto.sha3224,
  // shake-128
  0x18: crypto.shake128,
  // shake-256
  0x19: crypto.shake256,
  // keccak-224
  0x1A: crypto.keccak224,
  // keccak-256
  0x1B: crypto.keccak256,
  // keccak-384
  0x1C: crypto.keccak384,
  // keccak-512
  0x1D: crypto.keccak512,
  // murmur3-128
  0x22: crypto.murmur3128,
  // murmur3-32
  0x23: crypto.murmur332,
  // dbl-sha2-256
  0x56: crypto.dblSha2256 // add blake functions

};
crypto.addBlake(Multihashing.functions);

Multihashing.validate =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(buf, hash) {
    var newHash;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return Multihashing(buf, multihash.decode(hash).name);

          case 2:
            newHash = _context2.sent;
            return _context2.abrupt("return", Buffer.compare(hash, newHash) === 0);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}();

module.exports = Multihashing;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array'; // For convenience, let people hash a string, not just a Uint8Array

function normalizeInput(input) {
  var ret;

  if (input instanceof Uint8Array) {
    ret = input;
  } else if (input instanceof Buffer) {
    ret = new Uint8Array(input);
  } else if (typeof input === 'string') {
    ret = new Uint8Array(Buffer.from(input, 'utf8'));
  } else {
    throw new Error(ERROR_MSG_INPUT);
  }

  return ret;
} // Converts a Uint8Array to a hexadecimal string
// For example, toHex([255, 0, 255]) returns "ff00ff"


function toHex(bytes) {
  return Array.prototype.map.call(bytes, function (n) {
    return (n < 16 ? '0' : '') + n.toString(16);
  }).join('');
} // Converts any value in [0...2^32-1] to an 8-character hex string


function uint32ToHex(val) {
  return (0x100000000 + val).toString(16).substring(1);
} // For debugging: prints out hash state in the same format as the RFC
// sample computation exactly, so that you can diff


function debugPrint(label, arr, size) {
  var msg = '\n' + label + ' = ';

  for (var i = 0; i < arr.length; i += 2) {
    if (size === 32) {
      msg += uint32ToHex(arr[i]).toUpperCase();
      msg += ' ';
      msg += uint32ToHex(arr[i + 1]).toUpperCase();
    } else if (size === 64) {
      msg += uint32ToHex(arr[i + 1]).toUpperCase();
      msg += uint32ToHex(arr[i]).toUpperCase();
    } else throw new Error('Invalid size ' + size);

    if (i % 6 === 4) {
      msg += '\n' + new Array(label.length + 4).join(' ');
    } else if (i < arr.length - 2) {
      msg += ' ';
    }
  }

  console.log(msg);
} // For performance testing: generates N bytes of input, hashes M times
// Measures and prints MB/second hash performance each time


function testSpeed(hashFn, N, M) {
  var startMs = new Date().getTime();
  var input = new Uint8Array(N);

  for (var i = 0; i < N; i++) {
    input[i] = i % 256;
  }

  var genMs = new Date().getTime();
  console.log('Generated random input in ' + (genMs - startMs) + 'ms');
  startMs = genMs;

  for (i = 0; i < M; i++) {
    var hashHex = hashFn(input);
    var hashMs = new Date().getTime();
    var ms = hashMs - startMs;
    startMs = hashMs;
    console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...');
    console.log(Math.round(N / (1 << 20) / (ms / 1000) * 100) / 100 + ' MB PER SECOND');
  }
}

module.exports = {
  normalizeInput: normalizeInput,
  toHex: toHex,
  debugPrint: debugPrint,
  testSpeed: testSpeed
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var extractDataFromBlock = __webpack_require__(96);

var validateOffsetAndLength = __webpack_require__(97);

var UnixFS = __webpack_require__(6);

var errCode = __webpack_require__(2);

function emitBytes(_x, _x2, _x3, _x4) {
  return _emitBytes.apply(this, arguments);
}

function _emitBytes() {
  _emitBytes = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(ipld, node, start, end) {
    var streamPosition,
        buf,
        file,
        nodeHasData,
        _buf,
        childStart,
        i,
        childLink,
        childEnd,
        child,
        _iteratorNormalCompletion,
        _didIteratorError,
        _iteratorError,
        _iterator,
        _step,
        _value,
        _buf2,
        _args = arguments;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            streamPosition = _args.length > 4 && _args[4] !== undefined ? _args[4] : 0;

            if (!Buffer.isBuffer(node)) {
              _context.next = 8;
              break;
            }

            buf = extractDataFromBlock(node, streamPosition, start, end);

            if (!buf.length) {
              _context.next = 6;
              break;
            }

            _context.next = 6;
            return buf;

          case 6:
            streamPosition += buf.length;
            return _context.abrupt("return", streamPosition);

          case 8:
            _context.prev = 8;
            file = UnixFS.unmarshal(node.Data);
            _context.next = 15;
            break;

          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](8);
            throw errCode(_context.t0, 'ERR_NOT_UNIXFS');

          case 15:
            // might be a unixfs `raw` node or have data on intermediate nodes
            nodeHasData = Boolean(file.data && file.data.length);

            if (!nodeHasData) {
              _context.next = 22;
              break;
            }

            _buf = extractDataFromBlock(file.data, streamPosition, start, end);

            if (!_buf.length) {
              _context.next = 21;
              break;
            }

            _context.next = 21;
            return _buf;

          case 21:
            streamPosition += file.data.length;

          case 22:
            childStart = streamPosition; // work out which child nodes contain the requested data

            i = 0;

          case 24:
            if (!(i < node.Links.length)) {
              _context.next = 71;
              break;
            }

            childLink = node.Links[i];
            childEnd = streamPosition + file.blockSizes[i];

            if (!(start >= childStart && start < childEnd || // child has offset byte
            end > childStart && end <= childEnd || // child has end byte
            start < childStart && end > childEnd)) {
              _context.next = 66;
              break;
            }

            _context.next = 30;
            return _awaitAsyncGenerator(ipld.get(childLink.Hash));

          case 30:
            child = _context.sent;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 33;
            _iterator = _asyncIterator(emitBytes(ipld, child, start, end, streamPosition));

          case 35:
            _context.next = 37;
            return _awaitAsyncGenerator(_iterator.next());

          case 37:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 41;
            return _awaitAsyncGenerator(_step.value);

          case 41:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 50;
              break;
            }

            _buf2 = _value;
            streamPosition += _buf2.length;
            _context.next = 47;
            return _buf2;

          case 47:
            _iteratorNormalCompletion = true;
            _context.next = 35;
            break;

          case 50:
            _context.next = 56;
            break;

          case 52:
            _context.prev = 52;
            _context.t1 = _context["catch"](33);
            _didIteratorError = true;
            _iteratorError = _context.t1;

          case 56:
            _context.prev = 56;
            _context.prev = 57;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 61;
              break;
            }

            _context.next = 61;
            return _awaitAsyncGenerator(_iterator["return"]());

          case 61:
            _context.prev = 61;

            if (!_didIteratorError) {
              _context.next = 64;
              break;
            }

            throw _iteratorError;

          case 64:
            return _context.finish(61);

          case 65:
            return _context.finish(56);

          case 66:
            streamPosition = childEnd;
            childStart = childEnd + 1;

          case 68:
            i++;
            _context.next = 24;
            break;

          case 71:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[8, 12], [33, 52, 56, 66], [57,, 61, 65]]);
  }));
  return _emitBytes.apply(this, arguments);
}

var fileContent = function fileContent(cid, node, unixfs, path, resolve, depth, ipld) {
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var fileSize = unixfs.fileSize();

    var _validateOffsetAndLen = validateOffsetAndLength(fileSize, options.offset, options.length),
        offset = _validateOffsetAndLen.offset,
        length = _validateOffsetAndLen.length;

    var start = offset;
    var end = offset + length;
    return emitBytes(ipld, node, start, end);
  };
};

module.exports = fileContent;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

module.exports = function extractDataFromBlock(block, blockStart, requestedStart, requestedEnd) {
  var blockLength = block.length;
  var blockEnd = blockStart + blockLength;

  if (requestedStart >= blockEnd || requestedEnd < blockStart) {
    // If we are looking for a byte range that is starts after the start of the block,
    // return an empty block.  This can happen when internal nodes contain data
    return Buffer.alloc(0);
  }

  if (requestedEnd >= blockStart && requestedEnd < blockEnd) {
    // If the end byte is in the current block, truncate the block to the end byte
    block = block.slice(0, requestedEnd - blockStart);
  }

  if (requestedStart >= blockStart && requestedStart < blockEnd) {
    // If the start byte is in the current block, skip to the start byte
    block = block.slice(requestedStart - blockStart);
  }

  return block;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var errCode = __webpack_require__(2);

var validateOffsetAndLength = function validateOffsetAndLength(size, offset, length) {
  if (!offset) {
    offset = 0;
  }

  if (offset < 0) {
    throw errCode(new Error('Offset must be greater than or equal to 0'), 'ERR_INVALID_PARAMS');
  }

  if (offset > size) {
    throw errCode(new Error('Offset must be less than the file size'), 'ERR_INVALID_PARAMS');
  }

  if (!length && length !== 0) {
    length = size - offset;
  }

  if (length < 0) {
    throw errCode(new Error('Length must be greater than or equal to 0'), 'ERR_INVALID_PARAMS');
  }

  if (offset + length > size) {
    length = size - offset;
  }

  return {
    offset: offset,
    length: length
  };
};

module.exports = validateOffsetAndLength;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var mkdir = __webpack_require__(57);

var stat = __webpack_require__(28);

var log = __webpack_require__(5)('ipfs:mfs:cp');

var errCode = __webpack_require__(2);

var updateTree = __webpack_require__(38);

var updateMfsRoot = __webpack_require__(37);

var addLink = __webpack_require__(39);

var applyDefaultOptions = __webpack_require__(10);

var toMfsPath = __webpack_require__(17);

var toSourcesAndDestination = __webpack_require__(255);

var toTrail = __webpack_require__(59);

var defaultOptions = {
  parents: false,
  flush: true,
  format: 'dag-pb',
  hashAlg: 'sha2-256',
  cidVersion: 0,
  shardSplitThreshold: 1000
};

module.exports = function (context) {
  return (
    /*#__PURE__*/
    function () {
      var _mfsCp = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var _len,
            args,
            _key,
            options,
            _ref,
            sources,
            destination,
            missing,
            destinationIsDirectory,
            parentFolder,
            destinationPath,
            trail,
            source,
            destinationName,
            _args = arguments;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = _args[_key];
                }

                options = applyDefaultOptions(args, defaultOptions);
                _context.next = 4;
                return toSourcesAndDestination(context, args);

              case 4:
                _ref = _context.sent;
                sources = _ref.sources;
                destination = _ref.destination;

                if (sources.length) {
                  _context.next = 9;
                  break;
                }

                throw errCode(new Error('Please supply at least one source'), 'ERR_INVALID_PARAMS');

              case 9:
                if (destination) {
                  _context.next = 11;
                  break;
                }

                throw errCode(new Error('Please supply a destination'), 'ERR_INVALID_PARAMS');

              case 11:
                options.parents = options.p || options.parents; // make sure all sources exist

                missing = sources.find(function (source) {
                  return !source.exists;
                });

                if (!missing) {
                  _context.next = 15;
                  break;
                }

                throw errCode(new Error("".concat(missing.path, " does not exist")), 'ERR_INVALID_PARAMS');

              case 15:
                destinationIsDirectory = isDirectory(destination);

                if (!destination.exists) {
                  _context.next = 22;
                  break;
                }

                log('Destination exists');

                if (!(sources.length === 1 && !destinationIsDirectory)) {
                  _context.next = 20;
                  break;
                }

                throw errCode(new Error('directory already has entry by that name'), 'ERR_ALREADY_EXISTS');

              case 20:
                _context.next = 51;
                break;

              case 22:
                log('Destination does not exist');

                if (!(sources.length > 1)) {
                  _context.next = 33;
                  break;
                }

                if (options.parents) {
                  _context.next = 26;
                  break;
                }

                throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');

              case 26:
                _context.next = 28;
                return mkdir(context)(destination.path, options);

              case 28:
                _context.next = 30;
                return toMfsPath(context, destination.path);

              case 30:
                destination = _context.sent;
                _context.next = 51;
                break;

              case 33:
                if (!(destination.parts.length > 1)) {
                  _context.next = 51;
                  break;
                }

                // copying to a folder, create it if necessary
                parentFolder = "/".concat(destination.parts.slice(0, -1).join('/'));
                _context.prev = 35;
                _context.next = 38;
                return stat(context)(parentFolder, options);

              case 38:
                _context.next = 51;
                break;

              case 40:
                _context.prev = 40;
                _context.t0 = _context["catch"](35);

                if (!(_context.t0.code !== 'ERR_NOT_FOUND')) {
                  _context.next = 44;
                  break;
                }

                throw _context.t0;

              case 44:
                if (options.parents) {
                  _context.next = 46;
                  break;
                }

                throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');

              case 46:
                _context.next = 48;
                return mkdir(context)(parentFolder, options);

              case 48:
                _context.next = 50;
                return toMfsPath(context, destination.path);

              case 50:
                destination = _context.sent;

              case 51:
                destinationPath = isDirectory(destination) ? destination.mfsPath : destination.mfsDirectory;
                _context.next = 54;
                return toTrail(context, destinationPath, options);

              case 54:
                trail = _context.sent;

                if (!(sources.length === 1)) {
                  _context.next = 60;
                  break;
                }

                source = sources.pop();
                destinationName = destinationIsDirectory ? source.name : destination.name;
                log("Only one source, copying to destination ".concat(destinationIsDirectory ? 'directory' : 'file', " ").concat(destinationName));
                return _context.abrupt("return", copyToFile(context, source, destinationName, trail, options));

              case 60:
                log('Multiple sources, wrapping in a directory');
                return _context.abrupt("return", copyToDirectory(context, sources, destination, trail, options));

              case 62:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[35, 40]]);
      }));

      function mfsCp() {
        return _mfsCp.apply(this, arguments);
      }

      return mfsCp;
    }()
  );
};

var isDirectory = function isDirectory(destination) {
  return destination.unixfs && destination.unixfs.type && destination.unixfs.type.includes('directory');
};

var copyToFile =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(context, source, destination, destinationTrail, options) {
    var parent, newRootCid;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            parent = destinationTrail.pop();
            _context2.next = 3;
            return addSourceToParent(context, source, destination, parent, options);

          case 3:
            parent = _context2.sent;
            // update the tree with the new containg directory
            destinationTrail.push(parent);
            _context2.next = 7;
            return updateTree(context, destinationTrail, options);

          case 7:
            newRootCid = _context2.sent;
            _context2.next = 10;
            return updateMfsRoot(context, newRootCid);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function copyToFile(_x, _x2, _x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();

var copyToDirectory =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(context, sources, destination, destinationTrail, options) {
    var i, source, newRootCid;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            i = 0;

          case 1:
            if (!(i < sources.length)) {
              _context3.next = 9;
              break;
            }

            source = sources[i];
            _context3.next = 5;
            return addSourceToParent(context, source, source.name, destination, options);

          case 5:
            destination = _context3.sent;

          case 6:
            i++;
            _context3.next = 1;
            break;

          case 9:
            // update the tree with the new containg directory
            destinationTrail[destinationTrail.length - 1] = destination;
            _context3.next = 12;
            return updateTree(context, destinationTrail, options);

          case 12:
            newRootCid = _context3.sent;
            _context3.next = 15;
            return updateMfsRoot(context, newRootCid);

          case 15:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function copyToDirectory(_x6, _x7, _x8, _x9, _x10) {
    return _ref3.apply(this, arguments);
  };
}();

var addSourceToParent =
/*#__PURE__*/
function () {
  var _ref4 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee4(context, source, childName, parent, options) {
    var sourceBlock, _ref5, node, cid;

    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return context.repo.blocks.get(source.cid);

          case 2:
            sourceBlock = _context4.sent;
            _context4.next = 5;
            return addLink(context, {
              parentCid: parent.cid,
              size: sourceBlock.data.length,
              cid: source.cid,
              name: childName,
              format: options.format,
              hashAlg: options.hashAlg,
              cidVersion: options.cidVersion
            });

          case 5:
            _ref5 = _context4.sent;
            node = _ref5.node;
            cid = _ref5.cid;
            parent.node = node;
            parent.cid = cid;
            parent.size = node.size;
            return _context4.abrupt("return", parent);

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function addSourceToParent(_x11, _x12, _x13, _x14, _x15) {
    return _ref4.apply(this, arguments);
  };
}();

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _require = __webpack_require__(13),
    DAGNode = _require.DAGNode;

var Bucket = __webpack_require__(55);

var DirSharded = __webpack_require__(34);

var log = __webpack_require__(5)('ipfs:mfs:core:utils:hamt-utils');

var UnixFS = __webpack_require__(6);

var mc = __webpack_require__(15);

var mh = __webpack_require__(9);

var last = __webpack_require__(36);

var updateHamtDirectory =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(context, links, bucket, options) {
    var data, dir, format, hashAlg, parent, cid;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // update parent with new bit field
            data = Buffer.from(bucket._children.bitField().reverse());
            dir = new UnixFS('hamt-sharded-directory', data);
            dir.fanout = bucket.tableSize();
            dir.hashType = DirSharded.hashFn.code;
            format = mc[options.format.toUpperCase().replace(/-/g, '_')];
            hashAlg = mh.names[options.hashAlg];
            parent = DAGNode.create(dir.marshal(), links);
            _context.next = 9;
            return context.ipld.put(parent, format, {
              cidVersion: options.cidVersion,
              hashAlg: hashAlg,
              hashOnly: !options.flush
            });

          case 9:
            cid = _context.sent;
            return _context.abrupt("return", {
              node: parent,
              cid: cid
            });

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function updateHamtDirectory(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

var recreateHamtLevel =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(links, rootBucket, parentBucket, positionAtParent) {
    var bucket;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // recreate this level of the HAMT
            bucket = new Bucket({
              hashFn: DirSharded.hashFn,
              hash: parentBucket ? parentBucket._options.hash : undefined
            }, parentBucket, positionAtParent);

            if (parentBucket) {
              parentBucket._putObjectAt(positionAtParent, bucket);
            }

            _context2.next = 4;
            return addLinksToHamtBucket(links, bucket, rootBucket);

          case 4:
            return _context2.abrupt("return", bucket);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function recreateHamtLevel(_x5, _x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}();

var addLinksToHamtBucket =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(links, bucket, rootBucket) {
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return Promise.all(links.map(function (link) {
              if (link.Name.length === 2) {
                var pos = parseInt(link.Name, 16);

                bucket._putObjectAt(pos, new Bucket({
                  hashFn: DirSharded.hashFn
                }, bucket, pos));

                return Promise.resolve();
              }

              return (rootBucket || bucket).put(link.Name.substring(2), {
                size: link.TSize,
                cid: link.Hash
              });
            }));

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function addLinksToHamtBucket(_x9, _x10, _x11) {
    return _ref3.apply(this, arguments);
  };
}();

var toPrefix = function toPrefix(position) {
  return position.toString('16').toUpperCase().padStart(2, '0').substring(0, 2);
};

var generatePath =
/*#__PURE__*/
function () {
  var _ref4 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee4(context, fileName, rootNode) {
    var rootBucket, position, path, currentBucket, _loop, i, _ret;

    return _regenerator["default"].wrap(function _callee4$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return recreateHamtLevel(rootNode.Links, null, null, null);

          case 2:
            rootBucket = _context5.sent;
            _context5.next = 5;
            return rootBucket._findNewBucketAndPos(fileName);

          case 5:
            position = _context5.sent;
            // the path to the root bucket
            path = [{
              bucket: position.bucket,
              prefix: toPrefix(position.pos)
            }];
            currentBucket = position.bucket;

            while (currentBucket !== rootBucket) {
              path.push({
                bucket: currentBucket,
                prefix: toPrefix(currentBucket._posAtParent)
              });
              currentBucket = currentBucket._parent;
            }

            path.reverse();
            path[0].node = rootNode; // load DAGNode for each path segment

            _loop =
            /*#__PURE__*/
            _regenerator["default"].mark(function _loop(i) {
              var segment, link, node, _position, nextSegment;

              return _regenerator["default"].wrap(function _loop$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      segment = path[i]; // find prefix in links

                      link = segment.node.Links.filter(function (link) {
                        return link.Name.substring(0, 2) === segment.prefix;
                      }).pop(); // entry was not in shard

                      if (link) {
                        _context4.next = 5;
                        break;
                      }

                      // reached bottom of tree, file will be added to the current bucket
                      log("Link ".concat(segment.prefix).concat(fileName, " will be added")); // return path

                      return _context4.abrupt("return", "continue");

                    case 5:
                      if (!(link.Name === "".concat(segment.prefix).concat(fileName))) {
                        _context4.next = 8;
                        break;
                      }

                      log("Link ".concat(segment.prefix).concat(fileName, " will be replaced")); // file already existed, file will be added to the current bucket
                      // return path

                      return _context4.abrupt("return", "continue");

                    case 8:
                      // found subshard
                      log("Found subshard ".concat(segment.prefix));
                      _context4.next = 11;
                      return context.ipld.get(link.Hash);

                    case 11:
                      node = _context4.sent;

                      if (path[i + 1]) {
                        _context4.next = 21;
                        break;
                      }

                      log("Loaded new subshard ".concat(segment.prefix));
                      _context4.next = 16;
                      return recreateHamtLevel(node.Links, rootBucket, segment.bucket, parseInt(segment.prefix, 16));

                    case 16:
                      _context4.next = 18;
                      return rootBucket._findNewBucketAndPos(fileName);

                    case 18:
                      _position = _context4.sent;
                      // i--
                      path.push({
                        bucket: _position.bucket,
                        prefix: toPrefix(_position.pos),
                        node: node
                      });
                      return _context4.abrupt("return", "continue");

                    case 21:
                      nextSegment = path[i + 1]; // add intermediate links to bucket

                      _context4.next = 24;
                      return addLinksToHamtBucket(node.Links, nextSegment.bucket, rootBucket);

                    case 24:
                      nextSegment.node = node;

                    case 25:
                    case "end":
                      return _context4.stop();
                  }
                }
              }, _loop);
            });
            i = 0;

          case 13:
            if (!(i < path.length)) {
              _context5.next = 21;
              break;
            }

            return _context5.delegateYield(_loop(i), "t0", 15);

          case 15:
            _ret = _context5.t0;

            if (!(_ret === "continue")) {
              _context5.next = 18;
              break;
            }

            return _context5.abrupt("continue", 18);

          case 18:
            i++;
            _context5.next = 13;
            break;

          case 21:
            _context5.next = 23;
            return rootBucket.put(fileName, true);

          case 23:
            path.reverse();
            return _context5.abrupt("return", {
              rootBucket: rootBucket,
              path: path
            });

          case 25:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee4);
  }));

  return function generatePath(_x12, _x13, _x14) {
    return _ref4.apply(this, arguments);
  };
}();

var createShard =
/*#__PURE__*/
function () {
  var _ref5 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee5(context, contents, options) {
    var shard, i;
    return _regenerator["default"].wrap(function _callee5$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            shard = new DirSharded({
              root: true,
              dir: true,
              parent: null,
              parentKey: null,
              path: '',
              dirty: true,
              flat: false
            }, options);
            i = 0;

          case 2:
            if (!(i < contents.length)) {
              _context6.next = 8;
              break;
            }

            _context6.next = 5;
            return shard._bucket.put(contents[i].name, {
              size: contents[i].size,
              cid: contents[i].cid
            });

          case 5:
            i++;
            _context6.next = 2;
            break;

          case 8:
            return _context6.abrupt("return", last(shard.flush('', context.ipld, null)));

          case 9:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee5);
  }));

  return function createShard(_x15, _x16, _x17) {
    return _ref5.apply(this, arguments);
  };
}();

module.exports = {
  generatePath: generatePath,
  updateHamtDirectory: updateHamtDirectory,
  recreateHamtLevel: recreateHamtLevel,
  addLinksToHamtBucket: addLinksToHamtBucket,
  toPrefix: toPrefix,
  createShard: createShard
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var errCode = __webpack_require__(2);

var updateTree = __webpack_require__(38);

var updateMfsRoot = __webpack_require__(37);

var toSources = __webpack_require__(58);

var removeLink = __webpack_require__(258);

var toMfsPath = __webpack_require__(17);

var toTrail = __webpack_require__(59);

var applyDefaultOptions = __webpack_require__(10);

var _require = __webpack_require__(8),
    FILE_SEPARATOR = _require.FILE_SEPARATOR;

var defaultOptions = {
  recursive: false,
  cidVersion: 0,
  hashAlg: 'sha2-256',
  format: 'dag-pb',
  flush: true
};

module.exports = function (context) {
  return (
    /*#__PURE__*/
    function () {
      var _mfsRm = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var args,
            _ref,
            sources,
            options,
            _iteratorNormalCompletion,
            _didIteratorError,
            _iteratorError,
            _iterator,
            _step,
            source,
            _args = arguments;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                args = Array.from(_args);
                _context.next = 3;
                return toSources(context, args, defaultOptions);

              case 3:
                _ref = _context.sent;
                sources = _ref.sources;
                options = applyDefaultOptions(args, defaultOptions);

                if (sources.length) {
                  _context.next = 8;
                  break;
                }

                throw errCode(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS');

              case 8:
                sources.forEach(function (source) {
                  if (source.path === FILE_SEPARATOR) {
                    throw errCode(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS');
                  }
                });
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context.prev = 12;
                _iterator = sources[Symbol.iterator]();

              case 14:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context.next = 21;
                  break;
                }

                source = _step.value;
                _context.next = 18;
                return removePath(context, source.path, options);

              case 18:
                _iteratorNormalCompletion = true;
                _context.next = 14;
                break;

              case 21:
                _context.next = 27;
                break;

              case 23:
                _context.prev = 23;
                _context.t0 = _context["catch"](12);
                _didIteratorError = true;
                _iteratorError = _context.t0;

              case 27:
                _context.prev = 27;
                _context.prev = 28;

                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }

              case 30:
                _context.prev = 30;

                if (!_didIteratorError) {
                  _context.next = 33;
                  break;
                }

                throw _iteratorError;

              case 33:
                return _context.finish(30);

              case 34:
                return _context.finish(27);

              case 35:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[12, 23, 27, 35], [28,, 30, 34]]);
      }));

      function mfsRm() {
        return _mfsRm.apply(this, arguments);
      }

      return mfsRm;
    }()
  );
};

var removePath =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(context, path, options) {
    var mfsPath, trail, child, parent, _ref3, cid, newRootCid;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return toMfsPath(context, path);

          case 2:
            mfsPath = _context2.sent;
            _context2.next = 5;
            return toTrail(context, mfsPath.mfsPath, options);

          case 5:
            trail = _context2.sent;
            child = trail.pop();
            parent = trail[trail.length - 1];

            if (parent) {
              _context2.next = 10;
              break;
            }

            throw errCode(new Error("".concat(path, " does not exist")), 'ERR_NOT_FOUND');

          case 10:
            if (!(child.type === 'directory' && !options.recursive)) {
              _context2.next = 12;
              break;
            }

            throw errCode(new Error("".concat(path, " is a directory, use -r to remove directories")), 'ERR_WAS_DIR');

          case 12:
            _context2.next = 14;
            return removeLink(context, {
              parentCid: parent.cid,
              name: child.name,
              format: options.format,
              hashAlg: options.hashAlg,
              cidVersion: options.cidVersion,
              flush: options.flush
            });

          case 14:
            _ref3 = _context2.sent;
            cid = _ref3.cid;
            parent.cid = cid; // update the tree with the new child

            _context2.next = 19;
            return updateTree(context, trail, options);

          case 19:
            newRootCid = _context2.sent;
            _context2.next = 22;
            return updateMfsRoot(context, newRootCid);

          case 22:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function removePath(_x, _x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var DuplexStream = __webpack_require__(271).Duplex,
    util = __webpack_require__(69);

function BufferList(callback) {
  if (!(this instanceof BufferList)) return new BufferList(callback);
  this._bufs = [];
  this.length = 0;

  if (typeof callback == 'function') {
    this._callback = callback;

    var piper = function piper(err) {
      if (this._callback) {
        this._callback(err);

        this._callback = null;
      }
    }.bind(this);

    this.on('pipe', function onPipe(src) {
      src.on('error', piper);
    });
    this.on('unpipe', function onUnpipe(src) {
      src.removeListener('error', piper);
    });
  } else {
    this.append(callback);
  }

  DuplexStream.call(this);
}

util.inherits(BufferList, DuplexStream);

BufferList.prototype._offset = function _offset(offset) {
  var tot = 0,
      i = 0,
      _t;

  if (offset === 0) return [0, 0];

  for (; i < this._bufs.length; i++) {
    _t = tot + this._bufs[i].length;

    if (offset < _t || i == this._bufs.length - 1) {
      return [i, offset - tot];
    }

    tot = _t;
  }
};

BufferList.prototype._reverseOffset = function (blOffset) {
  var bufferId = blOffset[0];
  var offset = blOffset[1];

  for (var i = 0; i < bufferId; i++) {
    offset += this._bufs[i].length;
  }

  return offset;
};

BufferList.prototype.append = function append(buf) {
  var i = 0;

  if (Buffer.isBuffer(buf)) {
    this._appendBuffer(buf);
  } else if (Array.isArray(buf)) {
    for (; i < buf.length; i++) {
      this.append(buf[i]);
    }
  } else if (buf instanceof BufferList) {
    // unwrap argument into individual BufferLists
    for (; i < buf._bufs.length; i++) {
      this.append(buf._bufs[i]);
    }
  } else if (buf != null) {
    // coerce number arguments to strings, since Buffer(number) does
    // uninitialized memory allocation
    if (typeof buf == 'number') buf = buf.toString();

    this._appendBuffer(Buffer.from(buf));
  }

  return this;
};

BufferList.prototype._appendBuffer = function appendBuffer(buf) {
  this._bufs.push(buf);

  this.length += buf.length;
};

BufferList.prototype._write = function _write(buf, encoding, callback) {
  this._appendBuffer(buf);

  if (typeof callback == 'function') callback();
};

BufferList.prototype._read = function _read(size) {
  if (!this.length) return this.push(null);
  size = Math.min(size, this.length);
  this.push(this.slice(0, size));
  this.consume(size);
};

BufferList.prototype.end = function end(chunk) {
  DuplexStream.prototype.end.call(this, chunk);

  if (this._callback) {
    this._callback(null, this.slice());

    this._callback = null;
  }
};

BufferList.prototype.get = function get(index) {
  if (index > this.length || index < 0) {
    return undefined;
  }

  var offset = this._offset(index);

  return this._bufs[offset[0]][offset[1]];
};

BufferList.prototype.slice = function slice(start, end) {
  if (typeof start == 'number' && start < 0) start += this.length;
  if (typeof end == 'number' && end < 0) end += this.length;
  return this.copy(null, 0, start, end);
};

BufferList.prototype.copy = function copy(dst, dstStart, srcStart, srcEnd) {
  if (typeof srcStart != 'number' || srcStart < 0) srcStart = 0;
  if (typeof srcEnd != 'number' || srcEnd > this.length) srcEnd = this.length;
  if (srcStart >= this.length) return dst || Buffer.alloc(0);
  if (srcEnd <= 0) return dst || Buffer.alloc(0);

  var copy = !!dst,
      off = this._offset(srcStart),
      len = srcEnd - srcStart,
      bytes = len,
      bufoff = copy && dstStart || 0,
      start = off[1],
      l,
      i; // copy/slice everything


  if (srcStart === 0 && srcEnd == this.length) {
    if (!copy) {
      // slice, but full concat if multiple buffers
      return this._bufs.length === 1 ? this._bufs[0] : Buffer.concat(this._bufs, this.length);
    } // copy, need to copy individual buffers


    for (i = 0; i < this._bufs.length; i++) {
      this._bufs[i].copy(dst, bufoff);

      bufoff += this._bufs[i].length;
    }

    return dst;
  } // easy, cheap case where it's a subset of one of the buffers


  if (bytes <= this._bufs[off[0]].length - start) {
    return copy ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes) : this._bufs[off[0]].slice(start, start + bytes);
  }

  if (!copy) // a slice, we need something to copy in to
    dst = Buffer.allocUnsafe(len);

  for (i = off[0]; i < this._bufs.length; i++) {
    l = this._bufs[i].length - start;

    if (bytes > l) {
      this._bufs[i].copy(dst, bufoff, start);
    } else {
      this._bufs[i].copy(dst, bufoff, start, start + bytes);

      break;
    }

    bufoff += l;
    bytes -= l;
    if (start) start = 0;
  }

  return dst;
};

BufferList.prototype.shallowSlice = function shallowSlice(start, end) {
  start = start || 0;
  end = typeof end !== 'number' ? this.length : end;
  if (start < 0) start += this.length;
  if (end < 0) end += this.length;

  if (start === end) {
    return new BufferList();
  }

  var startOffset = this._offset(start),
      endOffset = this._offset(end),
      buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);

  if (endOffset[1] == 0) buffers.pop();else buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
  if (startOffset[1] != 0) buffers[0] = buffers[0].slice(startOffset[1]);
  return new BufferList(buffers);
};

BufferList.prototype.toString = function toString(encoding, start, end) {
  return this.slice(start, end).toString(encoding);
};

BufferList.prototype.consume = function consume(bytes) {
  while (this._bufs.length) {
    if (bytes >= this._bufs[0].length) {
      bytes -= this._bufs[0].length;
      this.length -= this._bufs[0].length;

      this._bufs.shift();
    } else {
      this._bufs[0] = this._bufs[0].slice(bytes);
      this.length -= bytes;
      break;
    }
  }

  return this;
};

BufferList.prototype.duplicate = function duplicate() {
  var i = 0,
      copy = new BufferList();

  for (; i < this._bufs.length; i++) {
    copy.append(this._bufs[i]);
  }

  return copy;
};

BufferList.prototype._destroy = function _destroy(err, cb) {
  this._bufs.length = 0;
  this.length = 0;
  cb(err);
};

BufferList.prototype.indexOf = function (search, offset, encoding) {
  if (encoding === undefined && typeof offset === 'string') {
    encoding = offset;
    offset = undefined;
  }

  if (typeof search === 'function' || Array.isArray(search)) {
    throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');
  } else if (typeof search === 'number') {
    search = Buffer.from([search]);
  } else if (typeof search === 'string') {
    search = Buffer.from(search, encoding);
  } else if (search instanceof BufferList) {
    search = search.slice();
  } else if (!Buffer.isBuffer(search)) {
    search = Buffer.from(search);
  }

  offset = Number(offset || 0);

  if (isNaN(offset)) {
    offset = 0;
  }

  if (offset < 0) {
    offset = this.length + offset;
  }

  if (offset < 0) {
    offset = 0;
  }

  if (search.length === 0) {
    return offset > this.length ? this.length : offset;
  }

  var blOffset = this._offset(offset);

  var blIndex = blOffset[0]; // index of which internal buffer we're working on

  var buffOffset = blOffset[1]; // offset of the internal buffer we're working on
  // scan over each buffer

  for (blIndex; blIndex < this._bufs.length; blIndex++) {
    var buff = this._bufs[blIndex];

    while (buffOffset < buff.length) {
      var availableWindow = buff.length - buffOffset;

      if (availableWindow >= search.length) {
        var nativeSearchResult = buff.indexOf(search, buffOffset);

        if (nativeSearchResult !== -1) {
          return this._reverseOffset([blIndex, nativeSearchResult]);
        }

        buffOffset = buff.length - search.length + 1; // end of native search window
      } else {
        var revOffset = this._reverseOffset([blIndex, buffOffset]);

        if (this._match(revOffset, search)) {
          return revOffset;
        }

        buffOffset++;
      }
    }

    buffOffset = 0;
  }

  return -1;
};

BufferList.prototype._match = function (offset, search) {
  if (this.length - offset < search.length) {
    return false;
  }

  for (var searchOffset = 0; searchOffset < search.length; searchOffset++) {
    if (this.get(offset + searchOffset) !== search[searchOffset]) {
      return false;
    }
  }

  return true;
};

(function () {
  var methods = {
    'readDoubleBE': 8,
    'readDoubleLE': 8,
    'readFloatBE': 4,
    'readFloatLE': 4,
    'readInt32BE': 4,
    'readInt32LE': 4,
    'readUInt32BE': 4,
    'readUInt32LE': 4,
    'readInt16BE': 2,
    'readInt16LE': 2,
    'readUInt16BE': 2,
    'readUInt16LE': 2,
    'readInt8': 1,
    'readUInt8': 1,
    'readIntBE': null,
    'readIntLE': null,
    'readUIntBE': null,
    'readUIntLE': null
  };

  for (var m in methods) {
    (function (m) {
      if (methods[m] === null) {
        BufferList.prototype[m] = function (offset, byteLength) {
          return this.slice(offset, offset + byteLength)[m](0, byteLength);
        };
      } else {
        BufferList.prototype[m] = function (offset) {
          return this.slice(offset, offset + methods[m])[m](0);
        };
      }
    })(m);
  }
})();

module.exports = BufferList;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__(16).EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(103);
/*</replacement>*/


var Buffer = __webpack_require__(1).Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = __webpack_require__(272);

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(273);

var destroyImpl = __webpack_require__(104);

var _require = __webpack_require__(105),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(21).codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

var _require2 = __webpack_require__(275),
    emitExperimentalWarning = _require2.emitExperimentalWarning; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;

__webpack_require__(7)(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(22);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(40).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(22);
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(40).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc); // if setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding;
  return this;
}; // Don't raise the hwm > 8MB


var MAX_HWM = 0x800000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  this.emit('error', new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    emitExperimentalWarning('Readable[Symbol.asyncIterator]');

    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(276);
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4), __webpack_require__(3)))

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(16).EventEmitter;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) { // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      process.nextTick(emitErrorNT, this, err);
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      process.nextTick(emitErrorAndCloseNT, _this, err);

      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ERR_INVALID_OPT_VALUE = __webpack_require__(21).codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(107)
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(103);
/*</replacement>*/


var Buffer = __webpack_require__(1).Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = __webpack_require__(104);

var _require = __webpack_require__(105),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(21).codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

__webpack_require__(7)(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(22);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(22); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options["final"] === 'function') this._final = options["final"];
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  this.emit('error', new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  stream.emit('error', er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    stream.emit('error', er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      stream.emit('error', err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4), __webpack_require__(3)))

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module exports.
 */
module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate(fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;

  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }

      warned = true;
    }

    return fn.apply(this, arguments);
  }

  return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */


function config(name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }

  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)))

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var _require$codes = __webpack_require__(21).codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = __webpack_require__(22);

__webpack_require__(7)(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;

var EE = __webpack_require__(16).EventEmitter;

var inherits = __webpack_require__(7);

inherits(Stream, EE);
Stream.Readable = __webpack_require__(62);
Stream.Writable = __webpack_require__(302);
Stream.Duplex = __webpack_require__(303);
Stream.Transform = __webpack_require__(304);
Stream.PassThrough = __webpack_require__(305); // Backwards-compat with node 0.4.x

Stream.Stream = Stream; // old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function (dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.

  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;

  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;
    dest.end();
  }

  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;
    if (typeof dest.destroy === 'function') dest.destroy();
  } // don't leave dangling pipes when there are errors.


  function onerror(er) {
    cleanup();

    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror); // remove all the event listeners that were added.

  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);
    source.removeListener('end', onend);
    source.removeListener('close', onclose);
    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);
    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);
    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);
  dest.on('close', cleanup);
  dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

  return dest;
};

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

/*<replacement>*/

var pna = __webpack_require__(41);
/*</replacement>*/


module.exports = Readable;
/*<replacement>*/

var isArray = __webpack_require__(79);
/*</replacement>*/

/*<replacement>*/


var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__(16).EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(111);
/*</replacement>*/

/*<replacement>*/


var Buffer = __webpack_require__(63).Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/


var util = __webpack_require__(26);

util.inherits = __webpack_require__(7);
/*</replacement>*/

/*<replacement>*/

var debugUtil = __webpack_require__(298);

var debug = void 0;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(299);

var destroyImpl = __webpack_require__(112);

var StringDecoder;
util.inherits(Readable, Stream);
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(18);
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  var isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

  this.highWaterMark = Math.floor(this.highWaterMark); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(40).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(18);
  if (!(this instanceof Readable)) return new Readable(options);
  this._readableState = new ReadableState(options, this); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }

  return er;
} // if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.


function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(40).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
}; // Don't raise the hwm > 8MB


var MAX_HWM = 0x800000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true; // emit 'readable' now to make sure it gets picked up.

  emitReadable(stream);
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;

  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;else len = state.length;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  } // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.


  var increasedAwaitDrain = false;
  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);

    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;

    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;

      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }

  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {}
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }
  return ret;
} // Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function fromListPartial(n, list, hasStrings) {
  var ret;

  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }

  return ret;
} // Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;

  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;

    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }

      break;
    }

    ++c;
  }

  list.length -= c;
  return ret;
} // Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;

  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;

    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }

      break;
    }

    ++c;
  }

  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.

  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4), __webpack_require__(3)))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(16).EventEmitter;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*<replacement>*/

var pna = __webpack_require__(41);
/*</replacement>*/
// undocumented cb() API, needed for core, not for public API


function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);

      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var Duplex = __webpack_require__(18);
/*<replacement>*/


var util = __webpack_require__(26);

util.inherits = __webpack_require__(7);
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);

    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');
  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');
  return stream.push(null);
}

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Boom = __webpack_require__(115);

var internals = {};
/*
    RFC 7231 Section 3.1.1.1

    media-type = type "/" subtype *( OWS ";" OWS parameter )
    type       = token
    subtype    = token
    parameter  = token "=" ( token / quoted-string )
*/
//                             1: type/subtype    2: params

internals.contentTypeRegex = /^([^\/\s]+\/[^\s;]+)(.*)?$/; //                                        1: "b"   2: b

internals.paramsRegex = /;\s*boundary=(?:"([^"]+)"|([^;"\s]+))/i;

exports.type = function (header) {
  if (!header) {
    throw Boom.badRequest('Invalid content-type header');
  }

  var match = header.match(internals.contentTypeRegex);

  if (!match) {
    throw Boom.badRequest('Invalid content-type header');
  }

  var result = {
    mime: match[1].toLowerCase()
  };

  if (result.mime.indexOf('multipart/') === 0) {
    var params = match[2];

    if (params) {
      var param = params.match(internals.paramsRegex);

      if (param) {
        result.boundary = param[1] || param[2];
      }
    }

    if (!result.boundary) {
      throw Boom.badRequest('Invalid content-type header: multipart missing boundary');
    }
  }

  return result;
};
/*
    RFC 6266 Section 4.1 (http://tools.ietf.org/html/rfc6266#section-4.1)

    content-disposition = "Content-Disposition" ":" disposition-type *( ";" disposition-parm )
    disposition-type    = "inline" | "attachment" | token                                           ; case-insensitive
    disposition-parm    = filename-parm | token [ "*" ] "=" ( token | quoted-string | ext-value)    ; ext-value defined in [RFC5987], Section 3.2

    Content-Disposition header field values with multiple instances of the same parameter name are invalid.

    Note that due to the rules for implied linear whitespace (Section 2.1 of [RFC2616]), OPTIONAL whitespace
    can appear between words (token or quoted-string) and separator characters.

    Furthermore, note that the format used for ext-value allows specifying a natural language (e.g., "en"); this is of limited use
    for filenames and is likely to be ignored by recipients.
*/


internals.contentDispositionRegex = /^\s*form-data\s*(?:;\s*(.+))?$/i; //                                        1: name     2: *            3: ext-value                      4: quoted  5: token

internals.contentDispositionParamRegex = /([^\=\*\s]+)(\*)?\s*\=\s*(?:([^;'"\s]+\'[\w-]*\'[^;\s]+)|(?:\"([^"]*)\")|([^;\s]*))(?:\s*(?:;\s*)|$)/g;

exports.disposition = function (header) {
  if (!header) {
    throw Boom.badRequest('Missing content-disposition header');
  }

  var match = header.match(internals.contentDispositionRegex);

  if (!match) {
    throw Boom.badRequest('Invalid content-disposition header format');
  }

  var parameters = match[1];

  if (!parameters) {
    throw Boom.badRequest('Invalid content-disposition header missing parameters');
  }

  var result = {};
  parameters.replace(internals.contentDispositionParamRegex, function ($0, $1, $2, $3, $4, $5) {
    if ($2) {
      if (!$3) {
        throw Boom.badRequest('Invalid content-disposition header format includes invalid parameters');
      }

      try {
        result[$1] = decodeURIComponent($3.split('\'')[2]);
      } catch (err) {
        throw Boom.badRequest('Invalid content-disposition header format includes invalid parameters');
      }
    } else {
      result[$1] = $4 || $5 || '';
    }
  });

  if (!result.name) {
    throw Boom.badRequest('Invalid content-disposition header missing name parameter');
  }

  return result;
};

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Hoek = __webpack_require__(313);

var internals = {
  codes: new Map([[100, 'Continue'], [101, 'Switching Protocols'], [102, 'Processing'], [200, 'OK'], [201, 'Created'], [202, 'Accepted'], [203, 'Non-Authoritative Information'], [204, 'No Content'], [205, 'Reset Content'], [206, 'Partial Content'], [207, 'Multi-Status'], [300, 'Multiple Choices'], [301, 'Moved Permanently'], [302, 'Moved Temporarily'], [303, 'See Other'], [304, 'Not Modified'], [305, 'Use Proxy'], [307, 'Temporary Redirect'], [400, 'Bad Request'], [401, 'Unauthorized'], [402, 'Payment Required'], [403, 'Forbidden'], [404, 'Not Found'], [405, 'Method Not Allowed'], [406, 'Not Acceptable'], [407, 'Proxy Authentication Required'], [408, 'Request Time-out'], [409, 'Conflict'], [410, 'Gone'], [411, 'Length Required'], [412, 'Precondition Failed'], [413, 'Request Entity Too Large'], [414, 'Request-URI Too Large'], [415, 'Unsupported Media Type'], [416, 'Requested Range Not Satisfiable'], [417, 'Expectation Failed'], [418, 'I\'m a teapot'], [422, 'Unprocessable Entity'], [423, 'Locked'], [424, 'Failed Dependency'], [425, 'Unordered Collection'], [426, 'Upgrade Required'], [428, 'Precondition Required'], [429, 'Too Many Requests'], [431, 'Request Header Fields Too Large'], [451, 'Unavailable For Legal Reasons'], [500, 'Internal Server Error'], [501, 'Not Implemented'], [502, 'Bad Gateway'], [503, 'Service Unavailable'], [504, 'Gateway Time-out'], [505, 'HTTP Version Not Supported'], [506, 'Variant Also Negotiates'], [507, 'Insufficient Storage'], [509, 'Bandwidth Limit Exceeded'], [510, 'Not Extended'], [511, 'Network Authentication Required']])
};

module.exports = internals.Boom =
/*#__PURE__*/
function (_Error) {
  _inherits(_class, _Error);

  _createClass(_class, null, [{
    key: Symbol.hasInstance,
    value: function value(instance) {
      return internals.Boom.isBoom(instance);
    }
  }]);

  function _class(message) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, _class);

    if (message instanceof Error) {
      return _possibleConstructorReturn(_this, internals.Boom.boomify(Hoek.clone(message), options));
    }

    var _options$statusCode = options.statusCode,
        statusCode = _options$statusCode === void 0 ? 500 : _options$statusCode,
        _options$data = options.data,
        data = _options$data === void 0 ? null : _options$data,
        _options$ctor = options.ctor,
        ctor = _options$ctor === void 0 ? internals.Boom : _options$ctor;
    var error = new Error(message ? message : undefined); // Avoids settings null message

    Error.captureStackTrace(error, ctor); // Filter the stack to our external API

    error.data = data;
    internals.initialize(error, statusCode);
    error["typeof"] = ctor;

    if (options.decorate) {
      Object.assign(error, options.decorate);
    }

    return _possibleConstructorReturn(_this, error);
  }

  _createClass(_class, null, [{
    key: "isBoom",
    value: function isBoom(err) {
      return err instanceof Error && !!err.isBoom;
    }
  }, {
    key: "boomify",
    value: function boomify(err, options) {
      Hoek.assert(err instanceof Error, 'Cannot wrap non-Error object');
      options = options || {};

      if (options.data !== undefined) {
        err.data = options.data;
      }

      if (options.decorate) {
        Object.assign(err, options.decorate);
      }

      if (!err.isBoom) {
        return internals.initialize(err, options.statusCode || 500, options.message);
      }

      if (options.override === false || // Defaults to true
      !options.statusCode && !options.message) {
        return err;
      }

      return internals.initialize(err, options.statusCode || err.output.statusCode, options.message);
    } // 4xx Client Errors

  }, {
    key: "badRequest",
    value: function badRequest(message, data) {
      return new internals.Boom(message, {
        statusCode: 400,
        data: data,
        ctor: internals.Boom.badRequest
      });
    }
  }, {
    key: "unauthorized",
    value: function unauthorized(message, scheme, attributes) {
      // Or function (message, wwwAuthenticate[])
      var err = new internals.Boom(message, {
        statusCode: 401,
        ctor: internals.Boom.unauthorized
      });

      if (!scheme) {
        return err;
      }

      var wwwAuthenticate = '';

      if (typeof scheme === 'string') {
        // function (message, scheme, attributes)
        wwwAuthenticate = scheme;

        if (attributes || message) {
          err.output.payload.attributes = {};
        }

        if (attributes) {
          if (typeof attributes === 'string') {
            wwwAuthenticate = wwwAuthenticate + ' ' + Hoek.escapeHeaderAttribute(attributes);
            err.output.payload.attributes = attributes;
          } else {
            var names = Object.keys(attributes);

            for (var i = 0; i < names.length; ++i) {
              var name = names[i];

              if (i) {
                wwwAuthenticate = wwwAuthenticate + ',';
              }

              var value = attributes[name];

              if (value === null || value === undefined) {
                // Value can be zero
                value = '';
              }

              wwwAuthenticate = wwwAuthenticate + ' ' + name + '="' + Hoek.escapeHeaderAttribute(value.toString()) + '"';
              err.output.payload.attributes[name] = value;
            }
          }
        }

        if (message) {
          if (attributes) {
            wwwAuthenticate = wwwAuthenticate + ',';
          }

          wwwAuthenticate = wwwAuthenticate + ' error="' + Hoek.escapeHeaderAttribute(message) + '"';
          err.output.payload.attributes.error = message;
        } else {
          err.isMissing = true;
        }
      } else {
        // function (message, wwwAuthenticate[])
        var wwwArray = scheme;

        for (var _i = 0; _i < wwwArray.length; ++_i) {
          if (_i) {
            wwwAuthenticate = wwwAuthenticate + ', ';
          }

          wwwAuthenticate = wwwAuthenticate + wwwArray[_i];
        }
      }

      err.output.headers['WWW-Authenticate'] = wwwAuthenticate;
      return err;
    }
  }, {
    key: "paymentRequired",
    value: function paymentRequired(message, data) {
      return new internals.Boom(message, {
        statusCode: 402,
        data: data,
        ctor: internals.Boom.paymentRequired
      });
    }
  }, {
    key: "forbidden",
    value: function forbidden(message, data) {
      return new internals.Boom(message, {
        statusCode: 403,
        data: data,
        ctor: internals.Boom.forbidden
      });
    }
  }, {
    key: "notFound",
    value: function notFound(message, data) {
      return new internals.Boom(message, {
        statusCode: 404,
        data: data,
        ctor: internals.Boom.notFound
      });
    }
  }, {
    key: "methodNotAllowed",
    value: function methodNotAllowed(message, data, allow) {
      var err = new internals.Boom(message, {
        statusCode: 405,
        data: data,
        ctor: internals.Boom.methodNotAllowed
      });

      if (typeof allow === 'string') {
        allow = [allow];
      }

      if (Array.isArray(allow)) {
        err.output.headers.Allow = allow.join(', ');
      }

      return err;
    }
  }, {
    key: "notAcceptable",
    value: function notAcceptable(message, data) {
      return new internals.Boom(message, {
        statusCode: 406,
        data: data,
        ctor: internals.Boom.notAcceptable
      });
    }
  }, {
    key: "proxyAuthRequired",
    value: function proxyAuthRequired(message, data) {
      return new internals.Boom(message, {
        statusCode: 407,
        data: data,
        ctor: internals.Boom.proxyAuthRequired
      });
    }
  }, {
    key: "clientTimeout",
    value: function clientTimeout(message, data) {
      return new internals.Boom(message, {
        statusCode: 408,
        data: data,
        ctor: internals.Boom.clientTimeout
      });
    }
  }, {
    key: "conflict",
    value: function conflict(message, data) {
      return new internals.Boom(message, {
        statusCode: 409,
        data: data,
        ctor: internals.Boom.conflict
      });
    }
  }, {
    key: "resourceGone",
    value: function resourceGone(message, data) {
      return new internals.Boom(message, {
        statusCode: 410,
        data: data,
        ctor: internals.Boom.resourceGone
      });
    }
  }, {
    key: "lengthRequired",
    value: function lengthRequired(message, data) {
      return new internals.Boom(message, {
        statusCode: 411,
        data: data,
        ctor: internals.Boom.lengthRequired
      });
    }
  }, {
    key: "preconditionFailed",
    value: function preconditionFailed(message, data) {
      return new internals.Boom(message, {
        statusCode: 412,
        data: data,
        ctor: internals.Boom.preconditionFailed
      });
    }
  }, {
    key: "entityTooLarge",
    value: function entityTooLarge(message, data) {
      return new internals.Boom(message, {
        statusCode: 413,
        data: data,
        ctor: internals.Boom.entityTooLarge
      });
    }
  }, {
    key: "uriTooLong",
    value: function uriTooLong(message, data) {
      return new internals.Boom(message, {
        statusCode: 414,
        data: data,
        ctor: internals.Boom.uriTooLong
      });
    }
  }, {
    key: "unsupportedMediaType",
    value: function unsupportedMediaType(message, data) {
      return new internals.Boom(message, {
        statusCode: 415,
        data: data,
        ctor: internals.Boom.unsupportedMediaType
      });
    }
  }, {
    key: "rangeNotSatisfiable",
    value: function rangeNotSatisfiable(message, data) {
      return new internals.Boom(message, {
        statusCode: 416,
        data: data,
        ctor: internals.Boom.rangeNotSatisfiable
      });
    }
  }, {
    key: "expectationFailed",
    value: function expectationFailed(message, data) {
      return new internals.Boom(message, {
        statusCode: 417,
        data: data,
        ctor: internals.Boom.expectationFailed
      });
    }
  }, {
    key: "teapot",
    value: function teapot(message, data) {
      return new internals.Boom(message, {
        statusCode: 418,
        data: data,
        ctor: internals.Boom.teapot
      });
    }
  }, {
    key: "badData",
    value: function badData(message, data) {
      return new internals.Boom(message, {
        statusCode: 422,
        data: data,
        ctor: internals.Boom.badData
      });
    }
  }, {
    key: "locked",
    value: function locked(message, data) {
      return new internals.Boom(message, {
        statusCode: 423,
        data: data,
        ctor: internals.Boom.locked
      });
    }
  }, {
    key: "failedDependency",
    value: function failedDependency(message, data) {
      return new internals.Boom(message, {
        statusCode: 424,
        data: data,
        ctor: internals.Boom.failedDependency
      });
    }
  }, {
    key: "preconditionRequired",
    value: function preconditionRequired(message, data) {
      return new internals.Boom(message, {
        statusCode: 428,
        data: data,
        ctor: internals.Boom.preconditionRequired
      });
    }
  }, {
    key: "tooManyRequests",
    value: function tooManyRequests(message, data) {
      return new internals.Boom(message, {
        statusCode: 429,
        data: data,
        ctor: internals.Boom.tooManyRequests
      });
    }
  }, {
    key: "illegal",
    value: function illegal(message, data) {
      return new internals.Boom(message, {
        statusCode: 451,
        data: data,
        ctor: internals.Boom.illegal
      });
    } // 5xx Server Errors

  }, {
    key: "internal",
    value: function internal(message, data) {
      var statusCode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500;
      return internals.serverError(message, data, statusCode, internals.Boom.internal);
    }
  }, {
    key: "notImplemented",
    value: function notImplemented(message, data) {
      return internals.serverError(message, data, 501, internals.Boom.notImplemented);
    }
  }, {
    key: "badGateway",
    value: function badGateway(message, data) {
      return internals.serverError(message, data, 502, internals.Boom.badGateway);
    }
  }, {
    key: "serverUnavailable",
    value: function serverUnavailable(message, data) {
      return internals.serverError(message, data, 503, internals.Boom.serverUnavailable);
    }
  }, {
    key: "gatewayTimeout",
    value: function gatewayTimeout(message, data) {
      return internals.serverError(message, data, 504, internals.Boom.gatewayTimeout);
    }
  }, {
    key: "badImplementation",
    value: function badImplementation(message, data) {
      var err = internals.serverError(message, data, 500, internals.Boom.badImplementation);
      err.isDeveloperError = true;
      return err;
    }
  }]);

  return _class;
}(_wrapNativeSuper(Error));

internals.initialize = function (err, statusCode, message) {
  var numberCode = parseInt(statusCode, 10);
  Hoek.assert(!isNaN(numberCode) && numberCode >= 400, 'First argument must be a number (400+):', statusCode);
  err.isBoom = true;
  err.isServer = numberCode >= 500;

  if (!err.hasOwnProperty('data')) {
    err.data = null;
  }

  err.output = {
    statusCode: numberCode,
    payload: {},
    headers: {}
  };
  err.reformat = internals.reformat;

  if (!message && !err.message) {
    err.reformat();
    message = err.output.payload.error;
  }

  if (message) {
    err.message = message + (err.message ? ': ' + err.message : '');
    err.output.payload.message = err.message;
  }

  err.reformat();
  return err;
};

internals.reformat = function () {
  var debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  this.output.payload.statusCode = this.output.statusCode;
  this.output.payload.error = internals.codes.get(this.output.statusCode) || 'Unknown';

  if (this.output.statusCode === 500 && debug !== true) {
    this.output.payload.message = 'An internal server error occurred'; // Hide actual error from user
  } else if (this.message) {
    this.output.payload.message = this.message;
  }
};

internals.serverError = function (message, data, statusCode, ctor) {
  if (data instanceof Error && !data.isBoom) {
    return internals.Boom.boomify(data, {
      statusCode: statusCode,
      message: message
    });
  }

  return new internals.Boom(message, {
    statusCode: statusCode,
    data: data,
    ctor: ctor
  });
};

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Stringify = __webpack_require__(117);

var internals = {};

module.exports =
/*#__PURE__*/
function (_Error) {
  _inherits(_class, _Error);

  function _class(args) {
    var _this;

    _classCallCheck(this, _class);

    var msgs = args.filter(function (arg) {
      return arg !== '';
    }).map(function (arg) {
      return typeof arg === 'string' ? arg : arg instanceof Error ? arg.message : Stringify(arg);
    });
    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, msgs.join(' ') || 'Unknown error'));
    Error.captureStackTrace(_assertThisInitialized(_this), exports.assert);
    return _this;
  }

  return _class;
}(_wrapNativeSuper(Error));

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var internals = {};

module.exports = function () {
  try {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return JSON.stringify.apply(null, args);
  } catch (err) {
    return '[Cannot display object: ' + err.message + ']';
  }
};

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var internals = {};
exports = module.exports = {
  array: Array.prototype,
  buffer: Buffer && Buffer.prototype,
  // $lab:coverage:ignore$
  date: Date.prototype,
  error: Error.prototype,
  generic: Object.prototype,
  map: Map.prototype,
  promise: Promise.prototype,
  regex: RegExp.prototype,
  set: Set.prototype,
  weakMap: WeakMap.prototype,
  weakSet: WeakSet.prototype
};
internals.typeMap = new Map([['[object Error]', exports.error], ['[object Map]', exports.map], ['[object Promise]', exports.promise], ['[object Set]', exports.set], ['[object WeakMap]', exports.weakMap], ['[object WeakSet]', exports.weakSet]]);

exports.getInternalProto = function (obj) {
  if (Array.isArray(obj)) {
    return exports.array;
  }

  if (Buffer && obj instanceof Buffer) {
    // $lab:coverage:ignore$
    return exports.buffer;
  }

  if (obj instanceof Date) {
    return exports.date;
  }

  if (obj instanceof RegExp) {
    return exports.regex;
  }

  var objName = Object.prototype.toString.call(obj);
  return internals.typeMap.get(objName) || exports.generic;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Assert = __webpack_require__(23);

var Clone = __webpack_require__(65);

var Utils = __webpack_require__(42);

var internals = {};

module.exports = internals.merge = function (target, source, options) {
  Assert(target && _typeof(target) === 'object', 'Invalid target value: must be an object');
  Assert(source === null || source === undefined || _typeof(source) === 'object', 'Invalid source value: must be null, undefined, or an object');

  if (!source) {
    return target;
  }

  options = Object.assign({
    nullOverride: true,
    mergeArrays: true
  }, options);

  if (Array.isArray(source)) {
    Assert(Array.isArray(target), 'Cannot merge array onto an object');

    if (!options.mergeArrays) {
      target.length = 0; // Must not change target assignment
    }

    for (var i = 0; i < source.length; ++i) {
      target.push(Clone(source[i], {
        symbols: options.symbols
      }));
    }

    return target;
  }

  var keys = Utils.keys(source, options);

  for (var _i = 0; _i < keys.length; ++_i) {
    var key = keys[_i];

    if (key === '__proto__' || !Object.prototype.propertyIsEnumerable.call(source, key)) {
      continue;
    }

    var value = source[key];

    if (value && _typeof(value) === 'object') {
      if (!target[key] || _typeof(target[key]) !== 'object' || Array.isArray(target[key]) !== Array.isArray(value) || value instanceof Date || Buffer && Buffer.isBuffer(value) || // $lab:coverage:ignore$
      value instanceof RegExp) {
        target[key] = Clone(value, {
          symbols: options.symbols
        });
      } else {
        internals.merge(target[key], value, options);
      }
    } else {
      if (value !== null && value !== undefined) {
        // Explicit to preserve empty strings
        target[key] = value;
      } else if (options.nullOverride) {
        target[key] = value;
      }
    }
  }

  return target;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var internals = {};

module.exports = function () {};

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Types = __webpack_require__(118);

var internals = {
  mismatched: null
};

module.exports = function (obj, ref, options) {
  options = Object.assign({
    prototype: true
  }, options);
  return !!internals.isDeepEqual(obj, ref, options, []);
};

internals.isDeepEqual = function (obj, ref, options, seen) {
  if (obj === ref) {
    // Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql
    return obj !== 0 || 1 / obj === 1 / ref;
  }

  var type = _typeof(obj);

  if (type !== _typeof(ref)) {
    return false;
  }

  if (obj === null || ref === null) {
    return false;
  }

  if (type === 'function') {
    if (!options.deepFunction || obj.toString() !== ref.toString()) {
      return false;
    } // Continue as object

  } else if (type !== 'object') {
    return obj !== obj && ref !== ref; // NaN
  }

  var instanceType = internals.getSharedType(obj, ref, !!options.prototype);

  switch (instanceType) {
    case Types.buffer:
      return Buffer && Buffer.prototype.equals.call(obj, ref);
    // $lab:coverage:ignore$

    case Types.promise:
      return obj === ref;

    case Types.regex:
      return obj.toString() === ref.toString();

    case internals.mismatched:
      return false;
  }

  for (var i = seen.length - 1; i >= 0; --i) {
    if (seen[i].isSame(obj, ref)) {
      return true; // If previous comparison failed, it would have stopped execution
    }
  }

  seen.push(new internals.SeenEntry(obj, ref));

  try {
    return !!internals.isDeepEqualObj(instanceType, obj, ref, options, seen);
  } finally {
    seen.pop();
  }
};

internals.getSharedType = function (obj, ref, checkPrototype) {
  if (checkPrototype) {
    if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {
      return internals.mismatched;
    }

    return Types.getInternalProto(obj);
  }

  var type = Types.getInternalProto(obj);

  if (type !== Types.getInternalProto(ref)) {
    return internals.mismatched;
  }

  return type;
};

internals.valueOf = function (obj) {
  var objValueOf = obj.valueOf;

  if (objValueOf === undefined) {
    return obj;
  }

  try {
    return objValueOf.call(obj);
  } catch (err) {
    return err;
  }
};

internals.hasOwnEnumerableProperty = function (obj, key) {
  return Object.prototype.propertyIsEnumerable.call(obj, key);
};

internals.isSetSimpleEqual = function (obj, ref) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var entry = _step.value;

      if (!ref.has(entry)) {
        return false;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return true;
};

internals.isDeepEqualObj = function (instanceType, obj, ref, options, seen) {
  var isDeepEqual = internals.isDeepEqual,
      valueOf = internals.valueOf,
      hasOwnEnumerableProperty = internals.hasOwnEnumerableProperty;
  var keys = Object.keys,
      getOwnPropertySymbols = Object.getOwnPropertySymbols;

  if (instanceType === Types.array) {
    if (options.part) {
      // Check if any index match any other index
      for (var i = 0; i < obj.length; ++i) {
        var objValue = obj[i];

        for (var j = 0; j < ref.length; ++j) {
          if (isDeepEqual(objValue, ref[j], options, seen)) {
            return true;
          }
        }
      }
    } else {
      if (obj.length !== ref.length) {
        return false;
      }

      for (var _i = 0; _i < obj.length; ++_i) {
        if (!isDeepEqual(obj[_i], ref[_i], options, seen)) {
          return false;
        }
      }

      return true;
    }
  } else if (instanceType === Types.set) {
    if (obj.size !== ref.size) {
      return false;
    }

    if (!internals.isSetSimpleEqual(obj, ref)) {
      // Check for deep equality
      var ref2 = new Set(ref);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = obj[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var objEntry = _step2.value;

          if (ref2["delete"](objEntry)) {
            continue;
          }

          var found = false;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = ref2[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var refEntry = _step3.value;

              if (isDeepEqual(objEntry, refEntry, options, seen)) {
                ref2["delete"](refEntry);
                found = true;
                break;
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          if (!found) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  } else if (instanceType === Types.map) {
    if (obj.size !== ref.size) {
      return false;
    }

    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = obj[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var _step4$value = _slicedToArray(_step4.value, 2),
            key = _step4$value[0],
            value = _step4$value[1];

        if (value === undefined && !ref.has(key)) {
          return false;
        }

        if (!isDeepEqual(value, ref.get(key), options, seen)) {
          return false;
        }
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
          _iterator4["return"]();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }
  } else if (instanceType === Types.error) {
    // Always check name and message
    if (obj.name !== ref.name || obj.message !== ref.message) {
      return false;
    }
  } // Check .valueOf()


  var valueOfObj = valueOf(obj);
  var valueOfRef = valueOf(ref);

  if (!(obj === valueOfObj && ref === valueOfRef) && !isDeepEqual(valueOfObj, valueOfRef, options, seen)) {
    return false;
  } // Check properties


  var objKeys = keys(obj);

  if (!options.part && objKeys.length !== keys(ref).length && !options.skip) {
    return false;
  }

  for (var _i2 = 0; _i2 < objKeys.length; ++_i2) {
    var key = objKeys[_i2];

    if (options.skip && options.skip.includes(key)) {
      continue;
    }

    if (!hasOwnEnumerableProperty(ref, key)) {
      return false;
    }

    if (!isDeepEqual(obj[key], ref[key], options, seen)) {
      return false;
    }
  } // Check symbols


  if (options.symbols !== false) {
    // Defaults to true
    var objSymbols = getOwnPropertySymbols(obj);
    var refSymbols = new Set(getOwnPropertySymbols(ref));

    for (var _i3 = 0; _i3 < objSymbols.length; ++_i3) {
      var _key = objSymbols[_i3];

      if (!options.skip || !options.skip.includes(_key)) {
        if (hasOwnEnumerableProperty(obj, _key)) {
          if (!hasOwnEnumerableProperty(ref, _key)) {
            return false;
          }

          if (!isDeepEqual(obj[_key], ref[_key], options, seen)) {
            return false;
          }
        } else if (hasOwnEnumerableProperty(ref, _key)) {
          return false;
        }
      }

      refSymbols["delete"](_key);
    }

    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = refSymbols[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var _key2 = _step5.value;

        if (hasOwnEnumerableProperty(ref, _key2)) {
          return false;
        }
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
          _iterator5["return"]();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }
  }

  return true;
};

internals.SeenEntry =
/*#__PURE__*/
function () {
  function _class(obj, ref) {
    _classCallCheck(this, _class);

    this.obj = obj;
    this.ref = ref;
  }

  _createClass(_class, [{
    key: "isSame",
    value: function isSame(obj, ref) {
      return this.obj === obj && this.ref === ref;
    }
  }]);

  return _class;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var internals = {};

module.exports = function (string) {
  // Escape ^$.*+-?=!:|\/()[]{},
  return string.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, '\\$&');
};

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var keys = __webpack_require__(332);

var hasSymbols = typeof Symbol === 'function' && _typeof(Symbol('foo')) === 'symbol';
var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function isFunction(fn) {
  return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function arePropertyDescriptorsSupported() {
  var obj = {};

  try {
    origDefineProperty(obj, 'x', {
      enumerable: false,
      value: obj
    }); // eslint-disable-next-line no-unused-vars, no-restricted-syntax

    for (var _ in obj) {
      // jscs:ignore disallowUnusedVariables
      return false;
    }

    return obj.x === obj;
  } catch (e) {
    /* this is IE 8. */
    return false;
  }
};

var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function defineProperty(object, name, value, predicate) {
  if (name in object && (!isFunction(predicate) || !predicate())) {
    return;
  }

  if (supportsDescriptors) {
    origDefineProperty(object, name, {
      configurable: true,
      enumerable: false,
      value: value,
      writable: true
    });
  } else {
    object[name] = value;
  }
};

var defineProperties = function defineProperties(object, map) {
  var predicates = arguments.length > 2 ? arguments[2] : {};
  var props = keys(map);

  if (hasSymbols) {
    props = concat.call(props, Object.getOwnPropertySymbols(map));
  }

  for (var i = 0; i < props.length; i += 1) {
    defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
  }
};

defineProperties.supportsDescriptors = !!supportsDescriptors;
module.exports = defineProperties;

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
  var str = toStr.call(value);
  var isArgs = str === '[object Arguments]';

  if (!isArgs) {
    isArgs = str !== '[object Array]' && value !== null && _typeof(value) === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr.call(value.callee) === '[object Function]';
  }

  return isArgs;
};

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(43);

var ES = __webpack_require__(334);

var replace = bind.call(Function.call, String.prototype.replace);
/* eslint-disable no-control-regex */

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;
/* eslint-enable no-control-regex */

module.exports = function trim() {
  var S = ES.ToString(ES.CheckObjectCoercible(this));
  return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var implementation = __webpack_require__(125);

var zeroWidthSpace = "\u200B";

module.exports = function getPolyfill() {
  if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
    return String.prototype.trim;
  }

  return implementation;
};

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(128);


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var cli = __webpack_require__(129);

var core = __webpack_require__(131);

var http = __webpack_require__(294);

var _require = __webpack_require__(8),
    FILE_TYPES = _require.FILE_TYPES,
    MFS_ROOT_KEY = _require.MFS_ROOT_KEY;

module.exports = {
  cli: cli,
  core: core,
  http: http,
  FILE_TYPES: FILE_TYPES,
  MFS_ROOT_KEY: MFS_ROOT_KEY
};

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _require = __webpack_require__(130),
    print = _require.print;

var command = {
  command: 'files <command>',
  description: 'Operations over mfs files (ls, mkdir, rm, etc)',
  builder: function builder(yargs) {
    return yargs.commandDir('.');
  },
  handler: function handler(argv) {
    print('Type `jsipfs files --help` for more instructions');
  }
};

module.exports = function (yargs) {
  return yargs.command(command);
};

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var visible = true;

var disablePrinting = function disablePrinting() {
  visible = false;
};

var print = function print() {
  var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var newline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (!visible) {
    return;
  }

  if (msg instanceof Error && process.env.DEBUG) {
    msg = msg.stack;
  }

  msg = newline ? msg + '\n' : msg;
  process.stdout.write(msg);
};

var asBoolean = function asBoolean(value) {
  if (value === false || value === true) {
    return value;
  }

  if (value === undefined) {
    return true;
  }

  return false;
};

module.exports = {
  disablePrinting: disablePrinting,
  print: print,
  asBoolean: asBoolean
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(45);

var promisify = __webpack_require__(135);

var createLock = __webpack_require__(70); // These operations are read-locked at the function level and will execute simultaneously


var readOperations = {
  stat: __webpack_require__(28) // These operations are locked at the function level and will execute in series

};
var writeOperations = {
  cp: __webpack_require__(98),
  flush: __webpack_require__(256),
  mkdir: __webpack_require__(57),
  mv: __webpack_require__(257),
  rm: __webpack_require__(100) // These operations are asynchronous and manage their own locking

};
var unwrappedOperations = {
  write: __webpack_require__(259),
  read: __webpack_require__(292),
  ls: __webpack_require__(293)
};

var wrap = function wrap(_ref) {
  var options = _ref.options,
      mfs = _ref.mfs,
      operations = _ref.operations,
      lock = _ref.lock;
  Object.keys(operations).forEach(function (key) {
    mfs[key] = lock(operations[key](options));
  });
};

var defaultOptions = {
  repoOwner: true,
  ipld: null,
  repo: null
};

module.exports = function (options) {
  var _Object$assign = Object.assign({}, defaultOptions || {}, options),
      repoOwner = _Object$assign.repoOwner;

  assert(options.ipld, 'MFS requires an IPLD instance');
  assert(options.blocks, 'MFS requires an BlockStore instance');
  assert(options.datastore, 'MFS requires a DataStore instance'); // should be able to remove this when async/await PRs are in for datastore, blockstore & repo

  options.repo = {
    blocks: {
      get: promisify(options.blocks.get, {
        context: options.blocks
      })
    },
    datastore: {
      open: promisify(options.datastore.open, {
        context: options.datastore
      }),
      get: promisify(options.datastore.get, {
        context: options.datastore
      }),
      put: promisify(options.datastore.put, {
        context: options.datastore
      })
    }
  };
  var lock = createLock(repoOwner);

  var readLock = function readLock(operation) {
    return lock.readLock(operation);
  };

  var writeLock = function writeLock(operation) {
    return lock.writeLock(operation);
  };

  var mfs = {};
  wrap({
    options: options,
    mfs: mfs,
    operations: readOperations,
    lock: readLock
  });
  wrap({
    options: options,
    mfs: mfs,
    operations: writeOperations,
    lock: writeLock
  });
  Object.keys(unwrappedOperations).forEach(function (key) {
    mfs[key] = unwrappedOperations[key](options);
  });
  return mfs;
};

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function isBuffer(arg) {
  return arg && _typeof(arg) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
};

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;

    var TempCtor = function TempCtor() {};

    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/** PROMISIFY CALLBACK-STYLE FUNCTIONS TO ES6 PROMISES
*
* EXAMPLE:
* const fn = promisify( (callback) => callback(null, "Hello world!") );
* fn((err, str) => console.log(str));
* fn().then((str) => console.log(str));
* //Both functions, will log 'Hello world!'
*
* Note: The function you pass, may have any arguments you want, but the latest
* have to be the callback, which you will call with: next(err, value)
*
* @param method: Function/Array/Map = The function(s) to promisify
* @param options: Map =
*  "context" (default is function): The context which to apply the called function
*  "replace" (default is falsy): When passed an array/map, if to replace the original object
*
* @return: A promise if passed a function, otherwise the object with the promises
*
* @license: MIT
* @version: 1.0.3
* @author: Manuel Di Iorio
**/
var createCallback = function createCallback(method, context) {
  return function () {
    var args = Array.prototype.slice.call(arguments);
    var lastIndex = args.length - 1;
    var lastArg = args && args.length > 0 ? args[lastIndex] : null;
    var cb = typeof lastArg === 'function' ? lastArg : null;

    if (cb) {
      return method.apply(context, args);
    }

    return new Promise(function (resolve, reject) {
      args.push(function (err, val) {
        if (err) return reject(err);
        resolve(val);
      });
      method.apply(context, args);
    });
  };
};

if (false) {} // Browserify this module

module.exports = function (methods, options) {
  options = options || {};
  var type = Object.prototype.toString.call(methods);

  if (type === "[object Object]" || type === "[object Array]") {
    var obj = options.replace ? methods : {};

    for (var key in methods) {
      if (methods.hasOwnProperty(key)) obj[key] = createCallback(methods[key]);
    }

    return obj;
  }

  return createCallback(methods, options.context || methods);
}; // Browserify this module


if (false) {}

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;

      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
( false ? undefined : _typeof(module)) === "object" ? module.exports : {});

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(46)(module)))

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var node = __webpack_require__(138);

var browser = __webpack_require__(148);

var _require = __webpack_require__(153),
    Queue = _require["default"];

var _require2 = __webpack_require__(159),
    timeout = _require2.timeout;

var observe = __webpack_require__(73);

var mutexes = {};
var implementation;

function createReleaseable(queue, options) {
  var res;
  var p = new Promise(function (resolve) {
    res = resolve;
  });
  queue.add(function () {
    return timeout(function () {
      return new Promise(function (resolve) {
        res(function () {
          resolve();
        });
      });
    }(), options.timeout);
  });
  return p;
}

var createMutex = function createMutex(name, options) {
  if (implementation.isWorker) {
    return {
      readLock: implementation.readLock(name, options),
      writeLock: implementation.writeLock(name, options)
    };
  }

  var masterQueue = new Queue({
    concurrency: 1
  });
  var readQueue = null;
  return {
    readLock: function readLock() {
      // If there's already a read queue, just add the task to it
      if (readQueue) {
        return createReleaseable(readQueue, options);
      } // Create a new read queue


      readQueue = new Queue({
        concurrency: options.concurrency,
        autoStart: false
      });
      var localReadQueue = readQueue; // Add the task to the read queue

      var readPromise = createReleaseable(readQueue, options);
      masterQueue.add(function () {
        // Start the task only once the master queue has completed processing
        // any previous tasks
        localReadQueue.start(); // Once all the tasks in the read queue have completed, remove it so
        // that the next read lock will occur after any write locks that were
        // started in the interim

        return localReadQueue.onIdle().then(function () {
          if (readQueue === localReadQueue) {
            readQueue = null;
          }
        });
      });
      return readPromise;
    },
    writeLock: function writeLock() {
      // Remove the read queue reference, so that any later read locks will be
      // added to a new queue that starts after this write lock has been
      // released
      readQueue = null;
      return createReleaseable(masterQueue, options);
    }
  };
};

var defaultOptions = {
  concurrency: Infinity,
  timeout: 84600000,
  global: global,
  singleProcess: false
};

module.exports = function (name, options) {
  if (!options) {
    options = {};
  }

  if (_typeof(name) === 'object') {
    options = name;
    name = 'lock';
  }

  if (!name) {
    name = 'lock';
  }

  options = Object.assign({}, defaultOptions, options);

  if (!implementation) {
    implementation = node(options) || browser(options);

    if (!implementation.isWorker) {
      // we are master, set up worker requests
      implementation.on('requestReadLock', function (name, fn) {
        if (!mutexes[name]) {
          return;
        }

        mutexes[name].readLock().then(function (release) {
          return fn()["finally"](function () {
            return release();
          });
        });
      });
      implementation.on('requestWriteLock',
      /*#__PURE__*/
      function () {
        var _ref = _asyncToGenerator(
        /*#__PURE__*/
        _regenerator["default"].mark(function _callee(name, fn) {
          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (mutexes[name]) {
                    _context.next = 2;
                    break;
                  }

                  return _context.abrupt("return");

                case 2:
                  mutexes[name].writeLock().then(function (release) {
                    return fn()["finally"](function () {
                      return release();
                    });
                  });

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());
    }
  }

  if (!mutexes[name]) {
    mutexes[name] = createMutex(name, options);
  }

  return mutexes[name];
};

module.exports.Worker = function (script, Impl) {
  Impl = Impl || global.Worker;
  var worker;

  try {
    worker = new Impl(script);
  } catch (error) {
    if (error.message.includes('not a constructor')) {
      worker = Impl(script);
    }
  }

  if (!worker) {
    throw new Error('Could not create Worker from', Impl);
  }

  observe(worker);
  return worker;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4)))

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var EventEmitter = __webpack_require__(16).EventEmitter;

var shortid = __webpack_require__(71);

var _require = __webpack_require__(72),
    WORKER_REQUEST_READ_LOCK = _require.WORKER_REQUEST_READ_LOCK,
    WORKER_RELEASE_READ_LOCK = _require.WORKER_RELEASE_READ_LOCK,
    MASTER_GRANT_READ_LOCK = _require.MASTER_GRANT_READ_LOCK,
    WORKER_REQUEST_WRITE_LOCK = _require.WORKER_REQUEST_WRITE_LOCK,
    WORKER_RELEASE_WRITE_LOCK = _require.WORKER_RELEASE_WRITE_LOCK,
    MASTER_GRANT_WRITE_LOCK = _require.MASTER_GRANT_WRITE_LOCK;

var cluster;

var handleWorkerLockRequest = function handleWorkerLockRequest(emitter, masterEvent, requestType, releaseType, grantType) {
  return function (worker, requestEvent) {
    if (requestEvent && requestEvent.type === requestType) {
      emitter.emit(masterEvent, requestEvent.name, function () {
        // grant lock to worker
        worker.send({
          type: grantType,
          name: requestEvent.name,
          identifier: requestEvent.identifier
        }); // wait for worker to finish

        return new Promise(function (resolve) {
          var releaseEventListener = function releaseEventListener(releaseEvent) {
            if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {
              worker.removeListener('message', releaseEventListener);
              resolve();
            }
          };

          worker.on('message', releaseEventListener);
        });
      });
    }
  };
};

var makeWorkerLockRequest = function makeWorkerLockRequest(name, requestType, grantType, releaseType) {
  return function () {
    var id = shortid.generate();
    process.send({
      type: requestType,
      identifier: id,
      name: name
    });
    return new Promise(function (resolve) {
      var listener = function listener(event) {
        if (event && event.type === grantType && event.identifier === id) {
          process.removeListener('message', listener); // grant lock

          resolve(function () {
            // release lock
            process.send({
              type: releaseType,
              identifier: id,
              name: name
            });
          });
        }
      };

      process.on('message', listener);
    });
  };
};

module.exports = function (options) {
  try {
    cluster = __webpack_require__(147);

    if (!Object.keys(cluster).length) {
      return;
    }
  } catch (_) {
    return;
  }

  if (cluster.isMaster || options.singleProcess) {
    var emitter = new EventEmitter();
    cluster.on('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));
    cluster.on('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));
    return emitter;
  }

  return {
    isWorker: true,
    readLock: function readLock(name) {
      return makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK);
    },
    writeLock: function writeLock(name) {
      return makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK);
    }
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = __webpack_require__(27);

var build = __webpack_require__(141);

var isValid = __webpack_require__(145); // if you are using cluster or multiple servers use this to make each instance
// has a unique value for worker
// Note: I don't know if this is automatically set when using third
// party cluster solutions such as pm2.


var clusterWorkerId = __webpack_require__(146) || 0;
/**
 * Set the seed.
 * Highly recommended if you don't want people to try to figure out your id schema.
 * exposed as shortid.seed(int)
 * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
 */

function seed(seedValue) {
  alphabet.seed(seedValue);
  return module.exports;
}
/**
 * Set the cluster worker or machine id
 * exposed as shortid.worker(int)
 * @param workerId worker must be positive integer.  Number less than 16 is recommended.
 * returns shortid module so it can be chained.
 */


function worker(workerId) {
  clusterWorkerId = workerId;
  return module.exports;
}
/**
 *
 * sets new characters to use in the alphabet
 * returns the shuffled alphabet
 */


function characters(newCharacters) {
  if (newCharacters !== undefined) {
    alphabet.characters(newCharacters);
  }

  return alphabet.shuffled();
}
/**
 * Generate unique id
 * Returns string id
 */


function generate() {
  return build(clusterWorkerId);
} // Export all other functions as properties of the generate function


module.exports = generate;
module.exports.generate = generate;
module.exports.seed = seed;
module.exports.worker = worker;
module.exports.characters = characters;
module.exports.isValid = isValid;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Found this seed-based random generator somewhere
// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

var seed = 1;
/**
 * return a random number based on a seed
 * @param seed
 * @returns {number}
 */

function getNextValue() {
  seed = (seed * 9301 + 49297) % 233280;
  return seed / 233280.0;
}

function setSeed(_seed_) {
  seed = _seed_;
}

module.exports = {
  nextValue: getNextValue,
  seed: setSeed
};

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var generate = __webpack_require__(142);

var alphabet = __webpack_require__(27); // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
// This number should be updated every year or so to keep the generated id short.
// To regenerate `new Date() - 0` and bump the version. Always bump the version!


var REDUCE_TIME = 1567752802062; // don't change unless we change the algos or REDUCE_TIME
// must be an integer and less than 16

var version = 7; // Counter is used when shortid is called multiple times in one second.

var counter; // Remember the last time shortid was called in case counter is needed.

var previousSeconds;
/**
 * Generate unique id
 * Returns string id
 */

function build(clusterWorkerId) {
  var str = '';
  var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);

  if (seconds === previousSeconds) {
    counter++;
  } else {
    counter = 0;
    previousSeconds = seconds;
  }

  str = str + generate(version);
  str = str + generate(clusterWorkerId);

  if (counter > 0) {
    str = str + generate(counter);
  }

  str = str + generate(seconds);
  return str;
}

module.exports = build;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = __webpack_require__(27);

var random = __webpack_require__(143);

var format = __webpack_require__(144);

function generate(number) {
  var loopCounter = 0;
  var done;
  var str = '';

  while (!done) {
    str = str + format(random, alphabet.get(), 1);
    done = number < Math.pow(16, loopCounter + 1);
    loopCounter++;
  }

  return str;
}

module.exports = generate;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var crypto = (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto

var randomByte;

if (!crypto || !crypto.getRandomValues) {
  randomByte = function randomByte(size) {
    var bytes = [];

    for (var i = 0; i < size; i++) {
      bytes.push(Math.floor(Math.random() * 256));
    }

    return bytes;
  };
} else {
  randomByte = function randomByte(size) {
    return crypto.getRandomValues(new Uint8Array(size));
  };
}

module.exports = randomByte;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Secure random string generator with custom alphabet.
 *
 * Alphabet must contain 256 symbols or less. Otherwise, the generator
 * will not be secure.
 *
 * @param {generator} random The random bytes generator.
 * @param {string} alphabet Symbols to be used in new random string.
 * @param {size} size The number of symbols in new random string.
 *
 * @return {string} Random string.
 *
 * @example
 * const format = require('nanoid/format')
 *
 * function random (size) {
 *   const result = []
 *   for (let i = 0; i < size; i++) {
 *     result.push(randomByte())
 *   }
 *   return result
 * }
 *
 * format(random, "abcdef", 5) //=> "fbaef"
 *
 * @name format
 * @function
 */
module.exports = function (random, alphabet, size) {
  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
  var step = Math.ceil(1.6 * mask * size / alphabet.length);
  size = +size;
  var id = '';

  while (true) {
    var bytes = random(step);

    for (var i = 0; i < step; i++) {
      var _byte = bytes[i] & mask;

      if (alphabet[_byte]) {
        id += alphabet[_byte];
        if (id.length === size) return id;
      }
    }
  }
};
/**
 * @callback generator
 * @param {number} bytes The number of bytes to generate.
 * @return {number[]} Random bytes.
 */

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = __webpack_require__(27);

function isShortId(id) {
  if (!id || typeof id !== 'string' || id.length < 6) {
    return false;
  }

  var nonAlphabetic = new RegExp('[^' + alphabet.get().replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&') + ']');
  return !nonAlphabetic.test(id);
}

module.exports = isShortId;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = 0;

/***/ }),
/* 147 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var EventEmitter = __webpack_require__(16).EventEmitter;

var shortid = __webpack_require__(71);

var _require = __webpack_require__(72),
    WORKER_REQUEST_READ_LOCK = _require.WORKER_REQUEST_READ_LOCK,
    WORKER_RELEASE_READ_LOCK = _require.WORKER_RELEASE_READ_LOCK,
    MASTER_GRANT_READ_LOCK = _require.MASTER_GRANT_READ_LOCK,
    WORKER_REQUEST_WRITE_LOCK = _require.WORKER_REQUEST_WRITE_LOCK,
    WORKER_RELEASE_WRITE_LOCK = _require.WORKER_RELEASE_WRITE_LOCK,
    MASTER_GRANT_WRITE_LOCK = _require.MASTER_GRANT_WRITE_LOCK;

var observer = __webpack_require__(73);

var globalThis = __webpack_require__(149)();

var handleWorkerLockRequest = function handleWorkerLockRequest(emitter, masterEvent, requestType, releaseType, grantType) {
  return function (worker, event) {
    if (!event || !event.data || event.data.type !== requestType) {
      return;
    }

    var requestEvent = {
      type: event.data.type,
      name: event.data.name,
      identifier: event.data.identifier
    };
    emitter.emit(masterEvent, requestEvent.name, function () {
      // grant lock to worker
      worker.postMessage({
        type: grantType,
        name: requestEvent.name,
        identifier: requestEvent.identifier
      }); // wait for worker to finish

      return new Promise(function (resolve) {
        var releaseEventListener = function releaseEventListener(event) {
          if (!event || !event.data) {
            return;
          }

          var releaseEvent = {
            type: event.data.type,
            name: event.data.name,
            identifier: event.data.identifier
          };

          if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {
            worker.removeEventListener('message', releaseEventListener);
            resolve();
          }
        };

        worker.addEventListener('message', releaseEventListener);
      });
    });
  };
};

var makeWorkerLockRequest = function makeWorkerLockRequest(name, requestType, grantType, releaseType) {
  return function () {
    var id = shortid.generate();
    globalThis.postMessage({
      type: requestType,
      identifier: id,
      name: name
    });
    return new Promise(function (resolve) {
      var listener = function listener(event) {
        if (!event || !event.data) {
          return;
        }

        var responseEvent = {
          type: event.data.type,
          identifier: event.data.identifier
        };

        if (responseEvent && responseEvent.type === grantType && responseEvent.identifier === id) {
          globalThis.removeEventListener('message', listener); // grant lock

          resolve(function () {
            // release lock
            globalThis.postMessage({
              type: releaseType,
              identifier: id,
              name: name
            });
          });
        }
      };

      globalThis.addEventListener('message', listener);
    });
  };
};

var defaultOptions = {
  singleProcess: false
};

module.exports = function (options) {
  options = Object.assign({}, defaultOptions, options);
  var isMaster = !!globalThis.document || options.singleProcess;

  if (isMaster) {
    var emitter = new EventEmitter();
    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));
    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));
    return emitter;
  }

  return {
    isWorker: true,
    readLock: function readLock(name) {
      return makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK);
    },
    writeLock: function writeLock(name) {
      return makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK);
    }
  };
};

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defineProperties = __webpack_require__(74);

var implementation = __webpack_require__(76);

var getPolyfill = __webpack_require__(77);

var shim = __webpack_require__(152);

var polyfill = getPolyfill();

var getGlobal = function getGlobal() {
  return polyfill;
};

defineProperties(getGlobal, {
  getPolyfill: getPolyfill,
  implementation: implementation,
  shim: shim
});
module.exports = getGlobal;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var slice = Array.prototype.slice;

var isArgs = __webpack_require__(75);

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) {
  return origKeys(o);
} : __webpack_require__(151);
var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
  if (Object.keys) {
    var keysWorksWithArguments = function () {
      // Safari 5.0 bug
      var args = Object.keys(arguments);
      return args && args.length === arguments.length;
    }(1, 2);

    if (!keysWorksWithArguments) {
      Object.keys = function keys(object) {
        // eslint-disable-line func-name-matching
        if (isArgs(object)) {
          return originalKeys(slice.call(object));
        }

        return originalKeys(object);
      };
    }
  } else {
    Object.keys = keysShim;
  }

  return Object.keys || keysShim;
};

module.exports = keysShim;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var keysShim;

if (!Object.keys) {
  // modified from https://github.com/es-shims/es5-shim
  var has = Object.prototype.hasOwnProperty;
  var toStr = Object.prototype.toString;

  var isArgs = __webpack_require__(75); // eslint-disable-line global-require


  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var hasDontEnumBug = !isEnumerable.call({
    toString: null
  }, 'toString');
  var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
  var dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];

  var equalsConstructorPrototype = function equalsConstructorPrototype(o) {
    var ctor = o.constructor;
    return ctor && ctor.prototype === o;
  };

  var excludedKeys = {
    $applicationCache: true,
    $console: true,
    $external: true,
    $frame: true,
    $frameElement: true,
    $frames: true,
    $innerHeight: true,
    $innerWidth: true,
    $onmozfullscreenchange: true,
    $onmozfullscreenerror: true,
    $outerHeight: true,
    $outerWidth: true,
    $pageXOffset: true,
    $pageYOffset: true,
    $parent: true,
    $scrollLeft: true,
    $scrollTop: true,
    $scrollX: true,
    $scrollY: true,
    $self: true,
    $webkitIndexedDB: true,
    $webkitStorageInfo: true,
    $window: true
  };

  var hasAutomationEqualityBug = function () {
    /* global window */
    if (typeof window === 'undefined') {
      return false;
    }

    for (var k in window) {
      try {
        if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && _typeof(window[k]) === 'object') {
          try {
            equalsConstructorPrototype(window[k]);
          } catch (e) {
            return true;
          }
        }
      } catch (e) {
        return true;
      }
    }

    return false;
  }();

  var equalsConstructorPrototypeIfNotBuggy = function equalsConstructorPrototypeIfNotBuggy(o) {
    /* global window */
    if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
      return equalsConstructorPrototype(o);
    }

    try {
      return equalsConstructorPrototype(o);
    } catch (e) {
      return false;
    }
  };

  keysShim = function keys(object) {
    var isObject = object !== null && _typeof(object) === 'object';
    var isFunction = toStr.call(object) === '[object Function]';
    var isArguments = isArgs(object);
    var isString = isObject && toStr.call(object) === '[object String]';
    var theKeys = [];

    if (!isObject && !isFunction && !isArguments) {
      throw new TypeError('Object.keys called on a non-object');
    }

    var skipProto = hasProtoEnumBug && isFunction;

    if (isString && object.length > 0 && !has.call(object, 0)) {
      for (var i = 0; i < object.length; ++i) {
        theKeys.push(String(i));
      }
    }

    if (isArguments && object.length > 0) {
      for (var j = 0; j < object.length; ++j) {
        theKeys.push(String(j));
      }
    } else {
      for (var name in object) {
        if (!(skipProto && name === 'prototype') && has.call(object, name)) {
          theKeys.push(String(name));
        }
      }
    }

    if (hasDontEnumBug) {
      var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

      for (var k = 0; k < dontEnums.length; ++k) {
        if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
          theKeys.push(dontEnums[k]);
        }
      }
    }

    return theKeys;
  };
}

module.exports = keysShim;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var define = __webpack_require__(74);

var getPolyfill = __webpack_require__(77);

module.exports = function shimGlobal() {
  var polyfill = getPolyfill();

  if (define.supportsDescriptors) {
    var descriptor = Object.getOwnPropertyDescriptor(polyfill, 'globalThis');

    if (!descriptor || descriptor.configurable && (descriptor.enumerable || descriptor.writable || globalThis !== polyfill)) {
      // eslint-disable-line max-len
      Object.defineProperty(polyfill, 'globalThis', {
        configurable: true,
        enumerable: false,
        value: polyfill,
        writable: false
      });
    }
  } else if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) !== 'object' || globalThis !== polyfill) {
    polyfill.globalThis = polyfill;
  }

  return polyfill;
};

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var EventEmitter = __webpack_require__(154);

var p_timeout_1 = __webpack_require__(155);

var priority_queue_1 = __webpack_require__(157);

var empty = function empty() {};

var timeoutError = new p_timeout_1["default"].TimeoutError();
/**
Promise queue with concurrency control.
*/

var PQueue =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(PQueue, _EventEmitter);

  function PQueue(options) {
    var _this;

    _classCallCheck(this, PQueue);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PQueue).call(this));
    _this._intervalCount = 0;
    _this._intervalEnd = 0;
    _this._pendingCount = 0;
    _this._resolveEmpty = empty;
    _this._resolveIdle = empty; // eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion

    options = Object.assign({
      carryoverConcurrencyCount: false,
      intervalCap: Infinity,
      interval: 0,
      concurrency: Infinity,
      autoStart: true,
      queueClass: priority_queue_1["default"]
    }, options);

    if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {
      throw new TypeError("Expected `intervalCap` to be a number from 1 and up, got `".concat(options.intervalCap, "` (").concat(_typeof(options.intervalCap), ")"));
    }

    if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {
      throw new TypeError("Expected `interval` to be a finite number >= 0, got `".concat(options.interval, "` (").concat(_typeof(options.interval), ")"));
    }

    _this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
    _this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;
    _this._intervalCap = options.intervalCap;
    _this._interval = options.interval;
    _this._queue = new options.queueClass();
    _this._queueClass = options.queueClass;
    _this.concurrency = options.concurrency;
    _this._timeout = options.timeout;
    _this._throwOnTimeout = options.throwOnTimeout === true;
    _this._isPaused = options.autoStart === false;
    return _this;
  }

  _createClass(PQueue, [{
    key: "_next",
    value: function _next() {
      this._pendingCount--;

      this._tryToStartAnother();
    }
  }, {
    key: "_resolvePromises",
    value: function _resolvePromises() {
      this._resolveEmpty();

      this._resolveEmpty = empty;

      if (this._pendingCount === 0) {
        this._resolveIdle();

        this._resolveIdle = empty;
      }
    }
  }, {
    key: "_onResumeInterval",
    value: function _onResumeInterval() {
      this._onInterval();

      this._initializeIntervalIfNeeded();

      this._timeoutId = undefined;
    }
  }, {
    key: "_isIntervalPaused",
    value: function _isIntervalPaused() {
      var _this2 = this;

      var now = Date.now();

      if (this._intervalId === undefined) {
        var delay = this._intervalEnd - now;

        if (delay < 0) {
          // Act as the interval was done
          // We don't need to resume it here because it will be resumed on line 160
          this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
        } else {
          // Act as the interval is pending
          if (this._timeoutId === undefined) {
            this._timeoutId = setTimeout(function () {
              _this2._onResumeInterval();
            }, delay);
          }

          return true;
        }
      }

      return false;
    }
  }, {
    key: "_tryToStartAnother",
    value: function _tryToStartAnother() {
      if (this._queue.size === 0) {
        // We can clear the interval ("pause")
        // Because we can redo it later ("resume")
        if (this._intervalId) {
          clearInterval(this._intervalId);
        }

        this._intervalId = undefined;

        this._resolvePromises();

        return false;
      }

      if (!this._isPaused) {
        var canInitializeInterval = !this._isIntervalPaused();

        if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
          this.emit('active');

          this._queue.dequeue()();

          if (canInitializeInterval) {
            this._initializeIntervalIfNeeded();
          }

          return true;
        }
      }

      return false;
    }
  }, {
    key: "_initializeIntervalIfNeeded",
    value: function _initializeIntervalIfNeeded() {
      var _this3 = this;

      if (this._isIntervalIgnored || this._intervalId !== undefined) {
        return;
      }

      this._intervalId = setInterval(function () {
        _this3._onInterval();
      }, this._interval);
      this._intervalEnd = Date.now() + this._interval;
    }
  }, {
    key: "_onInterval",
    value: function _onInterval() {
      if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
        clearInterval(this._intervalId);
        this._intervalId = undefined;
      }

      this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;

      this._processQueue();
    }
    /**
    Executes all queued functions until it reaches the limit.
    */

  }, {
    key: "_processQueue",
    value: function _processQueue() {
      // eslint-disable-next-line no-empty
      while (this._tryToStartAnother()) {}
    }
  }, {
    key: "add",

    /**
    Adds a sync or async task to the queue. Always returns a promise.
    */
    value: function () {
      var _add = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(fn) {
        var _this4 = this;

        var options,
            _args2 = arguments;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                return _context2.abrupt("return", new Promise(function (resolve, reject) {
                  var run =
                  /*#__PURE__*/
                  function () {
                    var _ref = _asyncToGenerator(
                    /*#__PURE__*/
                    _regenerator["default"].mark(function _callee() {
                      var operation;
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              _this4._pendingCount++;
                              _this4._intervalCount++;
                              _context.prev = 2;
                              operation = _this4._timeout === undefined && options.timeout === undefined ? fn() : p_timeout_1["default"](Promise.resolve(fn()), options.timeout === undefined ? _this4._timeout : options.timeout, function () {
                                if (options.throwOnTimeout === undefined ? _this4._throwOnTimeout : options.throwOnTimeout) {
                                  reject(timeoutError);
                                }

                                return undefined;
                              });
                              _context.t0 = resolve;
                              _context.next = 7;
                              return operation;

                            case 7:
                              _context.t1 = _context.sent;
                              (0, _context.t0)(_context.t1);
                              _context.next = 14;
                              break;

                            case 11:
                              _context.prev = 11;
                              _context.t2 = _context["catch"](2);
                              reject(_context.t2);

                            case 14:
                              _this4._next();

                            case 15:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, null, [[2, 11]]);
                    }));

                    return function run() {
                      return _ref.apply(this, arguments);
                    };
                  }();

                  _this4._queue.enqueue(run, options);

                  _this4._tryToStartAnother();
                }));

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function add(_x) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
    /**
    Same as `.add()`, but accepts an array of sync or async functions.
     @returns A promise that resolves when all functions are resolved.
    */

  }, {
    key: "addAll",
    value: function () {
      var _addAll = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4(functions, options) {
        var _this5 = this;

        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", Promise.all(functions.map(
                /*#__PURE__*/
                function () {
                  var _ref2 = _asyncToGenerator(
                  /*#__PURE__*/
                  _regenerator["default"].mark(function _callee3(function_) {
                    return _regenerator["default"].wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            return _context3.abrupt("return", _this5.add(function_, options));

                          case 1:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3);
                  }));

                  return function (_x4) {
                    return _ref2.apply(this, arguments);
                  };
                }())));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function addAll(_x2, _x3) {
        return _addAll.apply(this, arguments);
      }

      return addAll;
    }()
    /**
    Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)
    */

  }, {
    key: "start",
    value: function start() {
      if (!this._isPaused) {
        return this;
      }

      this._isPaused = false;

      this._processQueue();

      return this;
    }
    /**
    Put queue execution on hold.
    */

  }, {
    key: "pause",
    value: function pause() {
      this._isPaused = true;
    }
    /**
    Clear the queue.
    */

  }, {
    key: "clear",
    value: function clear() {
      this._queue = new this._queueClass();
    }
    /**
    Can be called multiple times. Useful if you for example add additional items at a later time.
     @returns A promise that settles when the queue becomes empty.
    */

  }, {
    key: "onEmpty",
    value: function () {
      var _onEmpty = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee5() {
        var _this6 = this;

        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(this._queue.size === 0)) {
                  _context5.next = 2;
                  break;
                }

                return _context5.abrupt("return");

              case 2:
                return _context5.abrupt("return", new Promise(function (resolve) {
                  var existingResolve = _this6._resolveEmpty;

                  _this6._resolveEmpty = function () {
                    existingResolve();
                    resolve();
                  };
                }));

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function onEmpty() {
        return _onEmpty.apply(this, arguments);
      }

      return onEmpty;
    }()
    /**
    The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.
     @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.
    */

  }, {
    key: "onIdle",
    value: function () {
      var _onIdle = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee6() {
        var _this7 = this;

        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (!(this._pendingCount === 0 && this._queue.size === 0)) {
                  _context6.next = 2;
                  break;
                }

                return _context6.abrupt("return");

              case 2:
                return _context6.abrupt("return", new Promise(function (resolve) {
                  var existingResolve = _this7._resolveIdle;

                  _this7._resolveIdle = function () {
                    existingResolve();
                    resolve();
                  };
                }));

              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function onIdle() {
        return _onIdle.apply(this, arguments);
      }

      return onIdle;
    }()
    /**
    Size of the queue.
    */

  }, {
    key: "_doesIntervalAllowAnother",
    get: function get() {
      return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
    }
  }, {
    key: "_doesConcurrentAllowAnother",
    get: function get() {
      return this._pendingCount < this._concurrency;
    }
  }, {
    key: "concurrency",
    get: function get() {
      return this._concurrency;
    },
    set: function set(newConcurrency) {
      if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {
        throw new TypeError("Expected `concurrency` to be a number from 1 and up, got `".concat(newConcurrency, "` (").concat(_typeof(newConcurrency), ")"));
      }

      this._concurrency = newConcurrency;

      this._processQueue();
    }
  }, {
    key: "size",
    get: function get() {
      return this._queue.size;
    }
    /**
    Number of pending promises.
    */

  }, {
    key: "pending",
    get: function get() {
      return this._pendingCount;
    }
    /**
    Whether the queue is currently paused.
    */

  }, {
    key: "isPaused",
    get: function get() {
      return this._isPaused;
    }
    /**
    Set the timeout for future operations.
    */

  }, {
    key: "timeout",
    set: function set(milliseconds) {
      this._timeout = milliseconds;
    },
    get: function get() {
      return this._timeout;
    }
  }]);

  return PQueue;
}(EventEmitter);

exports["default"] = PQueue;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty,
    prefix = '~';
/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */

function Events() {} //
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//


if (Object.create) {
  Events.prototype = Object.create(null); //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //

  if (!new Events().__proto__) prefix = false;
}
/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */


function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}
/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */


function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once),
      evt = prefix ? prefix + event : event;
  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
  return emitter;
}
/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */


function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
}
/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */


function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}
/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */


EventEmitter.prototype.eventNames = function eventNames() {
  var names = [],
      events,
      name;
  if (this._eventsCount === 0) return names;

  for (name in events = this._events) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};
/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */


EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event,
      handlers = this._events[evt];
  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};
/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */


EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event,
      listeners = this._events[evt];
  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};
/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */


EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;
  if (!this._events[evt]) return false;
  var listeners = this._events[evt],
      len = arguments.length,
      args,
      i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1:
        return listeners.fn.call(listeners.context), true;

      case 2:
        return listeners.fn.call(listeners.context, a1), true;

      case 3:
        return listeners.fn.call(listeners.context, a1, a2), true;

      case 4:
        return listeners.fn.call(listeners.context, a1, a2, a3), true;

      case 5:
        return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

      case 6:
        return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len - 1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length,
        j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1:
          listeners[i].fn.call(listeners[i].context);
          break;

        case 2:
          listeners[i].fn.call(listeners[i].context, a1);
          break;

        case 3:
          listeners[i].fn.call(listeners[i].context, a1, a2);
          break;

        case 4:
          listeners[i].fn.call(listeners[i].context, a1, a2, a3);
          break;

        default:
          if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
            args[j - 1] = arguments[j];
          }
          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};
/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */


EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};
/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */


EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};
/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */


EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;
  if (!this._events[evt]) return this;

  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
        events.push(listeners[i]);
      }
    } //
    // Reset the array, or remove it completely if we have no more listeners.
    //


    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
  }

  return this;
};
/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */


EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
}; //
// Alias methods names because people roll like that.
//


EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on; //
// Expose the prefix.
//

EventEmitter.prefixed = prefix; //
// Allow `EventEmitter` to be imported as module namespace.
//

EventEmitter.EventEmitter = EventEmitter; //
// Expose the module.
//

if (true) {
  module.exports = EventEmitter;
}

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var pFinally = __webpack_require__(156);

var TimeoutError =
/*#__PURE__*/
function (_Error) {
  _inherits(TimeoutError, _Error);

  function TimeoutError(message) {
    var _this;

    _classCallCheck(this, TimeoutError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimeoutError).call(this, message));
    _this.name = 'TimeoutError';
    return _this;
  }

  return TimeoutError;
}(_wrapNativeSuper(Error));

var pTimeout = function pTimeout(promise, milliseconds, fallback) {
  return new Promise(function (resolve, reject) {
    if (typeof milliseconds !== 'number' || milliseconds < 0) {
      throw new TypeError('Expected `milliseconds` to be a positive number');
    }

    var timer = setTimeout(function () {
      if (typeof fallback === 'function') {
        try {
          resolve(fallback());
        } catch (error) {
          reject(error);
        }

        return;
      }

      var message = typeof fallback === 'string' ? fallback : "Promise timed out after ".concat(milliseconds, " milliseconds");
      var timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);

      if (typeof promise.cancel === 'function') {
        promise.cancel();
      }

      reject(timeoutError);
    }, milliseconds); // TODO: Use native `finally` keyword when targeting Node.js 10

    pFinally( // eslint-disable-next-line promise/prefer-await-to-then
    promise.then(resolve, reject), function () {
      clearTimeout(timer);
    });
  });
};

module.exports = pTimeout; // TODO: Remove this for the next major release

module.exports["default"] = pTimeout;
module.exports.TimeoutError = TimeoutError;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (promise, onFinally) {
  onFinally = onFinally || function () {};

  return promise.then(function (val) {
    return new Promise(function (resolve) {
      resolve(onFinally());
    }).then(function () {
      return val;
    });
  }, function (err) {
    return new Promise(function (resolve) {
      resolve(onFinally());
    }).then(function () {
      throw err;
    });
  });
};

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var lower_bound_1 = __webpack_require__(158);

var PriorityQueue =
/*#__PURE__*/
function () {
  function PriorityQueue() {
    _classCallCheck(this, PriorityQueue);

    this._queue = [];
  }

  _createClass(PriorityQueue, [{
    key: "enqueue",
    value: function enqueue(run, options) {
      options = Object.assign({
        priority: 0
      }, options);
      var element = {
        priority: options.priority,
        run: run
      };

      if (this.size && this._queue[this.size - 1].priority >= options.priority) {
        this._queue.push(element);

        return;
      }

      var index = lower_bound_1["default"](this._queue, element, function (a, b) {
        return b.priority - a.priority;
      });

      this._queue.splice(index, 0, element);
    }
  }, {
    key: "dequeue",
    value: function dequeue() {
      var item = this._queue.shift();

      return item && item.run;
    }
  }, {
    key: "size",
    get: function get() {
      return this._queue.length;
    }
  }]);

  return PriorityQueue;
}();

exports["default"] = PriorityQueue;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
}); // Port of lower_bound from http://en.cppreference.com/w/cpp/algorithm/lower_bound
// Used to compute insertion index to keep queue sorted after insertion

function lowerBound(array, value, comparator) {
  var first = 0;
  var count = array.length;

  while (count > 0) {
    var step = count / 2 | 0;
    var it = first + step;

    if (comparator(array[it], value) <= 0) {
      first = ++it;
      count -= step + 1;
    } else {
      count = step;
    }
  }

  return first;
}

exports["default"] = lowerBound;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright (c) 2015-2017 David M. Lee, II

/**
 * Local reference to TimeoutError
 * @private
 */

var TimeoutError;
/**
 * Rejects a promise with a {@link TimeoutError} if it does not settle within
 * the specified timeout.
 *
 * @param {Promise} promise The promise.
 * @param {number} timeoutMillis Number of milliseconds to wait on settling.
 * @returns {Promise} Either resolves/rejects with `promise`, or rejects with
 *                   `TimeoutError`, whichever settles first.
 */

var timeout = module.exports.timeout = function (promise, timeoutMillis) {
  var error = new TimeoutError(),
      timeout;
  return Promise.race([promise, new Promise(function (resolve, reject) {
    timeout = setTimeout(function () {
      reject(error);
    }, timeoutMillis);
  })]).then(function (v) {
    clearTimeout(timeout);
    return v;
  }, function (err) {
    clearTimeout(timeout);
    throw err;
  });
};
/**
 * Exception indicating that the timeout expired.
 */


TimeoutError = module.exports.TimeoutError = function () {
  Error.call(this);
  this.stack = Error().stack;
  this.message = 'Timeout';
};

TimeoutError.prototype = Object.create(Error.prototype);
TimeoutError.prototype.name = "TimeoutError";

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* @flow */


var Key = __webpack_require__(78);

var MemoryDatastore = __webpack_require__(165);

var utils = __webpack_require__(50);

var Errors = __webpack_require__(87);

exports.Key = Key;
exports.MemoryDatastore = MemoryDatastore;
exports.utils = utils;
exports.Errors = Errors;
/* ::
// -- Basics

export type Callback<Value> = (err: ?Error, ?Value) => void

// eslint-disable-next-line
export interface Datastore<Value> {
  // eslint-disable-next-line
  put(Key, Value, Callback<void>): void;
  // eslint-disable-next-line
  get(Key, Callback<Value>): void;
  has(Key, Callback<bool>): void;
  delete(Key, Callback<void>): void;
  // eslint-disable-next-line
  query(Query<Value>): QueryResult<Value>;

  // eslint-disable-next-line
  batch(): Batch<Value>;
  close(Callback<void>): void;
  open(Callback<void>): void;
}

// -- Batch
export type Batch<Value> = {
  put(Key, Value): void,
  delete(Key): void,
  commit(Callback<void>): void
}

// -- Query

export type Query<Value> = {
  prefix?: string,
  filters?: Array<Filter<Value>>,
  orders?: Array<Order<Value>>,
  limit?: number,
  offset?: number,
  keysOnly?: bool
}

export type PullEnd = bool | Error
export type PullSource<Val> = (end: ?PullEnd, (end: ?PullEnd, Val) => void) => void

export type QueryResult<Value> = PullSource<QueryEntry<Value>>

export type QueryEntry<Value> = {
  key: Key,
  value?: Value
}

export type Filter<Value> = (QueryEntry<Value>, Callback<bool>) => void

export type Order<Value> = (QueryResult<Value>, Callback<QueryResult<Value>>) => void

*/

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;

  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection
// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto);

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

  return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');
}

module.exports = bytesToUuid;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* @flow */

/* :: import type {Batch, Query, QueryResult, Callback} from './' */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var pull = __webpack_require__(81);

var setImmediate = __webpack_require__(187);

var asyncFilter = __webpack_require__(50).asyncFilter;

var asyncSort = __webpack_require__(50).asyncSort;

var Key = __webpack_require__(78); // Errors


var Errors = __webpack_require__(87);

var MemoryDatastore =
/*#__PURE__*/
function () {
  /* :: data: {[key: string]: Buffer} */
  function MemoryDatastore() {
    _classCallCheck(this, MemoryDatastore);

    this.data = {};
  }

  _createClass(MemoryDatastore, [{
    key: "open",
    value: function open(callback
    /* : Callback<void> */
    )
    /* : void */
    {
      setImmediate(callback);
    }
  }, {
    key: "put",
    value: function put(key
    /* : Key */
    , val
    /* : Buffer */
    , callback
    /* : Callback<void> */
    )
    /* : void */
    {
      this.data[key.toString()] = val;
      setImmediate(callback);
    }
  }, {
    key: "get",
    value: function get(key
    /* : Key */
    , callback
    /* : Callback<Buffer> */
    )
    /* : void */
    {
      var _this = this;

      this.has(key, function (err, exists) {
        if (err) {
          return callback(err);
        }

        if (!exists) {
          return callback(Errors.notFoundError());
        }

        callback(null, _this.data[key.toString()]);
      });
    }
  }, {
    key: "has",
    value: function has(key
    /* : Key */
    , callback
    /* : Callback<bool> */
    )
    /* : void */
    {
      var _this2 = this;

      setImmediate(function () {
        callback(null, _this2.data[key.toString()] !== undefined);
      });
    }
  }, {
    key: "delete",
    value: function _delete(key
    /* : Key */
    , callback
    /* : Callback<void> */
    )
    /* : void */
    {
      delete this.data[key.toString()];
      setImmediate(function () {
        callback();
      });
    }
  }, {
    key: "batch",
    value: function batch()
    /* : Batch<Buffer> */
    {
      var _this3 = this;

      var puts = [];
      var dels = [];
      return {
        put: function put(key
        /* : Key */
        , value
        /* : Buffer */
        )
        /* : void */
        {
          puts.push([key, value]);
        },
        "delete": function _delete(key
        /* : Key */
        )
        /* : void */
        {
          dels.push(key);
        },
        commit: function commit(callback
        /* : Callback<void> */
        )
        /* : void */
        {
          puts.forEach(function (v) {
            _this3.data[v[0].toString()] = v[1];
          });
          puts = [];
          dels.forEach(function (key) {
            delete _this3.data[key.toString()];
          });
          dels = [];
          setImmediate(callback);
        }
      };
    }
  }, {
    key: "query",
    value: function query(q
    /* : Query<Buffer> */
    )
    /* : QueryResult<Buffer> */
    {
      var _this4 = this;

      var tasks = [pull.keys(this.data), pull.map(function (k) {
        return {
          key: new Key(k),
          value: _this4.data[k]
        };
      })];
      var filters = [];

      if (q.prefix != null) {
        var prefix = q.prefix;
        filters.push(function (e, cb) {
          return cb(null, e.key.toString().startsWith(prefix));
        });
      }

      if (q.filters != null) {
        filters = filters.concat(q.filters);
      }

      tasks = tasks.concat(filters.map(function (f) {
        return asyncFilter(f);
      }));

      if (q.orders != null) {
        tasks = tasks.concat(q.orders.map(function (o) {
          return asyncSort(o);
        }));
      }

      if (q.offset != null) {
        var i = 0; // $FlowFixMe

        tasks.push(pull.filter(function () {
          return i++ >= q.offset;
        }));
      }

      if (q.limit != null) {
        tasks.push(pull.take(q.limit));
      }

      if (q.keysOnly === true) {
        tasks.push(pull.map(function (e) {
          return {
            key: e.key
          };
        }));
      }

      return pull.apply(null, tasks);
    }
  }, {
    key: "close",
    value: function close(callback
    /* : Callback<void> */
    )
    /* : void */
    {
      setImmediate(callback);
    }
  }]);

  return MemoryDatastore;
}();

module.exports = MemoryDatastore;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  keys: __webpack_require__(167),
  once: __webpack_require__(83),
  values: __webpack_require__(47),
  count: __webpack_require__(168),
  infinite: __webpack_require__(169),
  empty: __webpack_require__(170),
  error: __webpack_require__(171)
};

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var values = __webpack_require__(47);

module.exports = function (object) {
  return values(Object.keys(object));
};

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function count(max) {
  var i = 0;
  max = max || Infinity;
  return function (end, cb) {
    if (end) return cb && cb(end);
    if (i > max) return cb(true);
    cb(null, i++);
  };
};

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function infinite(generate) {
  generate = generate || Math.random;
  return function (end, cb) {
    if (end) return cb && cb(end);
    return cb(null, generate());
  };
};

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 //a stream that ends immediately.

module.exports = function empty() {
  return function (abort, cb) {
    cb(true);
  };
};

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 //a stream that errors immediately.

module.exports = function error(err) {
  return function (abort, cb) {
    cb(err);
  };
};

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  drain: __webpack_require__(24),
  onEnd: __webpack_require__(173),
  log: __webpack_require__(174),
  find: __webpack_require__(175),
  reduce: __webpack_require__(48),
  collect: __webpack_require__(176),
  concat: __webpack_require__(177)
};

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var drain = __webpack_require__(24);

module.exports = function onEnd(done) {
  return drain(null, done);
};

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var drain = __webpack_require__(24);

module.exports = function log(done) {
  return drain(function (data) {
    console.log(data);
  }, done);
};

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function id(e) {
  return e;
}

var prop = __webpack_require__(25);

var drain = __webpack_require__(24);

module.exports = function find(test, cb) {
  var ended = false;
  if (!cb) cb = test, test = id;else test = prop(test) || id;
  return drain(function (data) {
    if (test(data)) {
      ended = true;
      cb(null, data);
      return false;
    }
  }, function (err) {
    if (ended) return; //already called back

    cb(err === true ? null : err, null);
  });
};

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var reduce = __webpack_require__(48);

module.exports = function collect(cb) {
  return reduce(function (arr, item) {
    arr.push(item);
    return arr;
  }, [], cb);
};

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var reduce = __webpack_require__(48);

module.exports = function concat(cb) {
  return reduce(function (a, b) {
    return a + b;
  }, '', cb);
};

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  map: __webpack_require__(179),
  asyncMap: __webpack_require__(180),
  filter: __webpack_require__(49),
  filterNot: __webpack_require__(181),
  through: __webpack_require__(182),
  take: __webpack_require__(183),
  unique: __webpack_require__(85),
  nonUnique: __webpack_require__(184),
  flatten: __webpack_require__(185)
};

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function id(e) {
  return e;
}

var prop = __webpack_require__(25);

module.exports = function map(mapper) {
  if (!mapper) return id;
  mapper = prop(mapper);
  return function (read) {
    return function (abort, cb) {
      read(abort, function (end, data) {
        try {
          data = !end ? mapper(data) : null;
        } catch (err) {
          return read(err, function () {
            return cb(err);
          });
        }

        cb(end, data);
      });
    };
  };
};

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function id(e) {
  return e;
}

var prop = __webpack_require__(25);

module.exports = function asyncMap(map) {
  if (!map) return id;
  map = prop(map);
  var busy = false,
      abortCb,
      aborted;
  return function (read) {
    return function next(abort, cb) {
      if (aborted) return cb(aborted);

      if (abort) {
        aborted = abort;
        if (!busy) read(abort, function (err) {
          //incase the source has already ended normally,
          //we should pass our own error.
          cb(abort);
        });else read(abort, function (err) {
          //if we are still busy, wait for the mapper to complete.
          if (busy) abortCb = cb;else cb(abort);
        });
      } else read(null, function (end, data) {
        if (end) cb(end);else if (aborted) cb(aborted);else {
          busy = true;
          map(data, function (err, data) {
            busy = false;

            if (aborted) {
              cb(aborted);
              abortCb && abortCb(aborted);
            } else if (err) next(err, cb);else cb(null, data);
          });
        }
      });
    };
  };
};

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var tester = __webpack_require__(84);

var filter = __webpack_require__(49);

module.exports = function filterNot(test) {
  test = tester(test);
  return filter(function (data) {
    return !test(data);
  });
};

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 //a pass through stream that doesn't change the value.

module.exports = function through(op, onEnd) {
  var a = false;

  function once(abort) {
    if (a || !onEnd) return;
    a = true;
    onEnd(abort === true ? null : abort);
  }

  return function (read) {
    return function (end, cb) {
      if (end) once(end);
      return read(end, function (end, data) {
        if (!end) op && op(data);else once(end);
        cb(end, data);
      });
    };
  };
};

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 //read a number of items and then stop.

module.exports = function take(test, opts) {
  opts = opts || {};
  var last = opts.last || false; // whether the first item for which !test(item) should still pass

  var ended = false;

  if ('number' === typeof test) {
    last = true;
    var n = test;

    test = function test() {
      return --n;
    };
  }

  return function (read) {
    function terminate(cb) {
      read(true, function (err) {
        last = false;
        cb(err || true);
      });
    }

    return function (end, cb) {
      if (ended && !end) last ? terminate(cb) : cb(ended);else if (ended = end) read(ended, cb);else read(null, function (end, data) {
        if (ended = ended || end) {
          //last ? terminate(cb) :
          cb(ended);
        } else if (!test(data)) {
          ended = true;
          last ? cb(null, data) : terminate(cb);
        } else cb(null, data);
      });
    };
  };
};

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var unique = __webpack_require__(85); //passes an item through when you see it for the second time.


module.exports = function nonUnique(field) {
  return unique(field, true);
};

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var values = __webpack_require__(47);

var once = __webpack_require__(83); //convert a stream of arrays or streams into just a stream.


module.exports = function flatten() {
  return function (read) {
    var _read;

    return function (abort, cb) {
      if (abort) {
        //abort the current stream, and then stream of streams.
        _read ? _read(abort, function (err) {
          read(err || abort, cb);
        }) : read(abort, cb);
      } else if (_read) nextChunk();else nextStream();

      function nextChunk() {
        _read(null, function (err, data) {
          if (err === true) nextStream();else if (err) {
            read(true, function (abortErr) {
              // TODO: what do we do with the abortErr?
              cb(err);
            });
          } else cb(null, data);
        });
      }

      function nextStream() {
        _read = null;
        read(null, function (end, stream) {
          if (end) return cb(end);
          if (Array.isArray(stream) || stream && 'object' === _typeof(stream)) stream = values(stream);else if ('function' != typeof stream) stream = once(stream);
          _read = stream;
          nextChunk();
        });
      }
    };
  };
};

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function pull(a) {
  var length = arguments.length;

  if (typeof a === 'function' && a.length === 1) {
    var args = new Array(length);

    for (var i = 0; i < length; i++) {
      args[i] = arguments[i];
    }

    return function (read) {
      if (args == null) {
        throw new TypeError("partial sink should only be called once!");
      } // Grab the reference after the check, because it's always an array now
      // (engines like that kind of consistency).


      var ref = args;
      args = null; // Prioritize common case of small number of pulls.

      switch (length) {
        case 1:
          return pull(read, ref[0]);

        case 2:
          return pull(read, ref[0], ref[1]);

        case 3:
          return pull(read, ref[0], ref[1], ref[2]);

        case 4:
          return pull(read, ref[0], ref[1], ref[2], ref[3]);

        default:
          ref.unshift(read);
          return pull.apply(null, ref);
      }
    };
  }

  var read = a;

  if (read && typeof read.source === 'function') {
    read = read.source;
  }

  for (var i = 1; i < length; i++) {
    var s = arguments[i];

    if (typeof s === 'function') {
      read = s(read);
    } else if (s && _typeof(s) === 'object') {
      s.sink(read);
      read = s.source;
    }
  }

  return read;
};

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _setImmediate = __webpack_require__(188);

var _setImmediate2 = _interopRequireDefault(_setImmediate);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Calls `callback` on a later loop around the event loop. In Node.js this just
 * calls `setImmediate`.  In the browser it will use `setImmediate` if
 * available, otherwise `setTimeout(callback, 0)`, which means other higher
 * priority events may precede the execution of `callback`.
 *
 * This is used internally for browser-compatibility purposes.
 *
 * @name setImmediate
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.nextTick]{@link module:Utils.nextTick}
 * @category Util
 * @param {Function} callback - The function to call on a later loop around
 * the event loop. Invoked with (args...).
 * @param {...*} args... - any number of additional arguments to pass to the
 * callback on the next tick.
 * @example
 *
 * var call_order = [];
 * async.nextTick(function() {
 *     call_order.push('two');
 *     // call_order now equals ['one','two']
 * });
 * call_order.push('one');
 *
 * async.setImmediate(function (a, b, c) {
 *     // a, b, and c equal 1, 2, and 3
 * }, 1, 2, 3);
 */


exports["default"] = _setImmediate2["default"];
module.exports = exports['default'];

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(setImmediate, process) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasNextTick = exports.hasSetImmediate = undefined;
exports.fallback = fallback;
exports.wrap = wrap;

var _slice = __webpack_require__(190);

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = exports.hasNextTick = (typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && typeof process.nextTick === 'function';

function fallback(fn) {
  setTimeout(fn, 0);
}

function wrap(defer) {
  return function (fn
  /*, ...args*/
  ) {
    var args = (0, _slice2["default"])(arguments, 1);
    defer(function () {
      fn.apply(null, args);
    });
  };
}

var _defer;

if (hasSetImmediate) {
  _defer = setImmediate;
} else if (hasNextTick) {
  _defer = process.nextTick;
} else {
  _defer = fallback;
}

exports["default"] = wrap(_defer);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(86).setImmediate, __webpack_require__(3)))

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

(function (global, undefined) {
  "use strict";

  if (global.setImmediate) {
    return;
  }

  var nextHandle = 1; // Spec says greater than zero

  var tasksByHandle = {};
  var currentlyRunningATask = false;
  var doc = global.document;
  var registerImmediate;

  function setImmediate(callback) {
    // Callback can either be a function or a string
    if (typeof callback !== "function") {
      callback = new Function("" + callback);
    } // Copy function arguments


    var args = new Array(arguments.length - 1);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 1];
    } // Store and register the task


    var task = {
      callback: callback,
      args: args
    };
    tasksByHandle[nextHandle] = task;
    registerImmediate(nextHandle);
    return nextHandle++;
  }

  function clearImmediate(handle) {
    delete tasksByHandle[handle];
  }

  function run(task) {
    var callback = task.callback;
    var args = task.args;

    switch (args.length) {
      case 0:
        callback();
        break;

      case 1:
        callback(args[0]);
        break;

      case 2:
        callback(args[0], args[1]);
        break;

      case 3:
        callback(args[0], args[1], args[2]);
        break;

      default:
        callback.apply(undefined, args);
        break;
    }
  }

  function runIfPresent(handle) {
    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
    // So if we're currently running a task, we'll need to delay this invocation.
    if (currentlyRunningATask) {
      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
      // "too much recursion" error.
      setTimeout(runIfPresent, 0, handle);
    } else {
      var task = tasksByHandle[handle];

      if (task) {
        currentlyRunningATask = true;

        try {
          run(task);
        } finally {
          clearImmediate(handle);
          currentlyRunningATask = false;
        }
      }
    }
  }

  function installNextTickImplementation() {
    registerImmediate = function registerImmediate(handle) {
      process.nextTick(function () {
        runIfPresent(handle);
      });
    };
  }

  function canUsePostMessage() {
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `global.postMessage` means something completely different and can't be used for this purpose.
    if (global.postMessage && !global.importScripts) {
      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;

      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };

      global.postMessage("", "*");
      global.onmessage = oldOnMessage;
      return postMessageIsAsynchronous;
    }
  }

  function installPostMessageImplementation() {
    // Installs an event handler on `global` for the `message` event: see
    // * https://developer.mozilla.org/en/DOM/window.postMessage
    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
    var messagePrefix = "setImmediate$" + Math.random() + "$";

    var onGlobalMessage = function onGlobalMessage(event) {
      if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
        runIfPresent(+event.data.slice(messagePrefix.length));
      }
    };

    if (global.addEventListener) {
      global.addEventListener("message", onGlobalMessage, false);
    } else {
      global.attachEvent("onmessage", onGlobalMessage);
    }

    registerImmediate = function registerImmediate(handle) {
      global.postMessage(messagePrefix + handle, "*");
    };
  }

  function installMessageChannelImplementation() {
    var channel = new MessageChannel();

    channel.port1.onmessage = function (event) {
      var handle = event.data;
      runIfPresent(handle);
    };

    registerImmediate = function registerImmediate(handle) {
      channel.port2.postMessage(handle);
    };
  }

  function installReadyStateChangeImplementation() {
    var html = doc.documentElement;

    registerImmediate = function registerImmediate(handle) {
      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var script = doc.createElement("script");

      script.onreadystatechange = function () {
        runIfPresent(handle);
        script.onreadystatechange = null;
        html.removeChild(script);
        script = null;
      };

      html.appendChild(script);
    };
  }

  function installSetTimeoutImplementation() {
    registerImmediate = function registerImmediate(handle) {
      setTimeout(runIfPresent, 0, handle);
    };
  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

  if ({}.toString.call(global.process) === "[object process]") {
    // For Node.js before 0.9
    installNextTickImplementation();
  } else if (canUsePostMessage()) {
    // For non-IE10 modern browsers
    installPostMessageImplementation();
  } else if (global.MessageChannel) {
    // For web workers, where supported
    installMessageChannelImplementation();
  } else if (doc && "onreadystatechange" in doc.createElement("script")) {
    // For IE 6–8
    installReadyStateChangeImplementation();
  } else {
    // For older browsers
    installSetTimeoutImplementation();
  }

  attachTo.setImmediate = setImmediate;
  attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? void 0 : global : self);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4), __webpack_require__(3)))

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = slice;

function slice(arrayLike, start) {
  start = start | 0;
  var newLen = Math.max(arrayLike.length - start, 0);
  var newArr = Array(newLen);

  for (var idx = 0; idx < newLen; idx++) {
    newArr[idx] = arrayLike[start + idx];
  }

  return newArr;
}

module.exports = exports["default"];

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  var _read, _cb, abortCb, _end;

  var read = function read(end, cb) {
    if (!_read) {
      if (end) {
        _end = end;
        abortCb = cb;
      } else _cb = cb;
    } else _read(end, cb);
  };

  read.resolve = function (read) {
    if (_read) throw new Error('already resolved');
    _read = read;
    if (!_read) throw new Error('no read cannot resolve!' + _read);
    if (_cb) read(null, _cb);
    if (abortCb) read(_end, abortCb);
  };

  read.abort = function (err) {
    read.resolve(function (_, cb) {
      cb(err || true);
    });
  };

  return read;
};

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;

  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];

    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  } // if the path is allowed to go above the root, restore leading ..s


  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
} // path.resolve([from ...], to)
// posix version


exports.resolve = function () {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = i >= 0 ? arguments[i] : process.cwd(); // Skip empty and invalid entries

    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  } // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)
  // Normalize the path


  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
    return !!p;
  }), !resolvedAbsolute).join('/');
  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
}; // path.normalize(path)
// posix version


exports.normalize = function (path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/'; // Normalize the path

  path = normalizeArray(filter(path.split('/'), function (p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }

  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
}; // posix version


exports.isAbsolute = function (path) {
  return path.charAt(0) === '/';
}; // posix version


exports.join = function () {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function (p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }

    return p;
  }).join('/'));
}; // path.relative(from, to)
// posix version


exports.relative = function (from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;

    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;

    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;

  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];

  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47
  /*/*/
  ;
  var end = -1;
  var matchedSlash = true;

  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);

    if (code === 47
    /*/*/
    ) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';

  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }

  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';
  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47
    /*/*/
    ) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
} // Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here


exports.basename = function (path, ext) {
  var f = basename(path);

  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }

  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find

  var preDotState = 0;

  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);

    if (code === 47
    /*/*/
    ) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }

        continue;
      }

    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }

    if (code === 46
    /*.*/
    ) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
      } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }

  return path.slice(startDot, end);
};

function filter(xs, f) {
  if (xs.filter) return xs.filter(f);
  var res = [];

  for (var i = 0; i < xs.length; i++) {
    if (f(xs[i], i, xs)) res.push(xs[i]);
  }

  return res;
} // String.prototype.substr - negative index don't work in IE8


var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
  return str.substr(start, len);
} : function (str, start, len) {
  if (start < 0) start = str.length + start;
  return str.substr(start, len);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.endianness = function () {
  return 'LE';
};

exports.hostname = function () {
  if (typeof location !== 'undefined') {
    return location.hostname;
  } else return '';
};

exports.loadavg = function () {
  return [];
};

exports.uptime = function () {
  return 0;
};

exports.freemem = function () {
  return Number.MAX_VALUE;
};

exports.totalmem = function () {
  return Number.MAX_VALUE;
};

exports.cpus = function () {
  return [];
};

exports.type = function () {
  return 'Browser';
};

exports.release = function () {
  if (typeof navigator !== 'undefined') {
    return navigator.appVersion;
  }

  return '';
};

exports.networkInterfaces = exports.getNetworkInterfaces = function () {
  return {};
};

exports.arch = function () {
  return 'javascript';
};

exports.platform = function () {
  return 'browser';
};

exports.tmpdir = exports.tmpDir = function () {
  return '/tmp';
};

exports.EOL = '\n';

exports.homedir = function () {
  return '/';
};

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var basex = __webpack_require__(89);

var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
module.exports = basex(ALPHABET);

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint quote-props: off */

/* eslint key-spacing: off */


exports.names = Object.freeze({
  'identity': 0x0,
  'sha1': 0x11,
  'sha2-256': 0x12,
  'sha2-512': 0x13,
  'dbl-sha2-256': 0x56,
  'sha3-224': 0x17,
  'sha3-256': 0x16,
  'sha3-384': 0x15,
  'sha3-512': 0x14,
  'shake-128': 0x18,
  'shake-256': 0x19,
  'keccak-224': 0x1A,
  'keccak-256': 0x1B,
  'keccak-384': 0x1C,
  'keccak-512': 0x1D,
  'murmur3-128': 0x22,
  'murmur3-32': 0x23,
  'blake2b-8': 0xb201,
  'blake2b-16': 0xb202,
  'blake2b-24': 0xb203,
  'blake2b-32': 0xb204,
  'blake2b-40': 0xb205,
  'blake2b-48': 0xb206,
  'blake2b-56': 0xb207,
  'blake2b-64': 0xb208,
  'blake2b-72': 0xb209,
  'blake2b-80': 0xb20a,
  'blake2b-88': 0xb20b,
  'blake2b-96': 0xb20c,
  'blake2b-104': 0xb20d,
  'blake2b-112': 0xb20e,
  'blake2b-120': 0xb20f,
  'blake2b-128': 0xb210,
  'blake2b-136': 0xb211,
  'blake2b-144': 0xb212,
  'blake2b-152': 0xb213,
  'blake2b-160': 0xb214,
  'blake2b-168': 0xb215,
  'blake2b-176': 0xb216,
  'blake2b-184': 0xb217,
  'blake2b-192': 0xb218,
  'blake2b-200': 0xb219,
  'blake2b-208': 0xb21a,
  'blake2b-216': 0xb21b,
  'blake2b-224': 0xb21c,
  'blake2b-232': 0xb21d,
  'blake2b-240': 0xb21e,
  'blake2b-248': 0xb21f,
  'blake2b-256': 0xb220,
  'blake2b-264': 0xb221,
  'blake2b-272': 0xb222,
  'blake2b-280': 0xb223,
  'blake2b-288': 0xb224,
  'blake2b-296': 0xb225,
  'blake2b-304': 0xb226,
  'blake2b-312': 0xb227,
  'blake2b-320': 0xb228,
  'blake2b-328': 0xb229,
  'blake2b-336': 0xb22a,
  'blake2b-344': 0xb22b,
  'blake2b-352': 0xb22c,
  'blake2b-360': 0xb22d,
  'blake2b-368': 0xb22e,
  'blake2b-376': 0xb22f,
  'blake2b-384': 0xb230,
  'blake2b-392': 0xb231,
  'blake2b-400': 0xb232,
  'blake2b-408': 0xb233,
  'blake2b-416': 0xb234,
  'blake2b-424': 0xb235,
  'blake2b-432': 0xb236,
  'blake2b-440': 0xb237,
  'blake2b-448': 0xb238,
  'blake2b-456': 0xb239,
  'blake2b-464': 0xb23a,
  'blake2b-472': 0xb23b,
  'blake2b-480': 0xb23c,
  'blake2b-488': 0xb23d,
  'blake2b-496': 0xb23e,
  'blake2b-504': 0xb23f,
  'blake2b-512': 0xb240,
  'blake2s-8': 0xb241,
  'blake2s-16': 0xb242,
  'blake2s-24': 0xb243,
  'blake2s-32': 0xb244,
  'blake2s-40': 0xb245,
  'blake2s-48': 0xb246,
  'blake2s-56': 0xb247,
  'blake2s-64': 0xb248,
  'blake2s-72': 0xb249,
  'blake2s-80': 0xb24a,
  'blake2s-88': 0xb24b,
  'blake2s-96': 0xb24c,
  'blake2s-104': 0xb24d,
  'blake2s-112': 0xb24e,
  'blake2s-120': 0xb24f,
  'blake2s-128': 0xb250,
  'blake2s-136': 0xb251,
  'blake2s-144': 0xb252,
  'blake2s-152': 0xb253,
  'blake2s-160': 0xb254,
  'blake2s-168': 0xb255,
  'blake2s-176': 0xb256,
  'blake2s-184': 0xb257,
  'blake2s-192': 0xb258,
  'blake2s-200': 0xb259,
  'blake2s-208': 0xb25a,
  'blake2s-216': 0xb25b,
  'blake2s-224': 0xb25c,
  'blake2s-232': 0xb25d,
  'blake2s-240': 0xb25e,
  'blake2s-248': 0xb25f,
  'blake2s-256': 0xb260,
  'Skein256-8': 0xb301,
  'Skein256-16': 0xb302,
  'Skein256-24': 0xb303,
  'Skein256-32': 0xb304,
  'Skein256-40': 0xb305,
  'Skein256-48': 0xb306,
  'Skein256-56': 0xb307,
  'Skein256-64': 0xb308,
  'Skein256-72': 0xb309,
  'Skein256-80': 0xb30a,
  'Skein256-88': 0xb30b,
  'Skein256-96': 0xb30c,
  'Skein256-104': 0xb30d,
  'Skein256-112': 0xb30e,
  'Skein256-120': 0xb30f,
  'Skein256-128': 0xb310,
  'Skein256-136': 0xb311,
  'Skein256-144': 0xb312,
  'Skein256-152': 0xb313,
  'Skein256-160': 0xb314,
  'Skein256-168': 0xb315,
  'Skein256-176': 0xb316,
  'Skein256-184': 0xb317,
  'Skein256-192': 0xb318,
  'Skein256-200': 0xb319,
  'Skein256-208': 0xb31a,
  'Skein256-216': 0xb31b,
  'Skein256-224': 0xb31c,
  'Skein256-232': 0xb31d,
  'Skein256-240': 0xb31e,
  'Skein256-248': 0xb31f,
  'Skein256-256': 0xb320,
  'Skein512-8': 0xb321,
  'Skein512-16': 0xb322,
  'Skein512-24': 0xb323,
  'Skein512-32': 0xb324,
  'Skein512-40': 0xb325,
  'Skein512-48': 0xb326,
  'Skein512-56': 0xb327,
  'Skein512-64': 0xb328,
  'Skein512-72': 0xb329,
  'Skein512-80': 0xb32a,
  'Skein512-88': 0xb32b,
  'Skein512-96': 0xb32c,
  'Skein512-104': 0xb32d,
  'Skein512-112': 0xb32e,
  'Skein512-120': 0xb32f,
  'Skein512-128': 0xb330,
  'Skein512-136': 0xb331,
  'Skein512-144': 0xb332,
  'Skein512-152': 0xb333,
  'Skein512-160': 0xb334,
  'Skein512-168': 0xb335,
  'Skein512-176': 0xb336,
  'Skein512-184': 0xb337,
  'Skein512-192': 0xb338,
  'Skein512-200': 0xb339,
  'Skein512-208': 0xb33a,
  'Skein512-216': 0xb33b,
  'Skein512-224': 0xb33c,
  'Skein512-232': 0xb33d,
  'Skein512-240': 0xb33e,
  'Skein512-248': 0xb33f,
  'Skein512-256': 0xb340,
  'Skein512-264': 0xb341,
  'Skein512-272': 0xb342,
  'Skein512-280': 0xb343,
  'Skein512-288': 0xb344,
  'Skein512-296': 0xb345,
  'Skein512-304': 0xb346,
  'Skein512-312': 0xb347,
  'Skein512-320': 0xb348,
  'Skein512-328': 0xb349,
  'Skein512-336': 0xb34a,
  'Skein512-344': 0xb34b,
  'Skein512-352': 0xb34c,
  'Skein512-360': 0xb34d,
  'Skein512-368': 0xb34e,
  'Skein512-376': 0xb34f,
  'Skein512-384': 0xb350,
  'Skein512-392': 0xb351,
  'Skein512-400': 0xb352,
  'Skein512-408': 0xb353,
  'Skein512-416': 0xb354,
  'Skein512-424': 0xb355,
  'Skein512-432': 0xb356,
  'Skein512-440': 0xb357,
  'Skein512-448': 0xb358,
  'Skein512-456': 0xb359,
  'Skein512-464': 0xb35a,
  'Skein512-472': 0xb35b,
  'Skein512-480': 0xb35c,
  'Skein512-488': 0xb35d,
  'Skein512-496': 0xb35e,
  'Skein512-504': 0xb35f,
  'Skein512-512': 0xb360,
  'Skein1024-8': 0xb361,
  'Skein1024-16': 0xb362,
  'Skein1024-24': 0xb363,
  'Skein1024-32': 0xb364,
  'Skein1024-40': 0xb365,
  'Skein1024-48': 0xb366,
  'Skein1024-56': 0xb367,
  'Skein1024-64': 0xb368,
  'Skein1024-72': 0xb369,
  'Skein1024-80': 0xb36a,
  'Skein1024-88': 0xb36b,
  'Skein1024-96': 0xb36c,
  'Skein1024-104': 0xb36d,
  'Skein1024-112': 0xb36e,
  'Skein1024-120': 0xb36f,
  'Skein1024-128': 0xb370,
  'Skein1024-136': 0xb371,
  'Skein1024-144': 0xb372,
  'Skein1024-152': 0xb373,
  'Skein1024-160': 0xb374,
  'Skein1024-168': 0xb375,
  'Skein1024-176': 0xb376,
  'Skein1024-184': 0xb377,
  'Skein1024-192': 0xb378,
  'Skein1024-200': 0xb379,
  'Skein1024-208': 0xb37a,
  'Skein1024-216': 0xb37b,
  'Skein1024-224': 0xb37c,
  'Skein1024-232': 0xb37d,
  'Skein1024-240': 0xb37e,
  'Skein1024-248': 0xb37f,
  'Skein1024-256': 0xb380,
  'Skein1024-264': 0xb381,
  'Skein1024-272': 0xb382,
  'Skein1024-280': 0xb383,
  'Skein1024-288': 0xb384,
  'Skein1024-296': 0xb385,
  'Skein1024-304': 0xb386,
  'Skein1024-312': 0xb387,
  'Skein1024-320': 0xb388,
  'Skein1024-328': 0xb389,
  'Skein1024-336': 0xb38a,
  'Skein1024-344': 0xb38b,
  'Skein1024-352': 0xb38c,
  'Skein1024-360': 0xb38d,
  'Skein1024-368': 0xb38e,
  'Skein1024-376': 0xb38f,
  'Skein1024-384': 0xb390,
  'Skein1024-392': 0xb391,
  'Skein1024-400': 0xb392,
  'Skein1024-408': 0xb393,
  'Skein1024-416': 0xb394,
  'Skein1024-424': 0xb395,
  'Skein1024-432': 0xb396,
  'Skein1024-440': 0xb397,
  'Skein1024-448': 0xb398,
  'Skein1024-456': 0xb399,
  'Skein1024-464': 0xb39a,
  'Skein1024-472': 0xb39b,
  'Skein1024-480': 0xb39c,
  'Skein1024-488': 0xb39d,
  'Skein1024-496': 0xb39e,
  'Skein1024-504': 0xb39f,
  'Skein1024-512': 0xb3a0,
  'Skein1024-520': 0xb3a1,
  'Skein1024-528': 0xb3a2,
  'Skein1024-536': 0xb3a3,
  'Skein1024-544': 0xb3a4,
  'Skein1024-552': 0xb3a5,
  'Skein1024-560': 0xb3a6,
  'Skein1024-568': 0xb3a7,
  'Skein1024-576': 0xb3a8,
  'Skein1024-584': 0xb3a9,
  'Skein1024-592': 0xb3aa,
  'Skein1024-600': 0xb3ab,
  'Skein1024-608': 0xb3ac,
  'Skein1024-616': 0xb3ad,
  'Skein1024-624': 0xb3ae,
  'Skein1024-632': 0xb3af,
  'Skein1024-640': 0xb3b0,
  'Skein1024-648': 0xb3b1,
  'Skein1024-656': 0xb3b2,
  'Skein1024-664': 0xb3b3,
  'Skein1024-672': 0xb3b4,
  'Skein1024-680': 0xb3b5,
  'Skein1024-688': 0xb3b6,
  'Skein1024-696': 0xb3b7,
  'Skein1024-704': 0xb3b8,
  'Skein1024-712': 0xb3b9,
  'Skein1024-720': 0xb3ba,
  'Skein1024-728': 0xb3bb,
  'Skein1024-736': 0xb3bc,
  'Skein1024-744': 0xb3bd,
  'Skein1024-752': 0xb3be,
  'Skein1024-760': 0xb3bf,
  'Skein1024-768': 0xb3c0,
  'Skein1024-776': 0xb3c1,
  'Skein1024-784': 0xb3c2,
  'Skein1024-792': 0xb3c3,
  'Skein1024-800': 0xb3c4,
  'Skein1024-808': 0xb3c5,
  'Skein1024-816': 0xb3c6,
  'Skein1024-824': 0xb3c7,
  'Skein1024-832': 0xb3c8,
  'Skein1024-840': 0xb3c9,
  'Skein1024-848': 0xb3ca,
  'Skein1024-856': 0xb3cb,
  'Skein1024-864': 0xb3cc,
  'Skein1024-872': 0xb3cd,
  'Skein1024-880': 0xb3ce,
  'Skein1024-888': 0xb3cf,
  'Skein1024-896': 0xb3d0,
  'Skein1024-904': 0xb3d1,
  'Skein1024-912': 0xb3d2,
  'Skein1024-920': 0xb3d3,
  'Skein1024-928': 0xb3d4,
  'Skein1024-936': 0xb3d5,
  'Skein1024-944': 0xb3d6,
  'Skein1024-952': 0xb3d7,
  'Skein1024-960': 0xb3d8,
  'Skein1024-968': 0xb3d9,
  'Skein1024-976': 0xb3da,
  'Skein1024-984': 0xb3db,
  'Skein1024-992': 0xb3dc,
  'Skein1024-1000': 0xb3dd,
  'Skein1024-1008': 0xb3de,
  'Skein1024-1016': 0xb3df,
  'Skein1024-1024': 0xb3e0
});
exports.codes = Object.freeze({
  0x0: 'identity',
  // sha family
  0x11: 'sha1',
  0x12: 'sha2-256',
  0x13: 'sha2-512',
  0x56: 'dbl-sha2-256',
  0x17: 'sha3-224',
  0x16: 'sha3-256',
  0x15: 'sha3-384',
  0x14: 'sha3-512',
  0x18: 'shake-128',
  0x19: 'shake-256',
  0x1A: 'keccak-224',
  0x1B: 'keccak-256',
  0x1C: 'keccak-384',
  0x1D: 'keccak-512',
  0x22: 'murmur3-128',
  0x23: 'murmur3-32',
  // blake2
  0xb201: 'blake2b-8',
  0xb202: 'blake2b-16',
  0xb203: 'blake2b-24',
  0xb204: 'blake2b-32',
  0xb205: 'blake2b-40',
  0xb206: 'blake2b-48',
  0xb207: 'blake2b-56',
  0xb208: 'blake2b-64',
  0xb209: 'blake2b-72',
  0xb20a: 'blake2b-80',
  0xb20b: 'blake2b-88',
  0xb20c: 'blake2b-96',
  0xb20d: 'blake2b-104',
  0xb20e: 'blake2b-112',
  0xb20f: 'blake2b-120',
  0xb210: 'blake2b-128',
  0xb211: 'blake2b-136',
  0xb212: 'blake2b-144',
  0xb213: 'blake2b-152',
  0xb214: 'blake2b-160',
  0xb215: 'blake2b-168',
  0xb216: 'blake2b-176',
  0xb217: 'blake2b-184',
  0xb218: 'blake2b-192',
  0xb219: 'blake2b-200',
  0xb21a: 'blake2b-208',
  0xb21b: 'blake2b-216',
  0xb21c: 'blake2b-224',
  0xb21d: 'blake2b-232',
  0xb21e: 'blake2b-240',
  0xb21f: 'blake2b-248',
  0xb220: 'blake2b-256',
  0xb221: 'blake2b-264',
  0xb222: 'blake2b-272',
  0xb223: 'blake2b-280',
  0xb224: 'blake2b-288',
  0xb225: 'blake2b-296',
  0xb226: 'blake2b-304',
  0xb227: 'blake2b-312',
  0xb228: 'blake2b-320',
  0xb229: 'blake2b-328',
  0xb22a: 'blake2b-336',
  0xb22b: 'blake2b-344',
  0xb22c: 'blake2b-352',
  0xb22d: 'blake2b-360',
  0xb22e: 'blake2b-368',
  0xb22f: 'blake2b-376',
  0xb230: 'blake2b-384',
  0xb231: 'blake2b-392',
  0xb232: 'blake2b-400',
  0xb233: 'blake2b-408',
  0xb234: 'blake2b-416',
  0xb235: 'blake2b-424',
  0xb236: 'blake2b-432',
  0xb237: 'blake2b-440',
  0xb238: 'blake2b-448',
  0xb239: 'blake2b-456',
  0xb23a: 'blake2b-464',
  0xb23b: 'blake2b-472',
  0xb23c: 'blake2b-480',
  0xb23d: 'blake2b-488',
  0xb23e: 'blake2b-496',
  0xb23f: 'blake2b-504',
  0xb240: 'blake2b-512',
  0xb241: 'blake2s-8',
  0xb242: 'blake2s-16',
  0xb243: 'blake2s-24',
  0xb244: 'blake2s-32',
  0xb245: 'blake2s-40',
  0xb246: 'blake2s-48',
  0xb247: 'blake2s-56',
  0xb248: 'blake2s-64',
  0xb249: 'blake2s-72',
  0xb24a: 'blake2s-80',
  0xb24b: 'blake2s-88',
  0xb24c: 'blake2s-96',
  0xb24d: 'blake2s-104',
  0xb24e: 'blake2s-112',
  0xb24f: 'blake2s-120',
  0xb250: 'blake2s-128',
  0xb251: 'blake2s-136',
  0xb252: 'blake2s-144',
  0xb253: 'blake2s-152',
  0xb254: 'blake2s-160',
  0xb255: 'blake2s-168',
  0xb256: 'blake2s-176',
  0xb257: 'blake2s-184',
  0xb258: 'blake2s-192',
  0xb259: 'blake2s-200',
  0xb25a: 'blake2s-208',
  0xb25b: 'blake2s-216',
  0xb25c: 'blake2s-224',
  0xb25d: 'blake2s-232',
  0xb25e: 'blake2s-240',
  0xb25f: 'blake2s-248',
  0xb260: 'blake2s-256',
  // skein
  0xb301: 'Skein256-8',
  0xb302: 'Skein256-16',
  0xb303: 'Skein256-24',
  0xb304: 'Skein256-32',
  0xb305: 'Skein256-40',
  0xb306: 'Skein256-48',
  0xb307: 'Skein256-56',
  0xb308: 'Skein256-64',
  0xb309: 'Skein256-72',
  0xb30a: 'Skein256-80',
  0xb30b: 'Skein256-88',
  0xb30c: 'Skein256-96',
  0xb30d: 'Skein256-104',
  0xb30e: 'Skein256-112',
  0xb30f: 'Skein256-120',
  0xb310: 'Skein256-128',
  0xb311: 'Skein256-136',
  0xb312: 'Skein256-144',
  0xb313: 'Skein256-152',
  0xb314: 'Skein256-160',
  0xb315: 'Skein256-168',
  0xb316: 'Skein256-176',
  0xb317: 'Skein256-184',
  0xb318: 'Skein256-192',
  0xb319: 'Skein256-200',
  0xb31a: 'Skein256-208',
  0xb31b: 'Skein256-216',
  0xb31c: 'Skein256-224',
  0xb31d: 'Skein256-232',
  0xb31e: 'Skein256-240',
  0xb31f: 'Skein256-248',
  0xb320: 'Skein256-256',
  0xb321: 'Skein512-8',
  0xb322: 'Skein512-16',
  0xb323: 'Skein512-24',
  0xb324: 'Skein512-32',
  0xb325: 'Skein512-40',
  0xb326: 'Skein512-48',
  0xb327: 'Skein512-56',
  0xb328: 'Skein512-64',
  0xb329: 'Skein512-72',
  0xb32a: 'Skein512-80',
  0xb32b: 'Skein512-88',
  0xb32c: 'Skein512-96',
  0xb32d: 'Skein512-104',
  0xb32e: 'Skein512-112',
  0xb32f: 'Skein512-120',
  0xb330: 'Skein512-128',
  0xb331: 'Skein512-136',
  0xb332: 'Skein512-144',
  0xb333: 'Skein512-152',
  0xb334: 'Skein512-160',
  0xb335: 'Skein512-168',
  0xb336: 'Skein512-176',
  0xb337: 'Skein512-184',
  0xb338: 'Skein512-192',
  0xb339: 'Skein512-200',
  0xb33a: 'Skein512-208',
  0xb33b: 'Skein512-216',
  0xb33c: 'Skein512-224',
  0xb33d: 'Skein512-232',
  0xb33e: 'Skein512-240',
  0xb33f: 'Skein512-248',
  0xb340: 'Skein512-256',
  0xb341: 'Skein512-264',
  0xb342: 'Skein512-272',
  0xb343: 'Skein512-280',
  0xb344: 'Skein512-288',
  0xb345: 'Skein512-296',
  0xb346: 'Skein512-304',
  0xb347: 'Skein512-312',
  0xb348: 'Skein512-320',
  0xb349: 'Skein512-328',
  0xb34a: 'Skein512-336',
  0xb34b: 'Skein512-344',
  0xb34c: 'Skein512-352',
  0xb34d: 'Skein512-360',
  0xb34e: 'Skein512-368',
  0xb34f: 'Skein512-376',
  0xb350: 'Skein512-384',
  0xb351: 'Skein512-392',
  0xb352: 'Skein512-400',
  0xb353: 'Skein512-408',
  0xb354: 'Skein512-416',
  0xb355: 'Skein512-424',
  0xb356: 'Skein512-432',
  0xb357: 'Skein512-440',
  0xb358: 'Skein512-448',
  0xb359: 'Skein512-456',
  0xb35a: 'Skein512-464',
  0xb35b: 'Skein512-472',
  0xb35c: 'Skein512-480',
  0xb35d: 'Skein512-488',
  0xb35e: 'Skein512-496',
  0xb35f: 'Skein512-504',
  0xb360: 'Skein512-512',
  0xb361: 'Skein1024-8',
  0xb362: 'Skein1024-16',
  0xb363: 'Skein1024-24',
  0xb364: 'Skein1024-32',
  0xb365: 'Skein1024-40',
  0xb366: 'Skein1024-48',
  0xb367: 'Skein1024-56',
  0xb368: 'Skein1024-64',
  0xb369: 'Skein1024-72',
  0xb36a: 'Skein1024-80',
  0xb36b: 'Skein1024-88',
  0xb36c: 'Skein1024-96',
  0xb36d: 'Skein1024-104',
  0xb36e: 'Skein1024-112',
  0xb36f: 'Skein1024-120',
  0xb370: 'Skein1024-128',
  0xb371: 'Skein1024-136',
  0xb372: 'Skein1024-144',
  0xb373: 'Skein1024-152',
  0xb374: 'Skein1024-160',
  0xb375: 'Skein1024-168',
  0xb376: 'Skein1024-176',
  0xb377: 'Skein1024-184',
  0xb378: 'Skein1024-192',
  0xb379: 'Skein1024-200',
  0xb37a: 'Skein1024-208',
  0xb37b: 'Skein1024-216',
  0xb37c: 'Skein1024-224',
  0xb37d: 'Skein1024-232',
  0xb37e: 'Skein1024-240',
  0xb37f: 'Skein1024-248',
  0xb380: 'Skein1024-256',
  0xb381: 'Skein1024-264',
  0xb382: 'Skein1024-272',
  0xb383: 'Skein1024-280',
  0xb384: 'Skein1024-288',
  0xb385: 'Skein1024-296',
  0xb386: 'Skein1024-304',
  0xb387: 'Skein1024-312',
  0xb388: 'Skein1024-320',
  0xb389: 'Skein1024-328',
  0xb38a: 'Skein1024-336',
  0xb38b: 'Skein1024-344',
  0xb38c: 'Skein1024-352',
  0xb38d: 'Skein1024-360',
  0xb38e: 'Skein1024-368',
  0xb38f: 'Skein1024-376',
  0xb390: 'Skein1024-384',
  0xb391: 'Skein1024-392',
  0xb392: 'Skein1024-400',
  0xb393: 'Skein1024-408',
  0xb394: 'Skein1024-416',
  0xb395: 'Skein1024-424',
  0xb396: 'Skein1024-432',
  0xb397: 'Skein1024-440',
  0xb398: 'Skein1024-448',
  0xb399: 'Skein1024-456',
  0xb39a: 'Skein1024-464',
  0xb39b: 'Skein1024-472',
  0xb39c: 'Skein1024-480',
  0xb39d: 'Skein1024-488',
  0xb39e: 'Skein1024-496',
  0xb39f: 'Skein1024-504',
  0xb3a0: 'Skein1024-512',
  0xb3a1: 'Skein1024-520',
  0xb3a2: 'Skein1024-528',
  0xb3a3: 'Skein1024-536',
  0xb3a4: 'Skein1024-544',
  0xb3a5: 'Skein1024-552',
  0xb3a6: 'Skein1024-560',
  0xb3a7: 'Skein1024-568',
  0xb3a8: 'Skein1024-576',
  0xb3a9: 'Skein1024-584',
  0xb3aa: 'Skein1024-592',
  0xb3ab: 'Skein1024-600',
  0xb3ac: 'Skein1024-608',
  0xb3ad: 'Skein1024-616',
  0xb3ae: 'Skein1024-624',
  0xb3af: 'Skein1024-632',
  0xb3b0: 'Skein1024-640',
  0xb3b1: 'Skein1024-648',
  0xb3b2: 'Skein1024-656',
  0xb3b3: 'Skein1024-664',
  0xb3b4: 'Skein1024-672',
  0xb3b5: 'Skein1024-680',
  0xb3b6: 'Skein1024-688',
  0xb3b7: 'Skein1024-696',
  0xb3b8: 'Skein1024-704',
  0xb3b9: 'Skein1024-712',
  0xb3ba: 'Skein1024-720',
  0xb3bb: 'Skein1024-728',
  0xb3bc: 'Skein1024-736',
  0xb3bd: 'Skein1024-744',
  0xb3be: 'Skein1024-752',
  0xb3bf: 'Skein1024-760',
  0xb3c0: 'Skein1024-768',
  0xb3c1: 'Skein1024-776',
  0xb3c2: 'Skein1024-784',
  0xb3c3: 'Skein1024-792',
  0xb3c4: 'Skein1024-800',
  0xb3c5: 'Skein1024-808',
  0xb3c6: 'Skein1024-816',
  0xb3c7: 'Skein1024-824',
  0xb3c8: 'Skein1024-832',
  0xb3c9: 'Skein1024-840',
  0xb3ca: 'Skein1024-848',
  0xb3cb: 'Skein1024-856',
  0xb3cc: 'Skein1024-864',
  0xb3cd: 'Skein1024-872',
  0xb3ce: 'Skein1024-880',
  0xb3cf: 'Skein1024-888',
  0xb3d0: 'Skein1024-896',
  0xb3d1: 'Skein1024-904',
  0xb3d2: 'Skein1024-912',
  0xb3d3: 'Skein1024-920',
  0xb3d4: 'Skein1024-928',
  0xb3d5: 'Skein1024-936',
  0xb3d6: 'Skein1024-944',
  0xb3d7: 'Skein1024-952',
  0xb3d8: 'Skein1024-960',
  0xb3d9: 'Skein1024-968',
  0xb3da: 'Skein1024-976',
  0xb3db: 'Skein1024-984',
  0xb3dc: 'Skein1024-992',
  0xb3dd: 'Skein1024-1000',
  0xb3de: 'Skein1024-1008',
  0xb3df: 'Skein1024-1016',
  0xb3e0: 'Skein1024-1024'
});
exports.defaultLengths = Object.freeze({
  0x11: 20,
  0x12: 32,
  0x13: 64,
  0x56: 32,
  0x17: 28,
  0x16: 32,
  0x15: 48,
  0x14: 64,
  0x18: 32,
  0x19: 64,
  0x1A: 28,
  0x1B: 32,
  0x1C: 48,
  0x1D: 64,
  0x22: 32,
  0xb201: 0x01,
  0xb202: 0x02,
  0xb203: 0x03,
  0xb204: 0x04,
  0xb205: 0x05,
  0xb206: 0x06,
  0xb207: 0x07,
  0xb208: 0x08,
  0xb209: 0x09,
  0xb20a: 0x0a,
  0xb20b: 0x0b,
  0xb20c: 0x0c,
  0xb20d: 0x0d,
  0xb20e: 0x0e,
  0xb20f: 0x0f,
  0xb210: 0x10,
  0xb211: 0x11,
  0xb212: 0x12,
  0xb213: 0x13,
  0xb214: 0x14,
  0xb215: 0x15,
  0xb216: 0x16,
  0xb217: 0x17,
  0xb218: 0x18,
  0xb219: 0x19,
  0xb21a: 0x1a,
  0xb21b: 0x1b,
  0xb21c: 0x1c,
  0xb21d: 0x1d,
  0xb21e: 0x1e,
  0xb21f: 0x1f,
  0xb220: 0x20,
  0xb221: 0x21,
  0xb222: 0x22,
  0xb223: 0x23,
  0xb224: 0x24,
  0xb225: 0x25,
  0xb226: 0x26,
  0xb227: 0x27,
  0xb228: 0x28,
  0xb229: 0x29,
  0xb22a: 0x2a,
  0xb22b: 0x2b,
  0xb22c: 0x2c,
  0xb22d: 0x2d,
  0xb22e: 0x2e,
  0xb22f: 0x2f,
  0xb230: 0x30,
  0xb231: 0x31,
  0xb232: 0x32,
  0xb233: 0x33,
  0xb234: 0x34,
  0xb235: 0x35,
  0xb236: 0x36,
  0xb237: 0x37,
  0xb238: 0x38,
  0xb239: 0x39,
  0xb23a: 0x3a,
  0xb23b: 0x3b,
  0xb23c: 0x3c,
  0xb23d: 0x3d,
  0xb23e: 0x3e,
  0xb23f: 0x3f,
  0xb240: 0x40,
  0xb241: 0x01,
  0xb242: 0x02,
  0xb243: 0x03,
  0xb244: 0x04,
  0xb245: 0x05,
  0xb246: 0x06,
  0xb247: 0x07,
  0xb248: 0x08,
  0xb249: 0x09,
  0xb24a: 0x0a,
  0xb24b: 0x0b,
  0xb24c: 0x0c,
  0xb24d: 0x0d,
  0xb24e: 0x0e,
  0xb24f: 0x0f,
  0xb250: 0x10,
  0xb251: 0x11,
  0xb252: 0x12,
  0xb253: 0x13,
  0xb254: 0x14,
  0xb255: 0x15,
  0xb256: 0x16,
  0xb257: 0x17,
  0xb258: 0x18,
  0xb259: 0x19,
  0xb25a: 0x1a,
  0xb25b: 0x1b,
  0xb25c: 0x1c,
  0xb25d: 0x1d,
  0xb25e: 0x1e,
  0xb25f: 0x1f,
  0xb260: 0x20,
  0xb301: 0x01,
  0xb302: 0x02,
  0xb303: 0x03,
  0xb304: 0x04,
  0xb305: 0x05,
  0xb306: 0x06,
  0xb307: 0x07,
  0xb308: 0x08,
  0xb309: 0x09,
  0xb30a: 0x0a,
  0xb30b: 0x0b,
  0xb30c: 0x0c,
  0xb30d: 0x0d,
  0xb30e: 0x0e,
  0xb30f: 0x0f,
  0xb310: 0x10,
  0xb311: 0x11,
  0xb312: 0x12,
  0xb313: 0x13,
  0xb314: 0x14,
  0xb315: 0x15,
  0xb316: 0x16,
  0xb317: 0x17,
  0xb318: 0x18,
  0xb319: 0x19,
  0xb31a: 0x1a,
  0xb31b: 0x1b,
  0xb31c: 0x1c,
  0xb31d: 0x1d,
  0xb31e: 0x1e,
  0xb31f: 0x1f,
  0xb320: 0x20,
  0xb321: 0x01,
  0xb322: 0x02,
  0xb323: 0x03,
  0xb324: 0x04,
  0xb325: 0x05,
  0xb326: 0x06,
  0xb327: 0x07,
  0xb328: 0x08,
  0xb329: 0x09,
  0xb32a: 0x0a,
  0xb32b: 0x0b,
  0xb32c: 0x0c,
  0xb32d: 0x0d,
  0xb32e: 0x0e,
  0xb32f: 0x0f,
  0xb330: 0x10,
  0xb331: 0x11,
  0xb332: 0x12,
  0xb333: 0x13,
  0xb334: 0x14,
  0xb335: 0x15,
  0xb336: 0x16,
  0xb337: 0x17,
  0xb338: 0x18,
  0xb339: 0x19,
  0xb33a: 0x1a,
  0xb33b: 0x1b,
  0xb33c: 0x1c,
  0xb33d: 0x1d,
  0xb33e: 0x1e,
  0xb33f: 0x1f,
  0xb340: 0x20,
  0xb341: 0x21,
  0xb342: 0x22,
  0xb343: 0x23,
  0xb344: 0x24,
  0xb345: 0x25,
  0xb346: 0x26,
  0xb347: 0x27,
  0xb348: 0x28,
  0xb349: 0x29,
  0xb34a: 0x2a,
  0xb34b: 0x2b,
  0xb34c: 0x2c,
  0xb34d: 0x2d,
  0xb34e: 0x2e,
  0xb34f: 0x2f,
  0xb350: 0x30,
  0xb351: 0x31,
  0xb352: 0x32,
  0xb353: 0x33,
  0xb354: 0x34,
  0xb355: 0x35,
  0xb356: 0x36,
  0xb357: 0x37,
  0xb358: 0x38,
  0xb359: 0x39,
  0xb35a: 0x3a,
  0xb35b: 0x3b,
  0xb35c: 0x3c,
  0xb35d: 0x3d,
  0xb35e: 0x3e,
  0xb35f: 0x3f,
  0xb360: 0x40,
  0xb361: 0x01,
  0xb362: 0x02,
  0xb363: 0x03,
  0xb364: 0x04,
  0xb365: 0x05,
  0xb366: 0x06,
  0xb367: 0x07,
  0xb368: 0x08,
  0xb369: 0x09,
  0xb36a: 0x0a,
  0xb36b: 0x0b,
  0xb36c: 0x0c,
  0xb36d: 0x0d,
  0xb36e: 0x0e,
  0xb36f: 0x0f,
  0xb370: 0x10,
  0xb371: 0x11,
  0xb372: 0x12,
  0xb373: 0x13,
  0xb374: 0x14,
  0xb375: 0x15,
  0xb376: 0x16,
  0xb377: 0x17,
  0xb378: 0x18,
  0xb379: 0x19,
  0xb37a: 0x1a,
  0xb37b: 0x1b,
  0xb37c: 0x1c,
  0xb37d: 0x1d,
  0xb37e: 0x1e,
  0xb37f: 0x1f,
  0xb380: 0x20,
  0xb381: 0x21,
  0xb382: 0x22,
  0xb383: 0x23,
  0xb384: 0x24,
  0xb385: 0x25,
  0xb386: 0x26,
  0xb387: 0x27,
  0xb388: 0x28,
  0xb389: 0x29,
  0xb38a: 0x2a,
  0xb38b: 0x2b,
  0xb38c: 0x2c,
  0xb38d: 0x2d,
  0xb38e: 0x2e,
  0xb38f: 0x2f,
  0xb390: 0x30,
  0xb391: 0x31,
  0xb392: 0x32,
  0xb393: 0x33,
  0xb394: 0x34,
  0xb395: 0x35,
  0xb396: 0x36,
  0xb397: 0x37,
  0xb398: 0x38,
  0xb399: 0x39,
  0xb39a: 0x3a,
  0xb39b: 0x3b,
  0xb39c: 0x3c,
  0xb39d: 0x3d,
  0xb39e: 0x3e,
  0xb39f: 0x3f,
  0xb3a0: 0x40,
  0xb3a1: 0x41,
  0xb3a2: 0x42,
  0xb3a3: 0x43,
  0xb3a4: 0x44,
  0xb3a5: 0x45,
  0xb3a6: 0x46,
  0xb3a7: 0x47,
  0xb3a8: 0x48,
  0xb3a9: 0x49,
  0xb3aa: 0x4a,
  0xb3ab: 0x4b,
  0xb3ac: 0x4c,
  0xb3ad: 0x4d,
  0xb3ae: 0x4e,
  0xb3af: 0x4f,
  0xb3b0: 0x50,
  0xb3b1: 0x51,
  0xb3b2: 0x52,
  0xb3b3: 0x53,
  0xb3b4: 0x54,
  0xb3b5: 0x55,
  0xb3b6: 0x56,
  0xb3b7: 0x57,
  0xb3b8: 0x58,
  0xb3b9: 0x59,
  0xb3ba: 0x5a,
  0xb3bb: 0x5b,
  0xb3bc: 0x5c,
  0xb3bd: 0x5d,
  0xb3be: 0x5e,
  0xb3bf: 0x5f,
  0xb3c0: 0x60,
  0xb3c1: 0x61,
  0xb3c2: 0x62,
  0xb3c3: 0x63,
  0xb3c4: 0x64,
  0xb3c5: 0x65,
  0xb3c6: 0x66,
  0xb3c7: 0x67,
  0xb3c8: 0x68,
  0xb3c9: 0x69,
  0xb3ca: 0x6a,
  0xb3cb: 0x6b,
  0xb3cc: 0x6c,
  0xb3cd: 0x6d,
  0xb3ce: 0x6e,
  0xb3cf: 0x6f,
  0xb3d0: 0x70,
  0xb3d1: 0x71,
  0xb3d2: 0x72,
  0xb3d3: 0x73,
  0xb3d4: 0x74,
  0xb3d5: 0x75,
  0xb3d6: 0x76,
  0xb3d7: 0x77,
  0xb3d8: 0x78,
  0xb3d9: 0x79,
  0xb3da: 0x7a,
  0xb3db: 0x7b,
  0xb3dc: 0x7c,
  0xb3dd: 0x7d,
  0xb3de: 0x7e,
  0xb3df: 0x7f,
  0xb3e0: 0x80
});

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = encode;
var MSB = 0x80,
    REST = 0x7F,
    MSBALL = ~REST,
    INT = Math.pow(2, 31);

function encode(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;

  while (num >= INT) {
    out[offset++] = num & 0xFF | MSB;
    num /= 128;
  }

  while (num & MSBALL) {
    out[offset++] = num & 0xFF | MSB;
    num >>>= 7;
  }

  out[offset] = num | 0;
  encode.bytes = offset - oldOffset + 1;
  return out;
}

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = read;
var MSB = 0x80,
    REST = 0x7F;

function read(buf, offset) {
  var res = 0,
      offset = offset || 0,
      shift = 0,
      counter = offset,
      b,
      l = buf.length;

  do {
    if (counter >= l) {
      read.bytes = 0;
      throw new RangeError('Could not decode varint');
    }

    b = buf[counter++];
    res += shift < 28 ? (b & REST) << shift : (b & REST) * Math.pow(2, shift);
    shift += 7;
  } while (b >= MSB);

  read.bytes = counter - offset;
  return res;
}

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var N1 = Math.pow(2, 7);
var N2 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);

module.exports = function (value) {
  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.
 * @module Multibase
 */


var constants = __webpack_require__(200);

exports = module.exports = multibase;
exports.encode = encode;
exports.decode = decode;
exports.isEncoded = isEncoded;
exports.names = Object.freeze(Object.keys(constants.names));
exports.codes = Object.freeze(Object.keys(constants.codes));
var errNotSupported = new Error('Unsupported encoding');
/**
 * Create a new buffer with the multibase varint+code.
 *
 * @param {string|number} nameOrCode - The multibase name or code number.
 * @param {Buffer} buf - The data to be prefixed with multibase.
 * @memberof Multibase
 * @returns {Buffer}
 */

function multibase(nameOrCode, buf) {
  if (!buf) {
    throw new Error('requires an encoded buffer');
  }

  var base = getBase(nameOrCode);
  var codeBuf = Buffer.from(base.code);
  var name = base.name;
  validEncode(name, buf);
  return Buffer.concat([codeBuf, buf]);
}
/**
 * Encode data with the specified base and add the multibase prefix.
 *
 * @param {string|number} nameOrCode - The multibase name or code number.
 * @param {Buffer} buf - The data to be encoded.
 * @returns {Buffer}
 * @memberof Multibase
 */


function encode(nameOrCode, buf) {
  var base = getBase(nameOrCode);
  var name = base.name;
  return multibase(name, Buffer.from(base.encode(buf)));
}
/**
 * Takes a buffer or string encoded with multibase header, decodes it and
 * returns the decoded buffer
 *
 * @param {Buffer|string} bufOrString
 * @returns {Buffer}
 * @memberof Multibase
 *
 */


function decode(bufOrString) {
  if (Buffer.isBuffer(bufOrString)) {
    bufOrString = bufOrString.toString();
  }

  var code = bufOrString.substring(0, 1);
  bufOrString = bufOrString.substring(1, bufOrString.length);

  if (typeof bufOrString === 'string') {
    bufOrString = Buffer.from(bufOrString);
  }

  var base = getBase(code);
  return Buffer.from(base.decode(bufOrString.toString()));
}
/**
 * Is the given data multibase encoded?
 *
 * @param {Buffer|string} bufOrString
 * @returns {boolean}
 * @memberof Multibase
 */


function isEncoded(bufOrString) {
  if (Buffer.isBuffer(bufOrString)) {
    bufOrString = bufOrString.toString();
  } // Ensure bufOrString is a string


  if (Object.prototype.toString.call(bufOrString) !== '[object String]') {
    return false;
  }

  var code = bufOrString.substring(0, 1);

  try {
    var base = getBase(code);
    return base.name;
  } catch (err) {
    return false;
  }
}
/**
 * @param {string} name
 * @param {Buffer} buf
 * @private
 * @returns {undefined}
 */


function validEncode(name, buf) {
  var base = getBase(name);
  base.decode(buf.toString());
}

function getBase(nameOrCode) {
  var base;

  if (constants.names[nameOrCode]) {
    base = constants.names[nameOrCode];
  } else if (constants.codes[nameOrCode]) {
    base = constants.codes[nameOrCode];
  } else {
    throw errNotSupported;
  }

  if (!base.isImplemented()) {
    throw new Error('Base ' + nameOrCode + ' is not implemented yet');
  }

  return base;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Base = __webpack_require__(201);

var baseX = __webpack_require__(89);

var base16 = __webpack_require__(202);

var base32 = __webpack_require__(203);

var base64 = __webpack_require__(204); // name, code, implementation, alphabet


var constants = [['base1', '1', '', '1'], ['base2', '0', baseX, '01'], ['base8', '7', baseX, '01234567'], ['base10', '9', baseX, '0123456789'], ['base16', 'f', base16, '0123456789abcdef'], ['base32', 'b', base32, 'abcdefghijklmnopqrstuvwxyz234567'], ['base32pad', 'c', base32, 'abcdefghijklmnopqrstuvwxyz234567='], ['base32hex', 'v', base32, '0123456789abcdefghijklmnopqrstuv'], ['base32hexpad', 't', base32, '0123456789abcdefghijklmnopqrstuv='], ['base32z', 'h', base32, 'ybndrfg8ejkmcpqxot1uwisza345h769'], ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'], ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'], ['base64', 'm', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'], ['base64pad', 'M', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='], ['base64url', 'u', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'], ['base64urlpad', 'U', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']];
var names = constants.reduce(function (prev, tupple) {
  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3]);
  return prev;
}, {});
var codes = constants.reduce(function (prev, tupple) {
  prev[tupple[1]] = names[tupple[0]];
  return prev;
}, {});
module.exports = {
  names: names,
  codes: codes
};

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Base =
/*#__PURE__*/
function () {
  function Base(name, code, implementation, alphabet) {
    _classCallCheck(this, Base);

    this.name = name;
    this.code = code;
    this.alphabet = alphabet;

    if (implementation && alphabet) {
      this.engine = implementation(alphabet);
    }
  }

  _createClass(Base, [{
    key: "encode",
    value: function encode(stringOrBuffer) {
      return this.engine.encode(stringOrBuffer);
    }
  }, {
    key: "decode",
    value: function decode(stringOrBuffer) {
      return this.engine.decode(stringOrBuffer);
    }
  }, {
    key: "isImplemented",
    value: function isImplemented() {
      return this.engine;
    }
  }]);

  return Base;
}();

module.exports = Base;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

module.exports = function base16(alphabet) {
  return {
    encode: function encode(input) {
      if (typeof input === 'string') {
        return Buffer.from(input).toString('hex');
      }

      return input.toString('hex');
    },
    decode: function decode(input) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _char = _step.value;

          if (alphabet.indexOf(_char) < 0) {
            throw new Error('invalid base16 character');
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return Buffer.from(input, 'hex');
    }
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _decode(input, alphabet) {
  input = input.replace(new RegExp('=', 'g'), '');
  var length = input.length;
  var bits = 0;
  var value = 0;
  var index = 0;
  var output = new Uint8Array(length * 5 / 8 | 0);

  for (var i = 0; i < length; i++) {
    value = value << 5 | alphabet.indexOf(input[i]);
    bits += 5;

    if (bits >= 8) {
      output[index++] = value >>> bits - 8 & 255;
      bits -= 8;
    }
  }

  return output.buffer;
}

function _encode(buffer, alphabet) {
  var length = buffer.byteLength;
  var view = new Uint8Array(buffer);
  var padding = alphabet.indexOf('=') === alphabet.length - 1;

  if (padding) {
    alphabet = alphabet.substring(0, alphabet.length - 2);
  }

  var bits = 0;
  var value = 0;
  var output = '';

  for (var i = 0; i < length; i++) {
    value = value << 8 | view[i];
    bits += 8;

    while (bits >= 5) {
      output += alphabet[value >>> bits - 5 & 31];
      bits -= 5;
    }
  }

  if (bits > 0) {
    output += alphabet[value << 5 - bits & 31];
  }

  if (padding) {
    while (output.length % 8 !== 0) {
      output += '=';
    }
  }

  return output;
}

module.exports = function base32(alphabet) {
  return {
    encode: function encode(input) {
      if (typeof input === 'string') {
        return _encode(Buffer.from(input), alphabet);
      }

      return _encode(input, alphabet);
    },
    decode: function decode(input) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _char = _step.value;

          if (alphabet.indexOf(_char) < 0) {
            throw new Error('invalid base32 character');
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return _decode(input, alphabet);
    }
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

module.exports = function base64(alphabet) {
  // The alphabet is only used to know:
  //   1. If padding is enabled (must contain '=')
  //   2. If the output must be url-safe (must contain '-' and '_')
  //   3. If the input of the output function is valid
  // The alphabets from RFC 4648 are always used.
  var padding = alphabet.indexOf('=') > -1;
  var url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1;
  return {
    encode: function encode(input) {
      var output = '';

      if (typeof input === 'string') {
        output = Buffer.from(input).toString('base64');
      } else {
        output = input.toString('base64');
      }

      if (url) {
        output = output.replace(/\+/g, '-').replace(/\//g, '_');
      }

      var pad = output.indexOf('=');

      if (pad > 0 && !padding) {
        output = output.substring(0, pad);
      }

      return output;
    },
    decode: function decode(input) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _char = _step.value;

          if (alphabet.indexOf(_char) < 0) {
            throw new Error('invalid base64 character');
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return Buffer.from(input, 'base64');
    }
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseTable = __webpack_require__(52);

var varintBufferEncode = __webpack_require__(90).varintBufferEncode; // this creates a map for codecName -> codeVarintBuffer


var varintTable = {};
module.exports = varintTable;

for (var encodingName in baseTable) {
  var code = baseTable[encodingName];
  varintTable[encodingName] = varintBufferEncode(code);
}

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseTable = __webpack_require__(52); // this creates a map for code as hexString -> codecName


var nameTable = {};
module.exports = nameTable;

for (var encodingName in baseTable) {
  var code = baseTable[encodingName];
  nameTable[code.toString('hex')] = encodingName;
}

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// THIS FILE IS GENERATED, DO NO EDIT MANUALLY
// For more information see the README.md

/* eslint-disable dot-notation */


module.exports = Object.freeze({
  // serialization
  PROTOBUF: 0x50,
  CBOR: 0x51,
  RLP: 0x60,
  BENCODE: 0x63,
  JSON: 0x0200,
  MESSAGEPACK: 0x0201,
  // multiformat
  MULTICODEC: 0x30,
  MULTIHASH: 0x31,
  MULTIADDR: 0x32,
  MULTIBASE: 0x33,
  // multihash
  IDENTITY: 0x00,
  SHA1: 0x11,
  SHA2_256: 0x12,
  SHA2_512: 0x13,
  SHA3_512: 0x14,
  SHA3_384: 0x15,
  SHA3_256: 0x16,
  SHA3_224: 0x17,
  SHAKE_128: 0x18,
  SHAKE_256: 0x19,
  KECCAK_224: 0x1a,
  KECCAK_256: 0x1b,
  KECCAK_384: 0x1c,
  KECCAK_512: 0x1d,
  MURMUR3_128: 0x22,
  MURMUR3_32: 0x23,
  DBL_SHA2_256: 0x56,
  MD4: 0xd4,
  MD5: 0xd5,
  BMT: 0xd6,
  X11: 0x1100,
  BLAKE2B_8: 0xb201,
  BLAKE2B_16: 0xb202,
  BLAKE2B_24: 0xb203,
  BLAKE2B_32: 0xb204,
  BLAKE2B_40: 0xb205,
  BLAKE2B_48: 0xb206,
  BLAKE2B_56: 0xb207,
  BLAKE2B_64: 0xb208,
  BLAKE2B_72: 0xb209,
  BLAKE2B_80: 0xb20a,
  BLAKE2B_88: 0xb20b,
  BLAKE2B_96: 0xb20c,
  BLAKE2B_104: 0xb20d,
  BLAKE2B_112: 0xb20e,
  BLAKE2B_120: 0xb20f,
  BLAKE2B_128: 0xb210,
  BLAKE2B_136: 0xb211,
  BLAKE2B_144: 0xb212,
  BLAKE2B_152: 0xb213,
  BLAKE2B_160: 0xb214,
  BLAKE2B_168: 0xb215,
  BLAKE2B_176: 0xb216,
  BLAKE2B_184: 0xb217,
  BLAKE2B_192: 0xb218,
  BLAKE2B_200: 0xb219,
  BLAKE2B_208: 0xb21a,
  BLAKE2B_216: 0xb21b,
  BLAKE2B_224: 0xb21c,
  BLAKE2B_232: 0xb21d,
  BLAKE2B_240: 0xb21e,
  BLAKE2B_248: 0xb21f,
  BLAKE2B_256: 0xb220,
  BLAKE2B_264: 0xb221,
  BLAKE2B_272: 0xb222,
  BLAKE2B_280: 0xb223,
  BLAKE2B_288: 0xb224,
  BLAKE2B_296: 0xb225,
  BLAKE2B_304: 0xb226,
  BLAKE2B_312: 0xb227,
  BLAKE2B_320: 0xb228,
  BLAKE2B_328: 0xb229,
  BLAKE2B_336: 0xb22a,
  BLAKE2B_344: 0xb22b,
  BLAKE2B_352: 0xb22c,
  BLAKE2B_360: 0xb22d,
  BLAKE2B_368: 0xb22e,
  BLAKE2B_376: 0xb22f,
  BLAKE2B_384: 0xb230,
  BLAKE2B_392: 0xb231,
  BLAKE2B_400: 0xb232,
  BLAKE2B_408: 0xb233,
  BLAKE2B_416: 0xb234,
  BLAKE2B_424: 0xb235,
  BLAKE2B_432: 0xb236,
  BLAKE2B_440: 0xb237,
  BLAKE2B_448: 0xb238,
  BLAKE2B_456: 0xb239,
  BLAKE2B_464: 0xb23a,
  BLAKE2B_472: 0xb23b,
  BLAKE2B_480: 0xb23c,
  BLAKE2B_488: 0xb23d,
  BLAKE2B_496: 0xb23e,
  BLAKE2B_504: 0xb23f,
  BLAKE2B_512: 0xb240,
  BLAKE2S_8: 0xb241,
  BLAKE2S_16: 0xb242,
  BLAKE2S_24: 0xb243,
  BLAKE2S_32: 0xb244,
  BLAKE2S_40: 0xb245,
  BLAKE2S_48: 0xb246,
  BLAKE2S_56: 0xb247,
  BLAKE2S_64: 0xb248,
  BLAKE2S_72: 0xb249,
  BLAKE2S_80: 0xb24a,
  BLAKE2S_88: 0xb24b,
  BLAKE2S_96: 0xb24c,
  BLAKE2S_104: 0xb24d,
  BLAKE2S_112: 0xb24e,
  BLAKE2S_120: 0xb24f,
  BLAKE2S_128: 0xb250,
  BLAKE2S_136: 0xb251,
  BLAKE2S_144: 0xb252,
  BLAKE2S_152: 0xb253,
  BLAKE2S_160: 0xb254,
  BLAKE2S_168: 0xb255,
  BLAKE2S_176: 0xb256,
  BLAKE2S_184: 0xb257,
  BLAKE2S_192: 0xb258,
  BLAKE2S_200: 0xb259,
  BLAKE2S_208: 0xb25a,
  BLAKE2S_216: 0xb25b,
  BLAKE2S_224: 0xb25c,
  BLAKE2S_232: 0xb25d,
  BLAKE2S_240: 0xb25e,
  BLAKE2S_248: 0xb25f,
  BLAKE2S_256: 0xb260,
  SKEIN256_8: 0xb301,
  SKEIN256_16: 0xb302,
  SKEIN256_24: 0xb303,
  SKEIN256_32: 0xb304,
  SKEIN256_40: 0xb305,
  SKEIN256_48: 0xb306,
  SKEIN256_56: 0xb307,
  SKEIN256_64: 0xb308,
  SKEIN256_72: 0xb309,
  SKEIN256_80: 0xb30a,
  SKEIN256_88: 0xb30b,
  SKEIN256_96: 0xb30c,
  SKEIN256_104: 0xb30d,
  SKEIN256_112: 0xb30e,
  SKEIN256_120: 0xb30f,
  SKEIN256_128: 0xb310,
  SKEIN256_136: 0xb311,
  SKEIN256_144: 0xb312,
  SKEIN256_152: 0xb313,
  SKEIN256_160: 0xb314,
  SKEIN256_168: 0xb315,
  SKEIN256_176: 0xb316,
  SKEIN256_184: 0xb317,
  SKEIN256_192: 0xb318,
  SKEIN256_200: 0xb319,
  SKEIN256_208: 0xb31a,
  SKEIN256_216: 0xb31b,
  SKEIN256_224: 0xb31c,
  SKEIN256_232: 0xb31d,
  SKEIN256_240: 0xb31e,
  SKEIN256_248: 0xb31f,
  SKEIN256_256: 0xb320,
  SKEIN512_8: 0xb321,
  SKEIN512_16: 0xb322,
  SKEIN512_24: 0xb323,
  SKEIN512_32: 0xb324,
  SKEIN512_40: 0xb325,
  SKEIN512_48: 0xb326,
  SKEIN512_56: 0xb327,
  SKEIN512_64: 0xb328,
  SKEIN512_72: 0xb329,
  SKEIN512_80: 0xb32a,
  SKEIN512_88: 0xb32b,
  SKEIN512_96: 0xb32c,
  SKEIN512_104: 0xb32d,
  SKEIN512_112: 0xb32e,
  SKEIN512_120: 0xb32f,
  SKEIN512_128: 0xb330,
  SKEIN512_136: 0xb331,
  SKEIN512_144: 0xb332,
  SKEIN512_152: 0xb333,
  SKEIN512_160: 0xb334,
  SKEIN512_168: 0xb335,
  SKEIN512_176: 0xb336,
  SKEIN512_184: 0xb337,
  SKEIN512_192: 0xb338,
  SKEIN512_200: 0xb339,
  SKEIN512_208: 0xb33a,
  SKEIN512_216: 0xb33b,
  SKEIN512_224: 0xb33c,
  SKEIN512_232: 0xb33d,
  SKEIN512_240: 0xb33e,
  SKEIN512_248: 0xb33f,
  SKEIN512_256: 0xb340,
  SKEIN512_264: 0xb341,
  SKEIN512_272: 0xb342,
  SKEIN512_280: 0xb343,
  SKEIN512_288: 0xb344,
  SKEIN512_296: 0xb345,
  SKEIN512_304: 0xb346,
  SKEIN512_312: 0xb347,
  SKEIN512_320: 0xb348,
  SKEIN512_328: 0xb349,
  SKEIN512_336: 0xb34a,
  SKEIN512_344: 0xb34b,
  SKEIN512_352: 0xb34c,
  SKEIN512_360: 0xb34d,
  SKEIN512_368: 0xb34e,
  SKEIN512_376: 0xb34f,
  SKEIN512_384: 0xb350,
  SKEIN512_392: 0xb351,
  SKEIN512_400: 0xb352,
  SKEIN512_408: 0xb353,
  SKEIN512_416: 0xb354,
  SKEIN512_424: 0xb355,
  SKEIN512_432: 0xb356,
  SKEIN512_440: 0xb357,
  SKEIN512_448: 0xb358,
  SKEIN512_456: 0xb359,
  SKEIN512_464: 0xb35a,
  SKEIN512_472: 0xb35b,
  SKEIN512_480: 0xb35c,
  SKEIN512_488: 0xb35d,
  SKEIN512_496: 0xb35e,
  SKEIN512_504: 0xb35f,
  SKEIN512_512: 0xb360,
  SKEIN1024_8: 0xb361,
  SKEIN1024_16: 0xb362,
  SKEIN1024_24: 0xb363,
  SKEIN1024_32: 0xb364,
  SKEIN1024_40: 0xb365,
  SKEIN1024_48: 0xb366,
  SKEIN1024_56: 0xb367,
  SKEIN1024_64: 0xb368,
  SKEIN1024_72: 0xb369,
  SKEIN1024_80: 0xb36a,
  SKEIN1024_88: 0xb36b,
  SKEIN1024_96: 0xb36c,
  SKEIN1024_104: 0xb36d,
  SKEIN1024_112: 0xb36e,
  SKEIN1024_120: 0xb36f,
  SKEIN1024_128: 0xb370,
  SKEIN1024_136: 0xb371,
  SKEIN1024_144: 0xb372,
  SKEIN1024_152: 0xb373,
  SKEIN1024_160: 0xb374,
  SKEIN1024_168: 0xb375,
  SKEIN1024_176: 0xb376,
  SKEIN1024_184: 0xb377,
  SKEIN1024_192: 0xb378,
  SKEIN1024_200: 0xb379,
  SKEIN1024_208: 0xb37a,
  SKEIN1024_216: 0xb37b,
  SKEIN1024_224: 0xb37c,
  SKEIN1024_232: 0xb37d,
  SKEIN1024_240: 0xb37e,
  SKEIN1024_248: 0xb37f,
  SKEIN1024_256: 0xb380,
  SKEIN1024_264: 0xb381,
  SKEIN1024_272: 0xb382,
  SKEIN1024_280: 0xb383,
  SKEIN1024_288: 0xb384,
  SKEIN1024_296: 0xb385,
  SKEIN1024_304: 0xb386,
  SKEIN1024_312: 0xb387,
  SKEIN1024_320: 0xb388,
  SKEIN1024_328: 0xb389,
  SKEIN1024_336: 0xb38a,
  SKEIN1024_344: 0xb38b,
  SKEIN1024_352: 0xb38c,
  SKEIN1024_360: 0xb38d,
  SKEIN1024_368: 0xb38e,
  SKEIN1024_376: 0xb38f,
  SKEIN1024_384: 0xb390,
  SKEIN1024_392: 0xb391,
  SKEIN1024_400: 0xb392,
  SKEIN1024_408: 0xb393,
  SKEIN1024_416: 0xb394,
  SKEIN1024_424: 0xb395,
  SKEIN1024_432: 0xb396,
  SKEIN1024_440: 0xb397,
  SKEIN1024_448: 0xb398,
  SKEIN1024_456: 0xb399,
  SKEIN1024_464: 0xb39a,
  SKEIN1024_472: 0xb39b,
  SKEIN1024_480: 0xb39c,
  SKEIN1024_488: 0xb39d,
  SKEIN1024_496: 0xb39e,
  SKEIN1024_504: 0xb39f,
  SKEIN1024_512: 0xb3a0,
  SKEIN1024_520: 0xb3a1,
  SKEIN1024_528: 0xb3a2,
  SKEIN1024_536: 0xb3a3,
  SKEIN1024_544: 0xb3a4,
  SKEIN1024_552: 0xb3a5,
  SKEIN1024_560: 0xb3a6,
  SKEIN1024_568: 0xb3a7,
  SKEIN1024_576: 0xb3a8,
  SKEIN1024_584: 0xb3a9,
  SKEIN1024_592: 0xb3aa,
  SKEIN1024_600: 0xb3ab,
  SKEIN1024_608: 0xb3ac,
  SKEIN1024_616: 0xb3ad,
  SKEIN1024_624: 0xb3ae,
  SKEIN1024_632: 0xb3af,
  SKEIN1024_640: 0xb3b0,
  SKEIN1024_648: 0xb3b1,
  SKEIN1024_656: 0xb3b2,
  SKEIN1024_664: 0xb3b3,
  SKEIN1024_672: 0xb3b4,
  SKEIN1024_680: 0xb3b5,
  SKEIN1024_688: 0xb3b6,
  SKEIN1024_696: 0xb3b7,
  SKEIN1024_704: 0xb3b8,
  SKEIN1024_712: 0xb3b9,
  SKEIN1024_720: 0xb3ba,
  SKEIN1024_728: 0xb3bb,
  SKEIN1024_736: 0xb3bc,
  SKEIN1024_744: 0xb3bd,
  SKEIN1024_752: 0xb3be,
  SKEIN1024_760: 0xb3bf,
  SKEIN1024_768: 0xb3c0,
  SKEIN1024_776: 0xb3c1,
  SKEIN1024_784: 0xb3c2,
  SKEIN1024_792: 0xb3c3,
  SKEIN1024_800: 0xb3c4,
  SKEIN1024_808: 0xb3c5,
  SKEIN1024_816: 0xb3c6,
  SKEIN1024_824: 0xb3c7,
  SKEIN1024_832: 0xb3c8,
  SKEIN1024_840: 0xb3c9,
  SKEIN1024_848: 0xb3ca,
  SKEIN1024_856: 0xb3cb,
  SKEIN1024_864: 0xb3cc,
  SKEIN1024_872: 0xb3cd,
  SKEIN1024_880: 0xb3ce,
  SKEIN1024_888: 0xb3cf,
  SKEIN1024_896: 0xb3d0,
  SKEIN1024_904: 0xb3d1,
  SKEIN1024_912: 0xb3d2,
  SKEIN1024_920: 0xb3d3,
  SKEIN1024_928: 0xb3d4,
  SKEIN1024_936: 0xb3d5,
  SKEIN1024_944: 0xb3d6,
  SKEIN1024_952: 0xb3d7,
  SKEIN1024_960: 0xb3d8,
  SKEIN1024_968: 0xb3d9,
  SKEIN1024_976: 0xb3da,
  SKEIN1024_984: 0xb3db,
  SKEIN1024_992: 0xb3dc,
  SKEIN1024_1000: 0xb3dd,
  SKEIN1024_1008: 0xb3de,
  SKEIN1024_1016: 0xb3df,
  SKEIN1024_1024: 0xb3e0,
  // multiaddr
  IP4: 0x04,
  TCP: 0x06,
  DCCP: 0x21,
  IP6: 0x29,
  IP6ZONE: 0x2a,
  DNS: 0x35,
  DNS4: 0x36,
  DNS6: 0x37,
  DNSADDR: 0x38,
  SCTP: 0x84,
  UDP: 0x0111,
  P2P_WEBRTC_STAR: 0x0113,
  P2P_WEBRTC_DIRECT: 0x0114,
  P2P_STARDUST: 0x0115,
  P2P_CIRCUIT: 0x0122,
  UDT: 0x012d,
  UTP: 0x012e,
  UNIX: 0x0190,
  P2P: 0x01a5,
  IPFS: 0x01a5,
  HTTPS: 0x01bb,
  ONION: 0x01bc,
  ONION3: 0x01bd,
  GARLIC64: 0x01be,
  GARLIC32: 0x01bf,
  QUIC: 0x01cc,
  WS: 0x01dd,
  WSS: 0x01de,
  P2P_WEBSOCKET_STAR: 0x01df,
  HTTP: 0x01e0,
  // ipld
  RAW: 0x55,
  DAG_PB: 0x70,
  DAG_CBOR: 0x71,
  LIBP2P_KEY: 0x72,
  GIT_RAW: 0x78,
  TORRENT_INFO: 0x7b,
  TORRENT_FILE: 0x7c,
  LEOFCOIN_BLOCK: 0x81,
  LEOFCOIN_TX: 0x82,
  LEOFCOIN_PR: 0x83,
  ETH_BLOCK: 0x90,
  ETH_BLOCK_LIST: 0x91,
  ETH_TX_TRIE: 0x92,
  ETH_TX: 0x93,
  ETH_TX_RECEIPT_TRIE: 0x94,
  ETH_TX_RECEIPT: 0x95,
  ETH_STATE_TRIE: 0x96,
  ETH_ACCOUNT_SNAPSHOT: 0x97,
  ETH_STORAGE_TRIE: 0x98,
  BITCOIN_BLOCK: 0xb0,
  BITCOIN_TX: 0xb1,
  ZCASH_BLOCK: 0xc0,
  ZCASH_TX: 0xc1,
  STELLAR_BLOCK: 0xd0,
  STELLAR_TX: 0xd1,
  DECRED_BLOCK: 0xe0,
  DECRED_TX: 0xe1,
  DASH_BLOCK: 0xf0,
  DASH_TX: 0xf1,
  SWARM_MANIFEST: 0xfa,
  SWARM_FEED: 0xfb,
  DAG_JSON: 0x0129,
  // namespace
  PATH: 0x2f,
  IPLD_NS: 0xe2,
  IPFS_NS: 0xe3,
  SWARM_NS: 0xe4,
  IPNS_NS: 0xe5,
  ZERONET: 0xe6,
  // key
  ED25519_PUB: 0xed,
  // holochain
  HOLOCHAIN_ADR_V0: 0x807124,
  HOLOCHAIN_ADR_V1: 0x817124,
  HOLOCHAIN_KEY_V0: 0x947124,
  HOLOCHAIN_KEY_V1: 0x957124,
  HOLOCHAIN_SIG_V0: 0xa27124,
  HOLOCHAIN_SIG_V1: 0xa37124
});

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// THIS FILE IS GENERATED, DO NO EDIT MANUALLY
// For more information see the README.md

/* eslint-disable dot-notation */


module.exports = Object.freeze({
  // serialization
  0x50: 'protobuf',
  0x51: 'cbor',
  0x60: 'rlp',
  0x63: 'bencode',
  0x0200: 'json',
  0x0201: 'messagepack',
  // multiformat
  0x30: 'multicodec',
  0x31: 'multihash',
  0x32: 'multiaddr',
  0x33: 'multibase',
  // multihash
  0x00: 'identity',
  0x11: 'sha1',
  0x12: 'sha2-256',
  0x13: 'sha2-512',
  0x14: 'sha3-512',
  0x15: 'sha3-384',
  0x16: 'sha3-256',
  0x17: 'sha3-224',
  0x18: 'shake-128',
  0x19: 'shake-256',
  0x1a: 'keccak-224',
  0x1b: 'keccak-256',
  0x1c: 'keccak-384',
  0x1d: 'keccak-512',
  0x22: 'murmur3-128',
  0x23: 'murmur3-32',
  0x56: 'dbl-sha2-256',
  0xd4: 'md4',
  0xd5: 'md5',
  0xd6: 'bmt',
  0x1100: 'x11',
  0xb201: 'blake2b-8',
  0xb202: 'blake2b-16',
  0xb203: 'blake2b-24',
  0xb204: 'blake2b-32',
  0xb205: 'blake2b-40',
  0xb206: 'blake2b-48',
  0xb207: 'blake2b-56',
  0xb208: 'blake2b-64',
  0xb209: 'blake2b-72',
  0xb20a: 'blake2b-80',
  0xb20b: 'blake2b-88',
  0xb20c: 'blake2b-96',
  0xb20d: 'blake2b-104',
  0xb20e: 'blake2b-112',
  0xb20f: 'blake2b-120',
  0xb210: 'blake2b-128',
  0xb211: 'blake2b-136',
  0xb212: 'blake2b-144',
  0xb213: 'blake2b-152',
  0xb214: 'blake2b-160',
  0xb215: 'blake2b-168',
  0xb216: 'blake2b-176',
  0xb217: 'blake2b-184',
  0xb218: 'blake2b-192',
  0xb219: 'blake2b-200',
  0xb21a: 'blake2b-208',
  0xb21b: 'blake2b-216',
  0xb21c: 'blake2b-224',
  0xb21d: 'blake2b-232',
  0xb21e: 'blake2b-240',
  0xb21f: 'blake2b-248',
  0xb220: 'blake2b-256',
  0xb221: 'blake2b-264',
  0xb222: 'blake2b-272',
  0xb223: 'blake2b-280',
  0xb224: 'blake2b-288',
  0xb225: 'blake2b-296',
  0xb226: 'blake2b-304',
  0xb227: 'blake2b-312',
  0xb228: 'blake2b-320',
  0xb229: 'blake2b-328',
  0xb22a: 'blake2b-336',
  0xb22b: 'blake2b-344',
  0xb22c: 'blake2b-352',
  0xb22d: 'blake2b-360',
  0xb22e: 'blake2b-368',
  0xb22f: 'blake2b-376',
  0xb230: 'blake2b-384',
  0xb231: 'blake2b-392',
  0xb232: 'blake2b-400',
  0xb233: 'blake2b-408',
  0xb234: 'blake2b-416',
  0xb235: 'blake2b-424',
  0xb236: 'blake2b-432',
  0xb237: 'blake2b-440',
  0xb238: 'blake2b-448',
  0xb239: 'blake2b-456',
  0xb23a: 'blake2b-464',
  0xb23b: 'blake2b-472',
  0xb23c: 'blake2b-480',
  0xb23d: 'blake2b-488',
  0xb23e: 'blake2b-496',
  0xb23f: 'blake2b-504',
  0xb240: 'blake2b-512',
  0xb241: 'blake2s-8',
  0xb242: 'blake2s-16',
  0xb243: 'blake2s-24',
  0xb244: 'blake2s-32',
  0xb245: 'blake2s-40',
  0xb246: 'blake2s-48',
  0xb247: 'blake2s-56',
  0xb248: 'blake2s-64',
  0xb249: 'blake2s-72',
  0xb24a: 'blake2s-80',
  0xb24b: 'blake2s-88',
  0xb24c: 'blake2s-96',
  0xb24d: 'blake2s-104',
  0xb24e: 'blake2s-112',
  0xb24f: 'blake2s-120',
  0xb250: 'blake2s-128',
  0xb251: 'blake2s-136',
  0xb252: 'blake2s-144',
  0xb253: 'blake2s-152',
  0xb254: 'blake2s-160',
  0xb255: 'blake2s-168',
  0xb256: 'blake2s-176',
  0xb257: 'blake2s-184',
  0xb258: 'blake2s-192',
  0xb259: 'blake2s-200',
  0xb25a: 'blake2s-208',
  0xb25b: 'blake2s-216',
  0xb25c: 'blake2s-224',
  0xb25d: 'blake2s-232',
  0xb25e: 'blake2s-240',
  0xb25f: 'blake2s-248',
  0xb260: 'blake2s-256',
  0xb301: 'skein256-8',
  0xb302: 'skein256-16',
  0xb303: 'skein256-24',
  0xb304: 'skein256-32',
  0xb305: 'skein256-40',
  0xb306: 'skein256-48',
  0xb307: 'skein256-56',
  0xb308: 'skein256-64',
  0xb309: 'skein256-72',
  0xb30a: 'skein256-80',
  0xb30b: 'skein256-88',
  0xb30c: 'skein256-96',
  0xb30d: 'skein256-104',
  0xb30e: 'skein256-112',
  0xb30f: 'skein256-120',
  0xb310: 'skein256-128',
  0xb311: 'skein256-136',
  0xb312: 'skein256-144',
  0xb313: 'skein256-152',
  0xb314: 'skein256-160',
  0xb315: 'skein256-168',
  0xb316: 'skein256-176',
  0xb317: 'skein256-184',
  0xb318: 'skein256-192',
  0xb319: 'skein256-200',
  0xb31a: 'skein256-208',
  0xb31b: 'skein256-216',
  0xb31c: 'skein256-224',
  0xb31d: 'skein256-232',
  0xb31e: 'skein256-240',
  0xb31f: 'skein256-248',
  0xb320: 'skein256-256',
  0xb321: 'skein512-8',
  0xb322: 'skein512-16',
  0xb323: 'skein512-24',
  0xb324: 'skein512-32',
  0xb325: 'skein512-40',
  0xb326: 'skein512-48',
  0xb327: 'skein512-56',
  0xb328: 'skein512-64',
  0xb329: 'skein512-72',
  0xb32a: 'skein512-80',
  0xb32b: 'skein512-88',
  0xb32c: 'skein512-96',
  0xb32d: 'skein512-104',
  0xb32e: 'skein512-112',
  0xb32f: 'skein512-120',
  0xb330: 'skein512-128',
  0xb331: 'skein512-136',
  0xb332: 'skein512-144',
  0xb333: 'skein512-152',
  0xb334: 'skein512-160',
  0xb335: 'skein512-168',
  0xb336: 'skein512-176',
  0xb337: 'skein512-184',
  0xb338: 'skein512-192',
  0xb339: 'skein512-200',
  0xb33a: 'skein512-208',
  0xb33b: 'skein512-216',
  0xb33c: 'skein512-224',
  0xb33d: 'skein512-232',
  0xb33e: 'skein512-240',
  0xb33f: 'skein512-248',
  0xb340: 'skein512-256',
  0xb341: 'skein512-264',
  0xb342: 'skein512-272',
  0xb343: 'skein512-280',
  0xb344: 'skein512-288',
  0xb345: 'skein512-296',
  0xb346: 'skein512-304',
  0xb347: 'skein512-312',
  0xb348: 'skein512-320',
  0xb349: 'skein512-328',
  0xb34a: 'skein512-336',
  0xb34b: 'skein512-344',
  0xb34c: 'skein512-352',
  0xb34d: 'skein512-360',
  0xb34e: 'skein512-368',
  0xb34f: 'skein512-376',
  0xb350: 'skein512-384',
  0xb351: 'skein512-392',
  0xb352: 'skein512-400',
  0xb353: 'skein512-408',
  0xb354: 'skein512-416',
  0xb355: 'skein512-424',
  0xb356: 'skein512-432',
  0xb357: 'skein512-440',
  0xb358: 'skein512-448',
  0xb359: 'skein512-456',
  0xb35a: 'skein512-464',
  0xb35b: 'skein512-472',
  0xb35c: 'skein512-480',
  0xb35d: 'skein512-488',
  0xb35e: 'skein512-496',
  0xb35f: 'skein512-504',
  0xb360: 'skein512-512',
  0xb361: 'skein1024-8',
  0xb362: 'skein1024-16',
  0xb363: 'skein1024-24',
  0xb364: 'skein1024-32',
  0xb365: 'skein1024-40',
  0xb366: 'skein1024-48',
  0xb367: 'skein1024-56',
  0xb368: 'skein1024-64',
  0xb369: 'skein1024-72',
  0xb36a: 'skein1024-80',
  0xb36b: 'skein1024-88',
  0xb36c: 'skein1024-96',
  0xb36d: 'skein1024-104',
  0xb36e: 'skein1024-112',
  0xb36f: 'skein1024-120',
  0xb370: 'skein1024-128',
  0xb371: 'skein1024-136',
  0xb372: 'skein1024-144',
  0xb373: 'skein1024-152',
  0xb374: 'skein1024-160',
  0xb375: 'skein1024-168',
  0xb376: 'skein1024-176',
  0xb377: 'skein1024-184',
  0xb378: 'skein1024-192',
  0xb379: 'skein1024-200',
  0xb37a: 'skein1024-208',
  0xb37b: 'skein1024-216',
  0xb37c: 'skein1024-224',
  0xb37d: 'skein1024-232',
  0xb37e: 'skein1024-240',
  0xb37f: 'skein1024-248',
  0xb380: 'skein1024-256',
  0xb381: 'skein1024-264',
  0xb382: 'skein1024-272',
  0xb383: 'skein1024-280',
  0xb384: 'skein1024-288',
  0xb385: 'skein1024-296',
  0xb386: 'skein1024-304',
  0xb387: 'skein1024-312',
  0xb388: 'skein1024-320',
  0xb389: 'skein1024-328',
  0xb38a: 'skein1024-336',
  0xb38b: 'skein1024-344',
  0xb38c: 'skein1024-352',
  0xb38d: 'skein1024-360',
  0xb38e: 'skein1024-368',
  0xb38f: 'skein1024-376',
  0xb390: 'skein1024-384',
  0xb391: 'skein1024-392',
  0xb392: 'skein1024-400',
  0xb393: 'skein1024-408',
  0xb394: 'skein1024-416',
  0xb395: 'skein1024-424',
  0xb396: 'skein1024-432',
  0xb397: 'skein1024-440',
  0xb398: 'skein1024-448',
  0xb399: 'skein1024-456',
  0xb39a: 'skein1024-464',
  0xb39b: 'skein1024-472',
  0xb39c: 'skein1024-480',
  0xb39d: 'skein1024-488',
  0xb39e: 'skein1024-496',
  0xb39f: 'skein1024-504',
  0xb3a0: 'skein1024-512',
  0xb3a1: 'skein1024-520',
  0xb3a2: 'skein1024-528',
  0xb3a3: 'skein1024-536',
  0xb3a4: 'skein1024-544',
  0xb3a5: 'skein1024-552',
  0xb3a6: 'skein1024-560',
  0xb3a7: 'skein1024-568',
  0xb3a8: 'skein1024-576',
  0xb3a9: 'skein1024-584',
  0xb3aa: 'skein1024-592',
  0xb3ab: 'skein1024-600',
  0xb3ac: 'skein1024-608',
  0xb3ad: 'skein1024-616',
  0xb3ae: 'skein1024-624',
  0xb3af: 'skein1024-632',
  0xb3b0: 'skein1024-640',
  0xb3b1: 'skein1024-648',
  0xb3b2: 'skein1024-656',
  0xb3b3: 'skein1024-664',
  0xb3b4: 'skein1024-672',
  0xb3b5: 'skein1024-680',
  0xb3b6: 'skein1024-688',
  0xb3b7: 'skein1024-696',
  0xb3b8: 'skein1024-704',
  0xb3b9: 'skein1024-712',
  0xb3ba: 'skein1024-720',
  0xb3bb: 'skein1024-728',
  0xb3bc: 'skein1024-736',
  0xb3bd: 'skein1024-744',
  0xb3be: 'skein1024-752',
  0xb3bf: 'skein1024-760',
  0xb3c0: 'skein1024-768',
  0xb3c1: 'skein1024-776',
  0xb3c2: 'skein1024-784',
  0xb3c3: 'skein1024-792',
  0xb3c4: 'skein1024-800',
  0xb3c5: 'skein1024-808',
  0xb3c6: 'skein1024-816',
  0xb3c7: 'skein1024-824',
  0xb3c8: 'skein1024-832',
  0xb3c9: 'skein1024-840',
  0xb3ca: 'skein1024-848',
  0xb3cb: 'skein1024-856',
  0xb3cc: 'skein1024-864',
  0xb3cd: 'skein1024-872',
  0xb3ce: 'skein1024-880',
  0xb3cf: 'skein1024-888',
  0xb3d0: 'skein1024-896',
  0xb3d1: 'skein1024-904',
  0xb3d2: 'skein1024-912',
  0xb3d3: 'skein1024-920',
  0xb3d4: 'skein1024-928',
  0xb3d5: 'skein1024-936',
  0xb3d6: 'skein1024-944',
  0xb3d7: 'skein1024-952',
  0xb3d8: 'skein1024-960',
  0xb3d9: 'skein1024-968',
  0xb3da: 'skein1024-976',
  0xb3db: 'skein1024-984',
  0xb3dc: 'skein1024-992',
  0xb3dd: 'skein1024-1000',
  0xb3de: 'skein1024-1008',
  0xb3df: 'skein1024-1016',
  0xb3e0: 'skein1024-1024',
  // multiaddr
  0x04: 'ip4',
  0x06: 'tcp',
  0x21: 'dccp',
  0x29: 'ip6',
  0x2a: 'ip6zone',
  0x35: 'dns',
  0x36: 'dns4',
  0x37: 'dns6',
  0x38: 'dnsaddr',
  0x84: 'sctp',
  0x0111: 'udp',
  0x0113: 'p2p-webrtc-star',
  0x0114: 'p2p-webrtc-direct',
  0x0115: 'p2p-stardust',
  0x0122: 'p2p-circuit',
  0x012d: 'udt',
  0x012e: 'utp',
  0x0190: 'unix',
  0x01a5: 'p2p',
  0x01bb: 'https',
  0x01bc: 'onion',
  0x01bd: 'onion3',
  0x01be: 'garlic64',
  0x01bf: 'garlic32',
  0x01cc: 'quic',
  0x01dd: 'ws',
  0x01de: 'wss',
  0x01df: 'p2p-websocket-star',
  0x01e0: 'http',
  // ipld
  0x55: 'raw',
  0x70: 'dag-pb',
  0x71: 'dag-cbor',
  0x72: 'libp2p-key',
  0x78: 'git-raw',
  0x7b: 'torrent-info',
  0x7c: 'torrent-file',
  0x81: 'leofcoin-block',
  0x82: 'leofcoin-tx',
  0x83: 'leofcoin-pr',
  0x90: 'eth-block',
  0x91: 'eth-block-list',
  0x92: 'eth-tx-trie',
  0x93: 'eth-tx',
  0x94: 'eth-tx-receipt-trie',
  0x95: 'eth-tx-receipt',
  0x96: 'eth-state-trie',
  0x97: 'eth-account-snapshot',
  0x98: 'eth-storage-trie',
  0xb0: 'bitcoin-block',
  0xb1: 'bitcoin-tx',
  0xc0: 'zcash-block',
  0xc1: 'zcash-tx',
  0xd0: 'stellar-block',
  0xd1: 'stellar-tx',
  0xe0: 'decred-block',
  0xe1: 'decred-tx',
  0xf0: 'dash-block',
  0xf1: 'dash-tx',
  0xfa: 'swarm-manifest',
  0xfb: 'swarm-feed',
  0x0129: 'dag-json',
  // namespace
  0x2f: 'path',
  0xe2: 'ipld-ns',
  0xe3: 'ipfs-ns',
  0xe4: 'swarm-ns',
  0xe5: 'ipns-ns',
  0xe6: 'zeronet',
  // key
  0xed: 'ed25519-pub',
  // holochain
  0x807124: 'holochain-adr-v0',
  0x817124: 'holochain-adr-v1',
  0x947124: 'holochain-key-v0',
  0x957124: 'holochain-key-v1',
  0xa27124: 'holochain-sig-v0',
  0xa37124: 'holochain-sig-v1'
});

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var mh = __webpack_require__(9);

var CIDUtil = {
  /**
   * Test if the given input is a valid CID object.
   * Returns an error message if it is not.
   * Returns undefined if it is a valid CID.
   *
   * @param {any} other
   * @returns {string}
   */
  checkCIDComponents: function checkCIDComponents(other) {
    if (other == null) {
      return 'null values are not valid CIDs';
    }

    if (!(other.version === 0 || other.version === 1)) {
      return 'Invalid version, must be a number equal to 1 or 0';
    }

    if (typeof other.codec !== 'string') {
      return 'codec must be string';
    }

    if (other.version === 0) {
      if (other.codec !== 'dag-pb') {
        return "codec must be 'dag-pb' for CIDv0";
      }

      if (other.multibaseName !== 'base58btc') {
        return "multibaseName must be 'base58btc' for CIDv0";
      }
    }

    if (!Buffer.isBuffer(other.multihash)) {
      return 'multihash must be a Buffer';
    }

    try {
      mh.validate(other.multihash);
    } catch (err) {
      var errorMsg = err.message;

      if (!errorMsg) {
        // Just in case mh.validate() throws an error with empty error message
        errorMsg = 'Multihash validation failed';
      }

      return errorMsg;
    }
  }
};
module.exports = CIDUtil;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var parse = __webpack_require__(211);

var stringify = __webpack_require__(213);

module.exports = parse;
module.exports.parse = parse;
module.exports.stringify = stringify;

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var tokenize = __webpack_require__(212);

var MAX_RANGE = 0x1FFFFFFF; // "Only repeated fields of primitive numeric types (types which use the varint, 32-bit, or 64-bit wire types) can be declared "packed"."
// https://developers.google.com/protocol-buffers/docs/encoding#optional

var PACKABLE_TYPES = [// varint wire types
'int32', 'int64', 'uint32', 'uint64', 'sint32', 'sint64', 'bool', // + ENUMS
// 64-bit wire types
'fixed64', 'sfixed64', 'double', // 32-bit wire types
'fixed32', 'sfixed32', 'float'];

var onfieldoptions = function onfieldoptions(tokens) {
  var opts = {};

  while (tokens.length) {
    switch (tokens[0]) {
      case '[':
      case ',':
        tokens.shift();
        var name = tokens.shift();

        if (name === '(') {
          // handling [(A) = B]
          name = tokens.shift();
          tokens.shift(); // remove the end of bracket
        }

        if (tokens[0] !== '=') throw new Error('Unexpected token in field options: ' + tokens[0]);
        tokens.shift();
        if (tokens[0] === ']') throw new Error('Unexpected ] in field option');
        opts[name] = tokens.shift();
        break;

      case ']':
        tokens.shift();
        return opts;

      default:
        throw new Error('Unexpected token in field options: ' + tokens[0]);
    }
  }

  throw new Error('No closing tag for field options');
};

var onfield = function onfield(tokens) {
  var field = {
    name: null,
    type: null,
    tag: -1,
    map: null,
    oneof: null,
    required: false,
    repeated: false,
    options: {}
  };

  while (tokens.length) {
    switch (tokens[0]) {
      case '=':
        tokens.shift();
        field.tag = Number(tokens.shift());
        break;

      case 'map':
        field.type = 'map';
        field.map = {
          from: null,
          to: null
        };
        tokens.shift();
        if (tokens[0] !== '<') throw new Error('Unexpected token in map type: ' + tokens[0]);
        tokens.shift();
        field.map.from = tokens.shift();
        if (tokens[0] !== ',') throw new Error('Unexpected token in map type: ' + tokens[0]);
        tokens.shift();
        field.map.to = tokens.shift();
        if (tokens[0] !== '>') throw new Error('Unexpected token in map type: ' + tokens[0]);
        tokens.shift();
        field.name = tokens.shift();
        break;

      case 'repeated':
      case 'required':
      case 'optional':
        var t = tokens.shift();
        field.required = t === 'required';
        field.repeated = t === 'repeated';
        field.type = tokens.shift();
        field.name = tokens.shift();
        break;

      case '[':
        field.options = onfieldoptions(tokens);
        break;

      case ';':
        if (field.name === null) throw new Error('Missing field name');
        if (field.type === null) throw new Error('Missing type in message field: ' + field.name);
        if (field.tag === -1) throw new Error('Missing tag number in message field: ' + field.name);
        tokens.shift();
        return field;

      default:
        throw new Error('Unexpected token in message field: ' + tokens[0]);
    }
  }

  throw new Error('No ; found for message field');
};

var onmessagebody = function onmessagebody(tokens) {
  var body = {
    enums: [],
    messages: [],
    fields: [],
    "extends": [],
    extensions: null
  };

  while (tokens.length) {
    switch (tokens[0]) {
      case 'map':
      case 'repeated':
      case 'optional':
      case 'required':
        body.fields.push(onfield(tokens));
        break;

      case 'enum':
        body.enums.push(onenum(tokens));
        break;

      case 'message':
        body.messages.push(onmessage(tokens));
        break;

      case 'extensions':
        body.extensions = onextensions(tokens);
        break;

      case 'oneof':
        tokens.shift();
        var name = tokens.shift();
        if (tokens[0] !== '{') throw new Error('Unexpected token in oneof: ' + tokens[0]);
        tokens.shift();

        while (tokens[0] !== '}') {
          tokens.unshift('optional');
          var field = onfield(tokens);
          field.oneof = name;
          body.fields.push(field);
        }

        tokens.shift();
        break;

      case 'extend':
        body["extends"].push(onextend(tokens));
        break;

      case ';':
        tokens.shift();
        break;

      case 'reserved':
      case 'option':
        tokens.shift();

        while (tokens[0] !== ';') {
          tokens.shift();
        }

        break;

      default:
        // proto3 does not require the use of optional/required, assumed as optional
        // "singular: a well-formed message can have zero or one of this field (but not more than one)."
        // https://developers.google.com/protocol-buffers/docs/proto3#specifying-field-rules
        tokens.unshift('optional');
        body.fields.push(onfield(tokens));
    }
  }

  return body;
};

var onextend = function onextend(tokens) {
  var out = {
    name: tokens[1],
    message: onmessage(tokens)
  };
  return out;
};

var onextensions = function onextensions(tokens) {
  tokens.shift();
  var from = Number(tokens.shift());
  if (isNaN(from)) throw new Error('Invalid from in extensions definition');
  if (tokens.shift() !== 'to') throw new Error("Expected keyword 'to' in extensions definition");
  var to = tokens.shift();
  if (to === 'max') to = MAX_RANGE;
  to = Number(to);
  if (isNaN(to)) throw new Error('Invalid to in extensions definition');
  if (tokens.shift() !== ';') throw new Error('Missing ; in extensions definition');
  return {
    from: from,
    to: to
  };
};

var onmessage = function onmessage(tokens) {
  tokens.shift();
  var lvl = 1;
  var body = [];
  var msg = {
    name: tokens.shift(),
    enums: [],
    "extends": [],
    messages: [],
    fields: []
  };
  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0]);
  tokens.shift();

  while (tokens.length) {
    if (tokens[0] === '{') lvl++;else if (tokens[0] === '}') lvl--;

    if (!lvl) {
      tokens.shift();
      body = onmessagebody(body);
      msg.enums = body.enums;
      msg.messages = body.messages;
      msg.fields = body.fields;
      msg["extends"] = body["extends"];
      msg.extensions = body.extensions;
      return msg;
    }

    body.push(tokens.shift());
  }

  if (lvl) throw new Error('No closing tag for message');
};

var onpackagename = function onpackagename(tokens) {
  tokens.shift();
  var name = tokens.shift();
  if (tokens[0] !== ';') throw new Error('Expected ; but found ' + tokens[0]);
  tokens.shift();
  return name;
};

var onsyntaxversion = function onsyntaxversion(tokens) {
  tokens.shift();
  if (tokens[0] !== '=') throw new Error('Expected = but found ' + tokens[0]);
  tokens.shift();
  var version = tokens.shift();

  switch (version) {
    case '"proto2"':
      version = 2;
      break;

    case '"proto3"':
      version = 3;
      break;

    default:
      throw new Error('Expected protobuf syntax version but found ' + version);
  }

  if (tokens[0] !== ';') throw new Error('Expected ; but found ' + tokens[0]);
  tokens.shift();
  return version;
};

var onenumvalue = function onenumvalue(tokens) {
  if (tokens.length < 4) throw new Error('Invalid enum value: ' + tokens.slice(0, 3).join(' '));
  if (tokens[1] !== '=') throw new Error('Expected = but found ' + tokens[1]);
  if (tokens[3] !== ';' && tokens[3] !== '[') throw new Error('Expected ; or [ but found ' + tokens[1]);
  var name = tokens.shift();
  tokens.shift();
  var val = {
    value: null,
    options: {}
  };
  val.value = Number(tokens.shift());

  if (tokens[0] === '[') {
    val.options = onfieldoptions(tokens);
  }

  tokens.shift(); // expecting the semicolon here

  return {
    name: name,
    val: val
  };
};

var onenum = function onenum(tokens) {
  tokens.shift();
  var options = {};
  var e = {
    name: tokens.shift(),
    values: {},
    options: {}
  };
  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0]);
  tokens.shift();

  while (tokens.length) {
    if (tokens[0] === '}') {
      tokens.shift(); // there goes optional semicolon after the enclosing "}"

      if (tokens[0] === ';') tokens.shift();
      return e;
    }

    if (tokens[0] === 'option') {
      options = onoption(tokens);
      e.options[options.name] = options.value;
      continue;
    }

    var val = onenumvalue(tokens);
    e.values[val.name] = val.val;
  }

  throw new Error('No closing tag for enum');
};

var onoption = function onoption(tokens) {
  var name = null;
  var value = null;

  var parse = function parse(value) {
    if (value === 'true') return true;
    if (value === 'false') return false;
    return value.replace(/^"+|"+$/gm, '');
  };

  while (tokens.length) {
    if (tokens[0] === ';') {
      tokens.shift();
      return {
        name: name,
        value: value
      };
    }

    switch (tokens[0]) {
      case 'option':
        tokens.shift();
        var hasBracket = tokens[0] === '(';
        if (hasBracket) tokens.shift();
        name = tokens.shift();

        if (hasBracket) {
          if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0]);
          tokens.shift();
        }

        if (tokens[0][0] === '.') {
          name += tokens.shift();
        }

        break;

      case '=':
        tokens.shift();
        if (name === null) throw new Error('Expected key for option with value: ' + tokens[0]);
        value = parse(tokens.shift());

        if (name === 'optimize_for' && !/^(SPEED|CODE_SIZE|LITE_RUNTIME)$/.test(value)) {
          throw new Error('Unexpected value for option optimize_for: ' + value);
        } else if (value === '{') {
          // option foo = {bar: baz}
          value = onoptionMap(tokens);
        }

        break;

      default:
        throw new Error('Unexpected token in option: ' + tokens[0]);
    }
  }
};

var onoptionMap = function onoptionMap(tokens) {
  var parse = function parse(value) {
    if (value === 'true') return true;
    if (value === 'false') return false;
    return value.replace(/^"+|"+$/gm, '');
  };

  var map = {};

  while (tokens.length) {
    if (tokens[0] === '}') {
      tokens.shift();
      return map;
    }

    var hasBracket = tokens[0] === '(';
    if (hasBracket) tokens.shift();
    var key = tokens.shift();

    if (hasBracket) {
      if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0]);
      tokens.shift();
    }

    var value = null;

    switch (tokens[0]) {
      case ':':
        if (map[key] !== undefined) throw new Error('Duplicate option map key ' + key);
        tokens.shift();
        value = parse(tokens.shift());

        if (value === '{') {
          // option foo = {bar: baz}
          value = onoptionMap(tokens);
        }

        map[key] = value;

        if (tokens[0] === ';') {
          tokens.shift();
        }

        break;

      case '{':
        tokens.shift();
        value = onoptionMap(tokens);
        if (map[key] === undefined) map[key] = [];
        if (!Array.isArray(map[key])) throw new Error('Duplicate option map key ' + key);
        map[key].push(value);
        break;

      default:
        throw new Error('Unexpected token in option map: ' + tokens[0]);
    }
  }

  throw new Error('No closing tag for option map');
};

var onimport = function onimport(tokens) {
  tokens.shift();
  var file = tokens.shift().replace(/^"+|"+$/gm, '');
  if (tokens[0] !== ';') throw new Error('Unexpected token: ' + tokens[0] + '. Expected ";"');
  tokens.shift();
  return file;
};

var onservice = function onservice(tokens) {
  tokens.shift();
  var service = {
    name: tokens.shift(),
    methods: [],
    options: {}
  };
  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0]);
  tokens.shift();

  while (tokens.length) {
    if (tokens[0] === '}') {
      tokens.shift(); // there goes optional semicolon after the enclosing "}"

      if (tokens[0] === ';') tokens.shift();
      return service;
    }

    switch (tokens[0]) {
      case 'option':
        var opt = onoption(tokens);
        if (service.options[opt.name] !== undefined) throw new Error('Duplicate option ' + opt.name);
        service.options[opt.name] = opt.value;
        break;

      case 'rpc':
        service.methods.push(onrpc(tokens));
        break;

      default:
        throw new Error('Unexpected token in service: ' + tokens[0]);
    }
  }

  throw new Error('No closing tag for service');
};

var onrpc = function onrpc(tokens) {
  tokens.shift();
  var rpc = {
    name: tokens.shift(),
    input_type: null,
    output_type: null,
    client_streaming: false,
    server_streaming: false,
    options: {}
  };
  if (tokens[0] !== '(') throw new Error('Expected ( but found ' + tokens[0]);
  tokens.shift();

  if (tokens[0] === 'stream') {
    tokens.shift();
    rpc.client_streaming = true;
  }

  rpc.input_type = tokens.shift();
  if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0]);
  tokens.shift();
  if (tokens[0] !== 'returns') throw new Error('Expected returns but found ' + tokens[0]);
  tokens.shift();
  if (tokens[0] !== '(') throw new Error('Expected ( but found ' + tokens[0]);
  tokens.shift();

  if (tokens[0] === 'stream') {
    tokens.shift();
    rpc.server_streaming = true;
  }

  rpc.output_type = tokens.shift();
  if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0]);
  tokens.shift();

  if (tokens[0] === ';') {
    tokens.shift();
    return rpc;
  }

  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0]);
  tokens.shift();

  while (tokens.length) {
    if (tokens[0] === '}') {
      tokens.shift(); // there goes optional semicolon after the enclosing "}"

      if (tokens[0] === ';') tokens.shift();
      return rpc;
    }

    if (tokens[0] === 'option') {
      var opt = onoption(tokens);
      if (rpc.options[opt.name] !== undefined) throw new Error('Duplicate option ' + opt.name);
      rpc.options[opt.name] = opt.value;
    } else {
      throw new Error('Unexpected token in rpc options: ' + tokens[0]);
    }
  }

  throw new Error('No closing tag for rpc');
};

var parse = function parse(buf) {
  var tokens = tokenize(buf.toString()); // check for isolated strings in tokens by looking for opening quote

  for (var i = 0; i < tokens.length; i++) {
    if (/^("|')([^'"]*)$/.test(tokens[i])) {
      var j;

      if (tokens[i].length === 1) {
        j = i + 1;
      } else {
        j = i;
      } // look ahead for the closing quote and collapse all
      // in-between tokens into a single token


      for (j; j < tokens.length; j++) {
        if (/^([^'"]*)("|')$/.test(tokens[j])) {
          tokens = tokens.slice(0, i).concat(tokens.slice(i, j + 1).join('')).concat(tokens.slice(j + 1));
          break;
        }
      }
    }
  }

  var schema = {
    syntax: 3,
    "package": null,
    imports: [],
    enums: [],
    messages: [],
    options: {},
    "extends": []
  };
  var firstline = true;

  while (tokens.length) {
    switch (tokens[0]) {
      case 'package':
        schema["package"] = onpackagename(tokens);
        break;

      case 'syntax':
        if (!firstline) throw new Error('Protobuf syntax version should be first thing in file');
        schema.syntax = onsyntaxversion(tokens);
        break;

      case 'message':
        schema.messages.push(onmessage(tokens));
        break;

      case 'enum':
        schema.enums.push(onenum(tokens));
        break;

      case 'option':
        var opt = onoption(tokens);
        if (schema.options[opt.name]) throw new Error('Duplicate option ' + opt.name);
        schema.options[opt.name] = opt.value;
        break;

      case 'import':
        schema.imports.push(onimport(tokens));
        break;

      case 'extend':
        schema["extends"].push(onextend(tokens));
        break;

      case 'service':
        if (!schema.services) schema.services = [];
        schema.services.push(onservice(tokens));
        break;

      default:
        throw new Error('Unexpected token: ' + tokens[0]);
    }

    firstline = false;
  } // now iterate over messages and propagate extends


  schema["extends"].forEach(function (ext) {
    schema.messages.forEach(function (msg) {
      if (msg.name === ext.name) {
        ext.message.fields.forEach(function (field) {
          if (!msg.extensions || field.tag < msg.extensions.from || field.tag > msg.extensions.to) {
            throw new Error(msg.name + ' does not declare ' + field.tag + ' as an extension number');
          }

          msg.fields.push(field);
        });
      }
    });
  });
  schema.messages.forEach(function (msg) {
    msg.fields.forEach(function (field) {
      var fieldSplit;
      var messageName;
      var nestedEnumName;
      var message;

      function enumNameIsFieldType(en) {
        return en.name === field.type;
      }

      function enumNameIsNestedEnumName(en) {
        return en.name === nestedEnumName;
      }

      if (field.options && field.options.packed === 'true') {
        if (PACKABLE_TYPES.indexOf(field.type) === -1) {
          // let's see if it's an enum
          if (field.type.indexOf('.') === -1) {
            if (msg.enums && msg.enums.some(enumNameIsFieldType)) {
              return;
            }
          } else {
            fieldSplit = field.type.split('.');

            if (fieldSplit.length > 2) {
              throw new Error('what is this?');
            }

            messageName = fieldSplit[0];
            nestedEnumName = fieldSplit[1];
            schema.messages.some(function (msg) {
              if (msg.name === messageName) {
                message = msg;
                return msg;
              }
            });

            if (message && message.enums && message.enums.some(enumNameIsNestedEnumName)) {
              return;
            }
          }

          throw new Error('Fields of type ' + field.type + ' cannot be declared [packed=true]. ' + 'Only repeated fields of primitive numeric types (types which use ' + 'the varint, 32-bit, or 64-bit wire types) can be declared "packed". ' + 'See https://developers.google.com/protocol-buffers/docs/encoding#optional');
        }
      }
    });
  });
  return schema;
};

module.exports = parse;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (sch) {
  var noComments = function noComments(line) {
    var i = line.indexOf('//');
    return i > -1 ? line.slice(0, i) : line;
  };

  var noMultilineComments = function noMultilineComments() {
    var inside = false;
    return function (token) {
      if (token === '/*') {
        inside = true;
        return false;
      }

      if (token === '*/') {
        inside = false;
        return false;
      }

      return !inside;
    };
  };

  var trim = function trim(line) {
    return line.trim();
  };

  return sch.replace(/([;,{}()=:[\]<>]|\/\*|\*\/)/g, ' $1 ').split(/\n/).map(trim).filter(Boolean).map(noComments).map(trim).filter(Boolean).join('\n').split(/\s+|\n+/gm).filter(noMultilineComments());
};

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var onfield = function onfield(f, result) {
  var prefix = f.repeated ? 'repeated' : f.required ? 'required' : 'optional';
  if (f.type === 'map') prefix = 'map<' + f.map.from + ',' + f.map.to + '>';
  if (f.oneof) prefix = '';
  var opts = Object.keys(f.options || {}).map(function (key) {
    return key + ' = ' + f.options[key];
  }).join(',');
  if (opts) opts = ' [' + opts + ']';
  result.push((prefix ? prefix + ' ' : '') + (f.map === 'map' ? '' : f.type + ' ') + f.name + ' = ' + f.tag + opts + ';');
  return result;
};

var onmessage = function onmessage(m, result) {
  result.push('message ' + m.name + ' {');
  if (!m.enums) m.enums = [];
  m.enums.forEach(function (e) {
    result.push(onenum(e, []));
  });
  if (!m.messages) m.messages = [];
  m.messages.forEach(function (m) {
    result.push(onmessage(m, []));
  });
  var oneofs = {};
  if (!m.fields) m.fields = [];
  m.fields.forEach(function (f) {
    if (f.oneof) {
      if (!oneofs[f.oneof]) oneofs[f.oneof] = [];
      oneofs[f.oneof].push(onfield(f, []));
    } else {
      result.push(onfield(f, []));
    }
  });
  Object.keys(oneofs).forEach(function (n) {
    oneofs[n].unshift('oneof ' + n + ' {');
    oneofs[n].push('}');
    result.push(oneofs[n]);
  });
  result.push('}', '');
  return result;
};

var onenum = function onenum(e, result) {
  result.push('enum ' + e.name + ' {');
  if (!e.options) e.options = {};
  var options = onoption(e.options, []);

  if (options.length > 1) {
    result.push(options.slice(0, -1));
  }

  Object.keys(e.values).map(function (v) {
    var val = onenumvalue(e.values[v]);
    result.push([v + ' = ' + val + ';']);
  });
  result.push('}', '');
  return result;
};

var onenumvalue = function onenumvalue(v, result) {
  var opts = Object.keys(v.options || {}).map(function (key) {
    return key + ' = ' + v.options[key];
  }).join(',');
  if (opts) opts = ' [' + opts + ']';
  var val = v.value + opts;
  return val;
};

var onoption = function onoption(o, result) {
  var keys = Object.keys(o);
  keys.forEach(function (option) {
    var v = o[option];
    if (~option.indexOf('.')) option = '(' + option + ')';

    var type = _typeof(v);

    if (type === 'object') {
      v = onoptionMap(v, []);
      if (v.length) result.push('option ' + option + ' = {', v, '};');
    } else {
      if (type === 'string' && option !== 'optimize_for') v = '"' + v + '"';
      result.push('option ' + option + ' = ' + v + ';');
    }
  });

  if (keys.length > 0) {
    result.push('');
  }

  return result;
};

var onoptionMap = function onoptionMap(o, result) {
  var keys = Object.keys(o);
  keys.forEach(function (k) {
    var v = o[k];

    var type = _typeof(v);

    if (type === 'object') {
      if (Array.isArray(v)) {
        v.forEach(function (v) {
          v = onoptionMap(v, []);
          if (v.length) result.push(k + ' {', v, '}');
        });
      } else {
        v = onoptionMap(v, []);
        if (v.length) result.push(k + ' {', v, '}');
      }
    } else {
      if (type === 'string') v = '"' + v + '"';
      result.push(k + ': ' + v);
    }
  });
  return result;
};

var onservices = function onservices(s, result) {
  result.push('service ' + s.name + ' {');
  if (!s.options) s.options = {};
  onoption(s.options, result);
  if (!s.methods) s.methods = [];
  s.methods.forEach(function (m) {
    result.push(onrpc(m, []));
  });
  result.push('}', '');
  return result;
};

var onrpc = function onrpc(rpc, result) {
  var def = 'rpc ' + rpc.name + '(';
  if (rpc.client_streaming) def += 'stream ';
  def += rpc.input_type + ') returns (';
  if (rpc.server_streaming) def += 'stream ';
  def += rpc.output_type + ')';
  if (!rpc.options) rpc.options = {};
  var options = onoption(rpc.options, []);

  if (options.length > 1) {
    result.push(def + ' {', options.slice(0, -1), '}');
  } else {
    result.push(def + ';');
  }

  return result;
};

var indent = function indent(lvl) {
  return function (line) {
    if (Array.isArray(line)) return line.map(indent(lvl + '  ')).join('\n');
    return lvl + line;
  };
};

module.exports = function (schema) {
  var result = [];
  result.push('syntax = "proto' + schema.syntax + '";', '');
  if (schema["package"]) result.push('package ' + schema["package"] + ';', '');
  if (!schema.options) schema.options = {};
  onoption(schema.options, result);
  if (!schema.enums) schema.enums = [];
  schema.enums.forEach(function (e) {
    onenum(e, result);
  });
  if (!schema.messages) schema.messages = [];
  schema.messages.forEach(function (m) {
    onmessage(m, result);
  });

  if (schema.services) {
    schema.services.forEach(function (s) {
      onservices(s, result);
    });
  }

  return result.map(indent('')).join('\n');
};

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var encodings = __webpack_require__(215);

var compileDecode = __webpack_require__(217);

var compileEncode = __webpack_require__(218);

var compileEncodingLength = __webpack_require__(219);

var varint = __webpack_require__(12);

var flatten = function flatten(values) {
  if (!values) return null;
  var result = {};
  Object.keys(values).forEach(function (k) {
    result[k] = values[k].value;
  });
  return result;
};

module.exports = function (schema, extraEncodings) {
  var messages = {};
  var enums = {};
  var cache = {};

  var visit = function visit(schema, prefix) {
    if (schema.enums) {
      schema.enums.forEach(function (e) {
        e.id = prefix + (prefix ? '.' : '') + e.name;
        enums[e.id] = e;
        visit(e, e.id);
      });
    }

    if (schema.messages) {
      schema.messages.forEach(function (m) {
        m.id = prefix + (prefix ? '.' : '') + m.name;
        messages[m.id] = m;
        m.fields.forEach(function (f) {
          if (!f.map) return;
          var name = 'Map_' + f.map.from + '_' + f.map.to;
          var map = {
            name: name,
            enums: [],
            messages: [],
            fields: [{
              name: 'key',
              type: f.map.from,
              tag: 1,
              repeated: false,
              required: true
            }, {
              name: 'value',
              type: f.map.to,
              tag: 2,
              repeated: false,
              required: false
            }],
            extensions: null,
            id: prefix + (prefix ? '.' : '') + name
          };

          if (!messages[map.id]) {
            messages[map.id] = map;
            schema.messages.push(map);
          }

          f.type = name;
          f.repeated = true;
        });
        visit(m, m.id);
      });
    }
  };

  visit(schema, '');

  var compileEnum = function compileEnum(e) {
    var values = Object.keys(e.values || []).map(function (k) {
      return parseInt(e.values[k].value, 10);
    });

    var encode = function encode(val, buf, offset) {
      if (!values.length || values.indexOf(val) === -1) {
        throw new Error('Invalid enum value: ' + val);
      }

      varint.encode(val, buf, offset);
      encode.bytes = varint.encode.bytes;
      return buf;
    };

    var decode = function decode(buf, offset) {
      var val = varint.decode(buf, offset);

      if (!values.length || values.indexOf(val) === -1) {
        throw new Error('Invalid enum value: ' + val);
      }

      decode.bytes = varint.decode.bytes;
      return val;
    };

    return encodings.make(0, encode, decode, varint.encodingLength);
  };

  var compileMessage = function compileMessage(m, exports) {
    m.messages.forEach(function (nested) {
      exports[nested.name] = resolve(nested.name, m.id);
    });
    m.enums.forEach(function (val) {
      exports[val.name] = flatten(val.values);
    });
    exports.type = 2;
    exports.message = true;
    exports.name = m.name;
    var oneofs = {};
    m.fields.forEach(function (f) {
      if (!f.oneof) return;
      if (!oneofs[f.oneof]) oneofs[f.oneof] = [];
      oneofs[f.oneof].push(f.name);
    });
    var enc = m.fields.map(function (f) {
      return resolve(f.type, m.id);
    });
    var encodingLength = compileEncodingLength(m, enc, oneofs);
    var encode = compileEncode(m, resolve, enc, oneofs, encodingLength);
    var decode = compileDecode(m, resolve, enc); // end of compilation - return all the things

    encode.bytes = decode.bytes = 0;
    exports.buffer = true;
    exports.encode = encode;
    exports.decode = decode;
    exports.encodingLength = encodingLength;
    return exports;
  };

  var resolve = function resolve(name, from, compile) {
    if (extraEncodings && extraEncodings[name]) return extraEncodings[name];
    if (encodings[name]) return encodings[name];
    var m = (from ? from + '.' + name : name).split('.').map(function (part, i, list) {
      return list.slice(0, i).concat(name).join('.');
    }).reverse().reduce(function (result, id) {
      return result || messages[id] || enums[id];
    }, null);
    if (compile === false) return m;
    if (!m) throw new Error('Could not resolve ' + name);
    if (m.values) return compileEnum(m);
    var res = cache[m.id] || compileMessage(m, cache[m.id] = {});
    return res;
  };

  return (schema.enums || []).concat((schema.messages || []).map(function (message) {
    return resolve(message.id);
  }));
};

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var varint = __webpack_require__(12);

var svarint = __webpack_require__(216);

var Buffer = __webpack_require__(51).Buffer;

var encoder = function encoder(type, encode, decode, encodingLength) {
  encode.bytes = decode.bytes = 0;
  return {
    type: type,
    encode: encode,
    decode: decode,
    encodingLength: encodingLength
  };
};

exports.make = encoder;

exports.bytes = function (tag) {
  var bufferLength = function bufferLength(val) {
    return Buffer.isBuffer(val) ? val.length : Buffer.byteLength(val);
  };

  var encodingLength = function encodingLength(val) {
    var len = bufferLength(val);
    return varint.encodingLength(len) + len;
  };

  var encode = function encode(val, buffer, offset) {
    var oldOffset = offset;
    var len = bufferLength(val);
    varint.encode(len, buffer, offset);
    offset += varint.encode.bytes;
    if (Buffer.isBuffer(val)) val.copy(buffer, offset);else buffer.write(val, offset, len);
    offset += len;
    encode.bytes = offset - oldOffset;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var oldOffset = offset;
    var len = varint.decode(buffer, offset);
    offset += varint.decode.bytes;
    var val = buffer.slice(offset, offset + len);
    offset += val.length;
    decode.bytes = offset - oldOffset;
    return val;
  };

  return encoder(2, encode, decode, encodingLength);
}();

exports.string = function () {
  var encodingLength = function encodingLength(val) {
    var len = Buffer.byteLength(val);
    return varint.encodingLength(len) + len;
  };

  var encode = function encode(val, buffer, offset) {
    var oldOffset = offset;
    var len = Buffer.byteLength(val);
    varint.encode(len, buffer, offset, 'utf-8');
    offset += varint.encode.bytes;
    buffer.write(val, offset, len);
    offset += len;
    encode.bytes = offset - oldOffset;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var oldOffset = offset;
    var len = varint.decode(buffer, offset);
    offset += varint.decode.bytes;
    var val = buffer.toString('utf-8', offset, offset + len);
    offset += len;
    decode.bytes = offset - oldOffset;
    return val;
  };

  return encoder(2, encode, decode, encodingLength);
}();

exports.bool = function () {
  var encodingLength = function encodingLength(val) {
    return 1;
  };

  var encode = function encode(val, buffer, offset) {
    buffer[offset] = val ? 1 : 0;
    encode.bytes = 1;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var bool = buffer[offset] > 0;
    decode.bytes = 1;
    return bool;
  };

  return encoder(0, encode, decode, encodingLength);
}();

exports.int32 = function () {
  var decode = function decode(buffer, offset) {
    var val = varint.decode(buffer, offset);
    decode.bytes = varint.decode.bytes;
    return val > 2147483647 ? val - 4294967296 : val;
  };

  var encode = function encode(val, buffer, offset) {
    varint.encode(val < 0 ? val + 4294967296 : val, buffer, offset);
    encode.bytes = varint.encode.bytes;
    return buffer;
  };

  var encodingLength = function encodingLength(val) {
    return varint.encodingLength(val < 0 ? val + 4294967296 : val);
  };

  return encoder(0, varint.encode, decode, encodingLength);
}();

exports.int64 = function () {
  var decode = function decode(buffer, offset) {
    var val = varint.decode(buffer, offset);

    if (val >= Math.pow(2, 63)) {
      var limit = 9;

      while (buffer[offset + limit - 1] === 0xff) {
        limit--;
      }

      limit = limit || 9;
      var subset = Buffer.allocUnsafe(limit);
      buffer.copy(subset, 0, offset, offset + limit);
      subset[limit - 1] = subset[limit - 1] & 0x7f;
      val = -1 * varint.decode(subset, 0);
      decode.bytes = 10;
    } else {
      decode.bytes = varint.decode.bytes;
    }

    return val;
  };

  var encode = function encode(val, buffer, offset) {
    if (val < 0) {
      var last = offset + 9;
      varint.encode(val * -1, buffer, offset);
      offset += varint.encode.bytes - 1;
      buffer[offset] = buffer[offset] | 0x80;

      while (offset < last - 1) {
        offset++;
        buffer[offset] = 0xff;
      }

      buffer[last] = 0x01;
      encode.bytes = 10;
    } else {
      varint.encode(val, buffer, offset);
      encode.bytes = varint.encode.bytes;
    }

    return buffer;
  };

  var encodingLength = function encodingLength(val) {
    return val < 0 ? 10 : varint.encodingLength(val);
  };

  return encoder(0, encode, decode, encodingLength);
}();

exports.sint32 = exports.sint64 = function () {
  return encoder(0, svarint.encode, svarint.decode, svarint.encodingLength);
}();

exports.uint32 = exports.uint64 = exports["enum"] = exports.varint = function () {
  return encoder(0, varint.encode, varint.decode, varint.encodingLength);
}(); // we cannot represent these in javascript so we just use buffers


exports.fixed64 = exports.sfixed64 = function () {
  var encodingLength = function encodingLength(val) {
    return 8;
  };

  var encode = function encode(val, buffer, offset) {
    val.copy(buffer, offset);
    encode.bytes = 8;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var val = buffer.slice(offset, offset + 8);
    decode.bytes = 8;
    return val;
  };

  return encoder(1, encode, decode, encodingLength);
}();

exports["double"] = function () {
  var encodingLength = function encodingLength(val) {
    return 8;
  };

  var encode = function encode(val, buffer, offset) {
    buffer.writeDoubleLE(val, offset);
    encode.bytes = 8;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var val = buffer.readDoubleLE(offset);
    decode.bytes = 8;
    return val;
  };

  return encoder(1, encode, decode, encodingLength);
}();

exports.fixed32 = function () {
  var encodingLength = function encodingLength(val) {
    return 4;
  };

  var encode = function encode(val, buffer, offset) {
    buffer.writeUInt32LE(val, offset);
    encode.bytes = 4;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var val = buffer.readUInt32LE(offset);
    decode.bytes = 4;
    return val;
  };

  return encoder(5, encode, decode, encodingLength);
}();

exports.sfixed32 = function () {
  var encodingLength = function encodingLength(val) {
    return 4;
  };

  var encode = function encode(val, buffer, offset) {
    buffer.writeInt32LE(val, offset);
    encode.bytes = 4;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var val = buffer.readInt32LE(offset);
    decode.bytes = 4;
    return val;
  };

  return encoder(5, encode, decode, encodingLength);
}();

exports["float"] = function () {
  var encodingLength = function encodingLength(val) {
    return 4;
  };

  var encode = function encode(val, buffer, offset) {
    buffer.writeFloatLE(val, offset);
    encode.bytes = 4;
    return buffer;
  };

  var decode = function decode(buffer, offset) {
    var val = buffer.readFloatLE(offset);
    decode.bytes = 4;
    return val;
  };

  return encoder(5, encode, decode, encodingLength);
}();

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var varint = __webpack_require__(12);

exports.encode = function encode(v, b, o) {
  v = v >= 0 ? v * 2 : v * -2 - 1;
  var r = varint.encode(v, b, o);
  encode.bytes = varint.encode.bytes;
  return r;
};

exports.decode = function decode(b, o) {
  var v = varint.decode(b, o);
  decode.bytes = varint.decode.bytes;
  return v & 1 ? (v + 1) / -2 : v / 2;
};

exports.encodingLength = function (v) {
  return varint.encodingLength(v >= 0 ? v * 2 : v * -2 - 1);
};

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint max-depth: 1 */


var varint = __webpack_require__(12);

var defined = __webpack_require__(53).defined;

function compileDecode(m, resolve, enc) {
  var requiredFields = [];
  var fields = {};
  var oneofFields = [];
  var vals = [];

  for (var i = 0; i < enc.length; i++) {
    var field = m.fields[i];
    fields[field.tag] = i;
    var def = field.options && field.options["default"];
    var resolved = resolve(field.type, m.id, false);
    vals[i] = [def, resolved && resolved.values];
    m.fields[i].packed = field.repeated && field.options && field.options.packed && field.options.packed !== 'false';

    if (field.required) {
      requiredFields.push(field.name);
    }

    if (field.oneof) {
      oneofFields.push(field.name);
    }
  }

  function decodeField(e, field, obj, buf, offset, i) {
    var name = field.name;

    if (field.oneof) {
      // clear already defined oneof fields
      var props = Object.keys(obj);

      for (var j = 0; j < props.length; j++) {
        if (oneofFields.indexOf(props[j]) > -1) {
          delete obj[props[j]];
        }
      }
    }

    if (e.message) {
      var len = varint.decode(buf, offset);
      offset += varint.decode.bytes;
      var decoded = e.decode(buf, offset, offset + len);

      if (field.map) {
        obj[name] = obj[name] || {};
        obj[name][decoded.key] = decoded.value;
      } else if (field.repeated) {
        obj[name] = obj[name] || [];
        obj[name].push(decoded);
      } else {
        obj[name] = decoded;
      }
    } else {
      if (field.repeated) {
        obj[name] = obj[name] || [];
        obj[name].push(e.decode(buf, offset));
      } else {
        obj[name] = e.decode(buf, offset);
      }
    }

    offset += e.decode.bytes;
    return offset;
  }

  return function decode(buf, offset, end) {
    if (offset == null) {
      offset = 0;
    }

    if (end == null) {
      end = buf.length;
    }

    if (!(end <= buf.length && offset <= buf.length)) {
      throw new Error('Decoded message is not valid');
    }

    var oldOffset = offset;
    var obj = {};
    var field;

    while (true) {
      if (end <= offset) {
        // finished
        // check required methods
        var name = '';
        var j = 0;

        for (j = 0; j < requiredFields.length; j++) {
          name = requiredFields[j];

          if (!defined(obj[name])) {
            throw new Error('Decoded message is not valid, missing required field: ' + name);
          }
        } // fill out missing defaults


        var val;
        var def;

        for (j = 0; j < enc.length; j++) {
          field = m.fields[j];
          def = vals[j][0];
          val = vals[j][1];
          name = field.name;

          if (defined(obj[name])) {
            continue;
          }

          var done = false;

          if (field.oneof) {
            var props = Object.keys(obj);

            for (var k = 0; k < props.length; k++) {
              if (oneofFields.indexOf(props[k]) > -1) {
                done = true;
                break;
              }
            }
          }

          if (done) {
            continue;
          }

          if (val) {
            // is enum
            if (field.repeated) {
              obj[name] = [];
            } else {
              def = def && val[def] ? val[def].value : val[Object.keys(val)[0]].value;
              obj[name] = parseInt(def || 0, 10);
            }
          } else {
            obj[name] = defaultValue(field, def);
          }
        }

        decode.bytes = offset - oldOffset;
        return obj;
      }

      var prefix = varint.decode(buf, offset);
      offset += varint.decode.bytes;
      var tag = prefix >> 3;
      var i = fields[tag];

      if (i == null) {
        offset = skip(prefix & 7, buf, offset);
        continue;
      }

      var e = enc[i];
      field = m.fields[i];

      if (field.packed) {
        var packedEnd = varint.decode(buf, offset);
        offset += varint.decode.bytes;
        packedEnd += offset;

        while (offset < packedEnd) {
          offset = decodeField(e, field, obj, buf, offset, i);
        }
      } else {
        offset = decodeField(e, field, obj, buf, offset, i);
      }
    }
  };
}

var skip = function skip(type, buffer, offset) {
  switch (type) {
    case 0:
      varint.decode(buffer, offset);
      return offset + varint.decode.bytes;

    case 1:
      return offset + 8;

    case 2:
      var len = varint.decode(buffer, offset);
      return offset + varint.decode.bytes + len;

    case 3:
    case 4:
      throw new Error('Groups are not supported');

    case 5:
      return offset + 4;

    default:
      throw new Error('Unknown wire type: ' + type);
  }
};

var defaultValue = function defaultValue(f, def) {
  if (f.map) return {};
  if (f.repeated) return [];

  switch (f.type) {
    case 'string':
      return def != null ? def : '';

    case 'bool':
      return def === 'true';

    case 'float':
    case 'double':
    case 'sfixed32':
    case 'fixed32':
    case 'varint':
    case 'enum':
    case 'uint64':
    case 'uint32':
    case 'int64':
    case 'int32':
    case 'sint64':
    case 'sint32':
      return parseInt(def || 0, 10);

    default:
      return null;
  }
};

module.exports = compileDecode;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var defined = __webpack_require__(53).defined;

var varint = __webpack_require__(12);

function compileEncode(m, resolve, enc, oneofs, encodingLength) {
  var oneofsKeys = Object.keys(oneofs);
  var encLength = enc.length;
  var ints = {};

  for (var i = 0; i < encLength; i++) {
    ints[i] = {
      p: varint.encode(m.fields[i].tag << 3 | 2),
      h: varint.encode(m.fields[i].tag << 3 | enc[i].type)
    };
    var field = m.fields[i];
    m.fields[i].packed = field.repeated && field.options && field.options.packed && field.options.packed !== 'false';
  }

  function encodeField(buf, offset, h, e, packed, innerVal) {
    var j = 0;

    if (!packed) {
      for (j = 0; j < h.length; j++) {
        buf[offset++] = h[j];
      }
    }

    if (e.message) {
      varint.encode(e.encodingLength(innerVal), buf, offset);
      offset += varint.encode.bytes;
    }

    e.encode(innerVal, buf, offset);
    return offset + e.encode.bytes;
  }

  return function encode(obj, buf, offset) {
    if (offset == null) {
      offset = 0;
    }

    if (buf == null) {
      buf = Buffer.allocUnsafe(encodingLength(obj));
    }

    var oldOffset = offset;
    var objKeys = Object.keys(obj);
    var i = 0; // oneof checks

    var match = false;

    for (i = 0; i < oneofsKeys.length; i++) {
      var name = oneofsKeys[i];
      var prop = oneofs[i];

      if (objKeys.indexOf(prop) > -1) {
        if (match) {
          throw new Error('only one of the properties defined in oneof ' + name + ' can be set');
        }

        match = true;
      }
    }

    for (i = 0; i < encLength; i++) {
      var e = enc[i];
      var field = m.fields[i]; // was f

      var val = obj[field.name];
      var j = 0;

      if (!defined(val)) {
        if (field.required) {
          throw new Error(field.name + ' is required');
        }

        continue;
      }

      var p = ints[i].p;
      var h = ints[i].h;
      var packed = field.packed;

      if (field.map) {
        var tmp = Object.keys(val);

        for (j = 0; j < tmp.length; j++) {
          tmp[j] = {
            key: tmp[j],
            value: val[tmp[j]]
          };
        }

        val = tmp;
      }

      if (packed) {
        var packedLen = 0;

        for (j = 0; j < val.length; j++) {
          if (!defined(val[j])) {
            continue;
          }

          packedLen += e.encodingLength(val[j]);
        }

        if (packedLen) {
          for (j = 0; j < h.length; j++) {
            buf[offset++] = p[j];
          }

          varint.encode(packedLen, buf, offset);
          offset += varint.encode.bytes;
        }
      }

      if (field.repeated) {
        var innerVal;

        for (j = 0; j < val.length; j++) {
          innerVal = val[j];

          if (!defined(innerVal)) {
            continue;
          }

          offset = encodeField(buf, offset, h, e, packed, innerVal);
        }
      } else {
        offset = encodeField(buf, offset, h, e, packed, val);
      }
    }

    encode.bytes = offset - oldOffset;
    return buf;
  };
}

module.exports = compileEncode;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defined = __webpack_require__(53).defined;

var varint = __webpack_require__(12);

function compileEncodingLength(m, enc, oneofs) {
  var oneofsKeys = Object.keys(oneofs);
  var encLength = enc.length;
  var hls = new Array(encLength);

  for (var i = 0; i < m.fields.length; i++) {
    hls[i] = varint.encodingLength(m.fields[i].tag << 3 | enc[i].type);
    var field = m.fields[i];
    m.fields[i].packed = field.repeated && field.options && field.options.packed && field.options.packed !== 'false';
  }

  return function encodingLength(obj) {
    var length = 0;
    var i = 0;
    var j = 0;

    for (i = 0; i < oneofsKeys.length; i++) {
      var name = oneofsKeys[i];
      var props = oneofs[name];
      var match = false;

      for (j = 0; j < props.length; j++) {
        if (defined(obj[props[j]])) {
          if (match) {
            throw new Error('only one of the properties defined in oneof ' + name + ' can be set');
          }

          match = true;
        }
      }
    }

    for (i = 0; i < encLength; i++) {
      var e = enc[i];
      var field = m.fields[i];
      var val = obj[field.name];
      var hl = hls[i];
      var len;

      if (!defined(val)) {
        if (field.required) {
          throw new Error(field.name + ' is required');
        }

        continue;
      }

      if (field.map) {
        var tmp = Object.keys(val);

        for (j = 0; j < tmp.length; j++) {
          tmp[j] = {
            key: tmp[j],
            value: val[tmp[j]]
          };
        }

        val = tmp;
      }

      if (field.packed) {
        var packedLen = 0;

        for (j = 0; j < val.length; j++) {
          if (!defined(val[j])) {
            continue;
          }

          len = e.encodingLength(val[j]);
          packedLen += len;

          if (e.message) {
            packedLen += varint.encodingLength(len);
          }
        }

        if (packedLen) {
          length += hl + packedLen + varint.encodingLength(packedLen);
        }
      } else if (field.repeated) {
        for (j = 0; j < val.length; j++) {
          if (!defined(val[j])) {
            continue;
          }

          len = e.encodingLength(val[j]);
          length += hl + len + (e.message ? varint.encodingLength(len) : 0);
        }
      } else {
        len = e.encodingLength(val);
        length += hl + len + (e.message ? varint.encodingLength(len) : 0);
      }
    }

    return length;
  };
}

module.exports = compileEncodingLength;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = "message Data {\n  enum DataType {\n    Raw = 0;\n    Directory = 1;\n    File = 2;\n    Metadata = 3;\n    Symlink = 4;\n    HAMTShard = 5;\n  }\n\n  required DataType Type = 1;\n  optional bytes Data = 2;\n  optional uint64 filesize = 3;\n  repeated uint64 blocksizes = 4;\n\n  optional uint64 hashType = 5;\n  optional uint64 fanout = 6;\n}\n\nmessage Metadata {\n  optional string MimeType = 1;\n}";

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Adds a link with its name as property to an object.
 *
 * The link won't be added if its name is empty or matches one of the existing
 * properties.
 *
 * @param {Object} object - The object that contains an array of links
 * @param {string} name - The name of the link to add
 * @param {numner} position - The position within the array of links
 */

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var addNamedLink = function addNamedLink(object, name, position) {
  var skipNames = [''].concat(_toConsumableArray(Object.keys(object)));

  if (skipNames.includes(name)) {
    return;
  }

  Object.defineProperty(object, name, {
    enumerable: true,
    configurable: true,
    get: function get() {
      return object._links[position].Hash;
    }
  });
};

module.exports = addNamedLink;

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

//! stable.js 0.1.8, https://github.com/Two-Screen/stable
//! © 2018 Angry Bytes and contributors. MIT licensed.
(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(void 0, function () {
  'use strict'; // A stable array sort, because `Array#sort()` is not guaranteed stable.
  // This is an implementation of merge sort, without recursion.

  var stable = function stable(arr, comp) {
    return exec(arr.slice(), comp);
  };

  stable.inplace = function (arr, comp) {
    var result = exec(arr, comp); // This simply copies back if the result isn't in the original array,
    // which happens on an odd number of passes.

    if (result !== arr) {
      pass(result, null, arr.length, arr);
    }

    return arr;
  }; // Execute the sort using the input array and a second buffer as work space.
  // Returns one of those two, containing the final result.


  function exec(arr, comp) {
    if (typeof comp !== 'function') {
      comp = function comp(a, b) {
        return String(a).localeCompare(b);
      };
    } // Short-circuit when there's nothing to sort.


    var len = arr.length;

    if (len <= 1) {
      return arr;
    } // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.
    // Chunks are the size of the left or right hand in merge sort.
    // Stop when the left-hand covers all of the array.


    var buffer = new Array(len);

    for (var chk = 1; chk < len; chk *= 2) {
      pass(arr, comp, chk, buffer);
      var tmp = arr;
      arr = buffer;
      buffer = tmp;
    }

    return arr;
  } // Run a single pass with the given chunk size.


  var pass = function pass(arr, comp, chk, result) {
    var len = arr.length;
    var i = 0; // Step size / double chunk size.

    var dbl = chk * 2; // Bounds of the left and right chunks.

    var l, r, e; // Iterators over the left and right chunk.

    var li, ri; // Iterate over pairs of chunks.

    for (l = 0; l < len; l += dbl) {
      r = l + chk;
      e = r + chk;
      if (r > len) r = len;
      if (e > len) e = len; // Iterate both chunks in parallel.

      li = l;
      ri = r;

      while (true) {
        // Compare the chunks.
        if (li < r && ri < e) {
          // This works for a regular `sort()` compatible comparator,
          // but also for a simple comparator like: `a > b`
          if (comp(arr[li], arr[ri]) <= 0) {
            result[i++] = arr[li++];
          } else {
            result[i++] = arr[ri++];
          }
        } // Nothing to compare, just flush what's left.
        else if (li < r) {
            result[i++] = arr[li++];
          } else if (ri < e) {
            result[i++] = arr[ri++];
          } // Both iterators are at the chunk ends.
          else {
              break;
            }
      }
    }
  };

  return stable;
});

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = "// An IPFS MerkleDAG Link\nmessage PBLink {\n\n  // multihash of the target object\n  optional bytes Hash = 1;\n\n  // utf string name. should be unique per object\n  optional string Name = 2;\n\n  // cumulative size of target object\n  optional uint64 Tsize = 3;\n}\n\n// An IPFS MerkleDAG Node\nmessage PBNode {\n\n  // refs to other objects\n  repeated PBLink Links = 2;\n\n  // opaque user data\n  optional bytes Data = 1;\n}";

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var DAGLink = __webpack_require__(19);

function createDagLinkFromB58EncodedHash(link) {
  return new DAGLink(link.Name || link.name || '', link.Tsize || link.Size || link.size || 0, link.Hash || link.hash || link.multihash || link.cid);
}

exports = module.exports;
exports.createDagLinkFromB58EncodedHash = createDagLinkFromB58EncodedHash;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _require = __webpack_require__(1),
    Buffer = _require.Buffer;

var sha3 = __webpack_require__(226);

var mur = __webpack_require__(228);

var sha = __webpack_require__(230);

var _require2 = __webpack_require__(231),
    fromNumberTo32BitBuf = _require2.fromNumberTo32BitBuf; // Note that although this function doesn't do any asynchronous work, we mark
// the function as async because it must return a Promise to match the API
// for other functions that do perform asynchronous work (see sha.browser.js)


var hash = function hash(algorithm) {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(data) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = algorithm;
                _context.next = _context.t0 === 'sha3-224' ? 3 : _context.t0 === 'sha3-256' ? 4 : _context.t0 === 'sha3-384' ? 5 : _context.t0 === 'sha3-512' ? 6 : _context.t0 === 'shake-128' ? 7 : _context.t0 === 'shake-256' ? 8 : _context.t0 === 'keccak-224' ? 9 : _context.t0 === 'keccak-256' ? 10 : _context.t0 === 'keccak-384' ? 11 : _context.t0 === 'keccak-512' ? 12 : _context.t0 === 'murmur3-128' ? 13 : _context.t0 === 'murmur3-32' ? 14 : 15;
                break;

              case 3:
                return _context.abrupt("return", Buffer.from(sha3.sha3_224.arrayBuffer(data)));

              case 4:
                return _context.abrupt("return", Buffer.from(sha3.sha3_256.arrayBuffer(data)));

              case 5:
                return _context.abrupt("return", Buffer.from(sha3.sha3_384.arrayBuffer(data)));

              case 6:
                return _context.abrupt("return", Buffer.from(sha3.sha3_512.arrayBuffer(data)));

              case 7:
                return _context.abrupt("return", Buffer.from(sha3.shake128.create(128).update(data).arrayBuffer()));

              case 8:
                return _context.abrupt("return", Buffer.from(sha3.shake256.create(256).update(data).arrayBuffer()));

              case 9:
                return _context.abrupt("return", Buffer.from(sha3.keccak224.arrayBuffer(data)));

              case 10:
                return _context.abrupt("return", Buffer.from(sha3.keccak256.arrayBuffer(data)));

              case 11:
                return _context.abrupt("return", Buffer.from(sha3.keccak384.arrayBuffer(data)));

              case 12:
                return _context.abrupt("return", Buffer.from(sha3.keccak512.arrayBuffer(data)));

              case 13:
                return _context.abrupt("return", Buffer.from(mur.x64.hash128(data), 'hex'));

              case 14:
                return _context.abrupt("return", fromNumberTo32BitBuf(mur.x86.hash32(data)));

              case 15:
                throw new TypeError("".concat(algorithm, " is not a supported algorithm"));

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  );
};

module.exports = {
  sha1: sha('sha1'),
  sha2256: sha('sha2-256'),
  sha2512: sha('sha2-512'),
  dblSha2256: sha('dbl-sha2-256'),
  sha3224: hash('sha3-224'),
  sha3256: hash('sha3-256'),
  sha3384: hash('sha3-384'),
  sha3512: hash('sha3-512'),
  shake128: hash('shake-128'),
  shake256: hash('shake-256'),
  keccak224: hash('keccak-224'),
  keccak256: hash('keccak-256'),
  keccak384: hash('keccak-384'),
  keccak512: hash('keccak-512'),
  murmur3128: hash('murmur3-128'),
  murmur332: hash('murmur3-32'),
  addBlake: __webpack_require__(232)
};

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */

/*jslint bitwise: true */
(function () {
  'use strict';

  var INPUT_ERROR = 'input is invalid type';
  var FINALIZE_ERROR = 'finalize already called';
  var WINDOW = (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object';
  var root = WINDOW ? window : {};

  if (root.JS_SHA3_NO_WINDOW) {
    WINDOW = false;
  }

  var WEB_WORKER = !WINDOW && (typeof self === "undefined" ? "undefined" : _typeof(self)) === 'object';
  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && (typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && process.versions && process.versions.node;

  if (NODE_JS) {
    root = global;
  } else if (WEB_WORKER) {
    root = self;
  }

  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && ( false ? undefined : _typeof(module)) === 'object' && module.exports;
  var AMD =  true && __webpack_require__(227);
  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var PADDING = [6, 1536, 393216, 100663296];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
  var BITS = [224, 256, 384, 512];
  var SHAKE_BITS = [128, 256];
  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
  var CSHAKE_BYTEPAD = {
    '128': 168,
    '256': 136
  };

  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return _typeof(obj) === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function createOutputMethod(bits, padding, outputType) {
    return function (message) {
      return new Keccak(bits, padding, bits).update(message)[outputType]();
    };
  };

  var createShakeOutputMethod = function createShakeOutputMethod(bits, padding, outputType) {
    return function (message, outputBits) {
      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
    };
  };

  var createCshakeOutputMethod = function createCshakeOutputMethod(bits, padding, outputType) {
    return function (message, outputBits, n, s) {
      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
    };
  };

  var createKmacOutputMethod = function createKmacOutputMethod(bits, padding, outputType) {
    return function (key, message, outputBits, s) {
      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
    };
  };

  var createOutputMethods = function createOutputMethods(method, createMethod, bits, padding) {
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createMethod(bits, padding, type);
    }

    return method;
  };

  var createMethod = function createMethod(bits, padding) {
    var method = createOutputMethod(bits, padding, 'hex');

    method.create = function () {
      return new Keccak(bits, padding, bits);
    };

    method.update = function (message) {
      return method.create().update(message);
    };

    return createOutputMethods(method, createOutputMethod, bits, padding);
  };

  var createShakeMethod = function createShakeMethod(bits, padding) {
    var method = createShakeOutputMethod(bits, padding, 'hex');

    method.create = function (outputBits) {
      return new Keccak(bits, padding, outputBits);
    };

    method.update = function (message, outputBits) {
      return method.create(outputBits).update(message);
    };

    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
  };

  var createCshakeMethod = function createCshakeMethod(bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createCshakeOutputMethod(bits, padding, 'hex');

    method.create = function (outputBits, n, s) {
      if (!n && !s) {
        return methods['shake' + bits].create(outputBits);
      } else {
        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
      }
    };

    method.update = function (message, outputBits, n, s) {
      return method.create(outputBits, n, s).update(message);
    };

    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
  };

  var createKmacMethod = function createKmacMethod(bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createKmacOutputMethod(bits, padding, 'hex');

    method.create = function (key, outputBits, s) {
      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
    };

    method.update = function (key, message, outputBits, s) {
      return method.create(key, outputBits, s).update(message);
    };

    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
  };

  var algorithms = [{
    name: 'keccak',
    padding: KECCAK_PADDING,
    bits: BITS,
    createMethod: createMethod
  }, {
    name: 'sha3',
    padding: PADDING,
    bits: BITS,
    createMethod: createMethod
  }, {
    name: 'shake',
    padding: SHAKE_PADDING,
    bits: SHAKE_BITS,
    createMethod: createShakeMethod
  }, {
    name: 'cshake',
    padding: CSHAKE_PADDING,
    bits: SHAKE_BITS,
    createMethod: createCshakeMethod
  }, {
    name: 'kmac',
    padding: CSHAKE_PADDING,
    bits: SHAKE_BITS,
    createMethod: createKmacMethod
  }];
  var methods = {},
      methodNames = [];

  for (var i = 0; i < algorithms.length; ++i) {
    var algorithm = algorithms[i];
    var bits = algorithm.bits;

    for (var j = 0; j < bits.length; ++j) {
      var methodName = algorithm.name + '_' + bits[j];
      methodNames.push(methodName);
      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);

      if (algorithm.name !== 'sha3') {
        var newMethodName = algorithm.name + bits[j];
        methodNames.push(newMethodName);
        methods[newMethodName] = methods[methodName];
      }
    }
  }

  function Keccak(bits, padding, outputBits) {
    this.blocks = [];
    this.s = [];
    this.padding = padding;
    this.outputBits = outputBits;
    this.reset = true;
    this.finalized = false;
    this.block = 0;
    this.start = 0;
    this.blockCount = 1600 - (bits << 1) >> 5;
    this.byteCount = this.blockCount << 2;
    this.outputBlocks = outputBits >> 5;
    this.extraBytes = (outputBits & 31) >> 3;

    for (var i = 0; i < 50; ++i) {
      this.s[i] = 0;
    }
  }

  Keccak.prototype.update = function (message) {
    if (this.finalized) {
      throw new Error(FINALIZE_ERROR);
    }

    var notString,
        type = _typeof(message);

    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }

      notString = true;
    }

    var blocks = this.blocks,
        byteCount = this.byteCount,
        length = message.length,
        blockCount = this.blockCount,
        index = 0,
        s = this.s,
        i,
        code;

    while (index < length) {
      if (this.reset) {
        this.reset = false;
        blocks[0] = this.block;

        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }

      if (notString) {
        for (i = this.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);

          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          }
        }
      }

      this.lastByteIndex = i;

      if (i >= byteCount) {
        this.start = i - byteCount;
        this.block = blocks[blockCount];

        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }

        f(s);
        this.reset = true;
      } else {
        this.start = i;
      }
    }

    return this;
  };

  Keccak.prototype.encode = function (x, right) {
    var o = x & 255,
        n = 1;
    var bytes = [o];
    x = x >> 8;
    o = x & 255;

    while (o > 0) {
      bytes.unshift(o);
      x = x >> 8;
      o = x & 255;
      ++n;
    }

    if (right) {
      bytes.push(n);
    } else {
      bytes.unshift(n);
    }

    this.update(bytes);
    return bytes.length;
  };

  Keccak.prototype.encodeString = function (str) {
    var notString,
        type = _typeof(str);

    if (type !== 'string') {
      if (type === 'object') {
        if (str === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
          str = new Uint8Array(str);
        } else if (!Array.isArray(str)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }

      notString = true;
    }

    var bytes = 0,
        length = str.length;

    if (notString) {
      bytes = length;
    } else {
      for (var i = 0; i < str.length; ++i) {
        var code = str.charCodeAt(i);

        if (code < 0x80) {
          bytes += 1;
        } else if (code < 0x800) {
          bytes += 2;
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes += 3;
        } else {
          code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++i) & 0x3ff);
          bytes += 4;
        }
      }
    }

    bytes += this.encode(bytes * 8);
    this.update(str);
    return bytes;
  };

  Keccak.prototype.bytepad = function (strs, w) {
    var bytes = this.encode(w);

    for (var i = 0; i < strs.length; ++i) {
      bytes += this.encodeString(strs[i]);
    }

    var paddingBytes = w - bytes % w;
    var zeros = [];
    zeros.length = paddingBytes;
    this.update(zeros);
    return this;
  };

  Keccak.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }

    this.finalized = true;
    var blocks = this.blocks,
        i = this.lastByteIndex,
        blockCount = this.blockCount,
        s = this.s;
    blocks[i >> 2] |= this.padding[i & 3];

    if (this.lastByteIndex === this.byteCount) {
      blocks[0] = blocks[blockCount];

      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }

    blocks[blockCount - 1] |= 0x80000000;

    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }

    f(s);
  };

  Keccak.prototype.toString = Keccak.prototype.hex = function () {
    this.finalize();
    var blockCount = this.blockCount,
        s = this.s,
        outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes,
        i = 0,
        j = 0;
    var hex = '',
        block;

    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
      }

      if (j % blockCount === 0) {
        f(s);
        i = 0;
      }
    }

    if (extraBytes) {
      block = s[i];
      hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];

      if (extraBytes > 1) {
        hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];
      }

      if (extraBytes > 2) {
        hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];
      }
    }

    return hex;
  };

  Keccak.prototype.arrayBuffer = function () {
    this.finalize();
    var blockCount = this.blockCount,
        s = this.s,
        outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes,
        i = 0,
        j = 0;
    var bytes = this.outputBits >> 3;
    var buffer;

    if (extraBytes) {
      buffer = new ArrayBuffer(outputBlocks + 1 << 2);
    } else {
      buffer = new ArrayBuffer(bytes);
    }

    var array = new Uint32Array(buffer);

    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        array[j] = s[i];
      }

      if (j % blockCount === 0) {
        f(s);
      }
    }

    if (extraBytes) {
      array[i] = s[i];
      buffer = buffer.slice(0, bytes);
    }

    return buffer;
  };

  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

  Keccak.prototype.digest = Keccak.prototype.array = function () {
    this.finalize();
    var blockCount = this.blockCount,
        s = this.s,
        outputBlocks = this.outputBlocks,
        extraBytes = this.extraBytes,
        i = 0,
        j = 0;
    var array = [],
        offset,
        block;

    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        array[offset + 1] = block >> 8 & 0xFF;
        array[offset + 2] = block >> 16 & 0xFF;
        array[offset + 3] = block >> 24 & 0xFF;
      }

      if (j % blockCount === 0) {
        f(s);
      }
    }

    if (extraBytes) {
      offset = j << 2;
      block = s[i];
      array[offset] = block & 0xFF;

      if (extraBytes > 1) {
        array[offset + 1] = block >> 8 & 0xFF;
      }

      if (extraBytes > 2) {
        array[offset + 2] = block >> 16 & 0xFF;
      }
    }

    return array;
  };

  function Kmac(bits, padding, outputBits) {
    Keccak.call(this, bits, padding, outputBits);
  }

  Kmac.prototype = new Keccak();

  Kmac.prototype.finalize = function () {
    this.encode(this.outputBits, true);
    return Keccak.prototype.finalize.call(this);
  };

  var f = function f(s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;

    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
      h = c8 ^ (c2 << 1 | c3 >>> 31);
      l = c9 ^ (c3 << 1 | c2 >>> 31);
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ (c4 << 1 | c5 >>> 31);
      l = c1 ^ (c5 << 1 | c4 >>> 31);
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ (c6 << 1 | c7 >>> 31);
      l = c3 ^ (c7 << 1 | c6 >>> 31);
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ (c8 << 1 | c9 >>> 31);
      l = c5 ^ (c9 << 1 | c8 >>> 31);
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ (c0 << 1 | c1 >>> 31);
      l = c7 ^ (c1 << 1 | c0 >>> 31);
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;
      b0 = s[0];
      b1 = s[1];
      b32 = s[11] << 4 | s[10] >>> 28;
      b33 = s[10] << 4 | s[11] >>> 28;
      b14 = s[20] << 3 | s[21] >>> 29;
      b15 = s[21] << 3 | s[20] >>> 29;
      b46 = s[31] << 9 | s[30] >>> 23;
      b47 = s[30] << 9 | s[31] >>> 23;
      b28 = s[40] << 18 | s[41] >>> 14;
      b29 = s[41] << 18 | s[40] >>> 14;
      b20 = s[2] << 1 | s[3] >>> 31;
      b21 = s[3] << 1 | s[2] >>> 31;
      b2 = s[13] << 12 | s[12] >>> 20;
      b3 = s[12] << 12 | s[13] >>> 20;
      b34 = s[22] << 10 | s[23] >>> 22;
      b35 = s[23] << 10 | s[22] >>> 22;
      b16 = s[33] << 13 | s[32] >>> 19;
      b17 = s[32] << 13 | s[33] >>> 19;
      b48 = s[42] << 2 | s[43] >>> 30;
      b49 = s[43] << 2 | s[42] >>> 30;
      b40 = s[5] << 30 | s[4] >>> 2;
      b41 = s[4] << 30 | s[5] >>> 2;
      b22 = s[14] << 6 | s[15] >>> 26;
      b23 = s[15] << 6 | s[14] >>> 26;
      b4 = s[25] << 11 | s[24] >>> 21;
      b5 = s[24] << 11 | s[25] >>> 21;
      b36 = s[34] << 15 | s[35] >>> 17;
      b37 = s[35] << 15 | s[34] >>> 17;
      b18 = s[45] << 29 | s[44] >>> 3;
      b19 = s[44] << 29 | s[45] >>> 3;
      b10 = s[6] << 28 | s[7] >>> 4;
      b11 = s[7] << 28 | s[6] >>> 4;
      b42 = s[17] << 23 | s[16] >>> 9;
      b43 = s[16] << 23 | s[17] >>> 9;
      b24 = s[26] << 25 | s[27] >>> 7;
      b25 = s[27] << 25 | s[26] >>> 7;
      b6 = s[36] << 21 | s[37] >>> 11;
      b7 = s[37] << 21 | s[36] >>> 11;
      b38 = s[47] << 24 | s[46] >>> 8;
      b39 = s[46] << 24 | s[47] >>> 8;
      b30 = s[8] << 27 | s[9] >>> 5;
      b31 = s[9] << 27 | s[8] >>> 5;
      b12 = s[18] << 20 | s[19] >>> 12;
      b13 = s[19] << 20 | s[18] >>> 12;
      b44 = s[29] << 7 | s[28] >>> 25;
      b45 = s[28] << 7 | s[29] >>> 25;
      b26 = s[38] << 8 | s[39] >>> 24;
      b27 = s[39] << 8 | s[38] >>> 24;
      b8 = s[48] << 14 | s[49] >>> 18;
      b9 = s[49] << 14 | s[48] >>> 18;
      s[0] = b0 ^ ~b2 & b4;
      s[1] = b1 ^ ~b3 & b5;
      s[10] = b10 ^ ~b12 & b14;
      s[11] = b11 ^ ~b13 & b15;
      s[20] = b20 ^ ~b22 & b24;
      s[21] = b21 ^ ~b23 & b25;
      s[30] = b30 ^ ~b32 & b34;
      s[31] = b31 ^ ~b33 & b35;
      s[40] = b40 ^ ~b42 & b44;
      s[41] = b41 ^ ~b43 & b45;
      s[2] = b2 ^ ~b4 & b6;
      s[3] = b3 ^ ~b5 & b7;
      s[12] = b12 ^ ~b14 & b16;
      s[13] = b13 ^ ~b15 & b17;
      s[22] = b22 ^ ~b24 & b26;
      s[23] = b23 ^ ~b25 & b27;
      s[32] = b32 ^ ~b34 & b36;
      s[33] = b33 ^ ~b35 & b37;
      s[42] = b42 ^ ~b44 & b46;
      s[43] = b43 ^ ~b45 & b47;
      s[4] = b4 ^ ~b6 & b8;
      s[5] = b5 ^ ~b7 & b9;
      s[14] = b14 ^ ~b16 & b18;
      s[15] = b15 ^ ~b17 & b19;
      s[24] = b24 ^ ~b26 & b28;
      s[25] = b25 ^ ~b27 & b29;
      s[34] = b34 ^ ~b36 & b38;
      s[35] = b35 ^ ~b37 & b39;
      s[44] = b44 ^ ~b46 & b48;
      s[45] = b45 ^ ~b47 & b49;
      s[6] = b6 ^ ~b8 & b0;
      s[7] = b7 ^ ~b9 & b1;
      s[16] = b16 ^ ~b18 & b10;
      s[17] = b17 ^ ~b19 & b11;
      s[26] = b26 ^ ~b28 & b20;
      s[27] = b27 ^ ~b29 & b21;
      s[36] = b36 ^ ~b38 & b30;
      s[37] = b37 ^ ~b39 & b31;
      s[46] = b46 ^ ~b48 & b40;
      s[47] = b47 ^ ~b49 & b41;
      s[8] = b8 ^ ~b0 & b2;
      s[9] = b9 ^ ~b1 & b3;
      s[18] = b18 ^ ~b10 & b12;
      s[19] = b19 ^ ~b11 & b13;
      s[28] = b28 ^ ~b20 & b22;
      s[29] = b29 ^ ~b21 & b23;
      s[38] = b38 ^ ~b30 & b32;
      s[39] = b39 ^ ~b31 & b33;
      s[48] = b48 ^ ~b40 & b42;
      s[49] = b49 ^ ~b41 & b43;
      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };

  if (COMMON_JS) {
    module.exports = methods;
  } else {
    for (i = 0; i < methodNames.length; ++i) {
      root[methodNames[i]] = methods[methodNames[i]];
    }

    if (AMD) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return methods;
      }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  }
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(4), __webpack_require__(46)(module)))

/***/ }),
/* 227 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(229);

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* jshint -W086: true */
// +----------------------------------------------------------------------+
// | murmurHash3js.js v3.0.1 // https://github.com/pid/murmurHash3js
// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |
// |----------------------------------------------------------------------|
// | Copyright (c) 2012-2015 Karan Lyons                                       |
// | https://github.com/karanlyons/murmurHash3.js/blob/c1778f75792abef7bdd74bc85d2d4e1a3d25cfe9/murmurHash3.js |
// | Freely distributable under the MIT license.                          |
// +----------------------------------------------------------------------+
;

(function (root, undefined) {
  'use strict'; // Create a local object that'll be exported or referenced globally.

  var library = {
    'version': '3.0.0',
    'x86': {},
    'x64': {},
    'inputValidation': true
  }; // PRIVATE FUNCTIONS
  // -----------------

  function _validBytes(bytes) {
    // check the input is an array or a typed array
    if (!Array.isArray(bytes) && !ArrayBuffer.isView(bytes)) {
      return false;
    } // check all bytes are actually bytes


    for (var i = 0; i < bytes.length; i++) {
      if (!Number.isInteger(bytes[i]) || bytes[i] < 0 || bytes[i] > 255) {
        return false;
      }
    }

    return true;
  }

  function _x86Multiply(m, n) {
    //
    // Given two 32bit ints, returns the two multiplied together as a
    // 32bit int.
    //
    return (m & 0xffff) * n + (((m >>> 16) * n & 0xffff) << 16);
  }

  function _x86Rotl(m, n) {
    //
    // Given a 32bit int and an int representing a number of bit positions,
    // returns the 32bit int rotated left by that number of positions.
    //
    return m << n | m >>> 32 - n;
  }

  function _x86Fmix(h) {
    //
    // Given a block, returns murmurHash3's final x86 mix of that block.
    //
    h ^= h >>> 16;
    h = _x86Multiply(h, 0x85ebca6b);
    h ^= h >>> 13;
    h = _x86Multiply(h, 0xc2b2ae35);
    h ^= h >>> 16;
    return h;
  }

  function _x64Add(m, n) {
    //
    // Given two 64bit ints (as an array of two 32bit ints) returns the two
    // added together as a 64bit int (as an array of two 32bit ints).
    //
    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
    var o = [0, 0, 0, 0];
    o[3] += m[3] + n[3];
    o[2] += o[3] >>> 16;
    o[3] &= 0xffff;
    o[2] += m[2] + n[2];
    o[1] += o[2] >>> 16;
    o[2] &= 0xffff;
    o[1] += m[1] + n[1];
    o[0] += o[1] >>> 16;
    o[1] &= 0xffff;
    o[0] += m[0] + n[0];
    o[0] &= 0xffff;
    return [o[0] << 16 | o[1], o[2] << 16 | o[3]];
  }

  function _x64Multiply(m, n) {
    //
    // Given two 64bit ints (as an array of two 32bit ints) returns the two
    // multiplied together as a 64bit int (as an array of two 32bit ints).
    //
    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
    var o = [0, 0, 0, 0];
    o[3] += m[3] * n[3];
    o[2] += o[3] >>> 16;
    o[3] &= 0xffff;
    o[2] += m[2] * n[3];
    o[1] += o[2] >>> 16;
    o[2] &= 0xffff;
    o[2] += m[3] * n[2];
    o[1] += o[2] >>> 16;
    o[2] &= 0xffff;
    o[1] += m[1] * n[3];
    o[0] += o[1] >>> 16;
    o[1] &= 0xffff;
    o[1] += m[2] * n[2];
    o[0] += o[1] >>> 16;
    o[1] &= 0xffff;
    o[1] += m[3] * n[1];
    o[0] += o[1] >>> 16;
    o[1] &= 0xffff;
    o[0] += m[0] * n[3] + m[1] * n[2] + m[2] * n[1] + m[3] * n[0];
    o[0] &= 0xffff;
    return [o[0] << 16 | o[1], o[2] << 16 | o[3]];
  }

  function _x64Rotl(m, n) {
    //
    // Given a 64bit int (as an array of two 32bit ints) and an int
    // representing a number of bit positions, returns the 64bit int (as an
    // array of two 32bit ints) rotated left by that number of positions.
    //
    n %= 64;

    if (n === 32) {
      return [m[1], m[0]];
    } else if (n < 32) {
      return [m[0] << n | m[1] >>> 32 - n, m[1] << n | m[0] >>> 32 - n];
    } else {
      n -= 32;
      return [m[1] << n | m[0] >>> 32 - n, m[0] << n | m[1] >>> 32 - n];
    }
  }

  function _x64LeftShift(m, n) {
    //
    // Given a 64bit int (as an array of two 32bit ints) and an int
    // representing a number of bit positions, returns the 64bit int (as an
    // array of two 32bit ints) shifted left by that number of positions.
    //
    n %= 64;

    if (n === 0) {
      return m;
    } else if (n < 32) {
      return [m[0] << n | m[1] >>> 32 - n, m[1] << n];
    } else {
      return [m[1] << n - 32, 0];
    }
  }

  function _x64Xor(m, n) {
    //
    // Given two 64bit ints (as an array of two 32bit ints) returns the two
    // xored together as a 64bit int (as an array of two 32bit ints).
    //
    return [m[0] ^ n[0], m[1] ^ n[1]];
  }

  function _x64Fmix(h) {
    //
    // Given a block, returns murmurHash3's final x64 mix of that block.
    // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the
    // only place where we need to right shift 64bit ints.)
    //
    h = _x64Xor(h, [0, h[0] >>> 1]);
    h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);
    h = _x64Xor(h, [0, h[0] >>> 1]);
    h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);
    h = _x64Xor(h, [0, h[0] >>> 1]);
    return h;
  } // PUBLIC FUNCTIONS
  // ----------------


  library.x86.hash32 = function (bytes, seed) {
    //
    // Given a string and an optional seed as an int, returns a 32 bit hash
    // using the x86 flavor of MurmurHash3, as an unsigned int.
    //
    if (library.inputValidation && !_validBytes(bytes)) {
      return undefined;
    }

    seed = seed || 0;
    var remainder = bytes.length % 4;
    var blocks = bytes.length - remainder;
    var h1 = seed;
    var k1 = 0;
    var c1 = 0xcc9e2d51;
    var c2 = 0x1b873593;

    for (var i = 0; i < blocks; i = i + 4) {
      k1 = bytes[i] | bytes[i + 1] << 8 | bytes[i + 2] << 16 | bytes[i + 3] << 24;
      k1 = _x86Multiply(k1, c1);
      k1 = _x86Rotl(k1, 15);
      k1 = _x86Multiply(k1, c2);
      h1 ^= k1;
      h1 = _x86Rotl(h1, 13);
      h1 = _x86Multiply(h1, 5) + 0xe6546b64;
    }

    k1 = 0;

    switch (remainder) {
      case 3:
        k1 ^= bytes[i + 2] << 16;

      case 2:
        k1 ^= bytes[i + 1] << 8;

      case 1:
        k1 ^= bytes[i];
        k1 = _x86Multiply(k1, c1);
        k1 = _x86Rotl(k1, 15);
        k1 = _x86Multiply(k1, c2);
        h1 ^= k1;
    }

    h1 ^= bytes.length;
    h1 = _x86Fmix(h1);
    return h1 >>> 0;
  };

  library.x86.hash128 = function (bytes, seed) {
    //
    // Given a string and an optional seed as an int, returns a 128 bit
    // hash using the x86 flavor of MurmurHash3, as an unsigned hex.
    //
    if (library.inputValidation && !_validBytes(bytes)) {
      return undefined;
    }

    seed = seed || 0;
    var remainder = bytes.length % 16;
    var blocks = bytes.length - remainder;
    var h1 = seed;
    var h2 = seed;
    var h3 = seed;
    var h4 = seed;
    var k1 = 0;
    var k2 = 0;
    var k3 = 0;
    var k4 = 0;
    var c1 = 0x239b961b;
    var c2 = 0xab0e9789;
    var c3 = 0x38b34ae5;
    var c4 = 0xa1e38b93;

    for (var i = 0; i < blocks; i = i + 16) {
      k1 = bytes[i] | bytes[i + 1] << 8 | bytes[i + 2] << 16 | bytes[i + 3] << 24;
      k2 = bytes[i + 4] | bytes[i + 5] << 8 | bytes[i + 6] << 16 | bytes[i + 7] << 24;
      k3 = bytes[i + 8] | bytes[i + 9] << 8 | bytes[i + 10] << 16 | bytes[i + 11] << 24;
      k4 = bytes[i + 12] | bytes[i + 13] << 8 | bytes[i + 14] << 16 | bytes[i + 15] << 24;
      k1 = _x86Multiply(k1, c1);
      k1 = _x86Rotl(k1, 15);
      k1 = _x86Multiply(k1, c2);
      h1 ^= k1;
      h1 = _x86Rotl(h1, 19);
      h1 += h2;
      h1 = _x86Multiply(h1, 5) + 0x561ccd1b;
      k2 = _x86Multiply(k2, c2);
      k2 = _x86Rotl(k2, 16);
      k2 = _x86Multiply(k2, c3);
      h2 ^= k2;
      h2 = _x86Rotl(h2, 17);
      h2 += h3;
      h2 = _x86Multiply(h2, 5) + 0x0bcaa747;
      k3 = _x86Multiply(k3, c3);
      k3 = _x86Rotl(k3, 17);
      k3 = _x86Multiply(k3, c4);
      h3 ^= k3;
      h3 = _x86Rotl(h3, 15);
      h3 += h4;
      h3 = _x86Multiply(h3, 5) + 0x96cd1c35;
      k4 = _x86Multiply(k4, c4);
      k4 = _x86Rotl(k4, 18);
      k4 = _x86Multiply(k4, c1);
      h4 ^= k4;
      h4 = _x86Rotl(h4, 13);
      h4 += h1;
      h4 = _x86Multiply(h4, 5) + 0x32ac3b17;
    }

    k1 = 0;
    k2 = 0;
    k3 = 0;
    k4 = 0;

    switch (remainder) {
      case 15:
        k4 ^= bytes[i + 14] << 16;

      case 14:
        k4 ^= bytes[i + 13] << 8;

      case 13:
        k4 ^= bytes[i + 12];
        k4 = _x86Multiply(k4, c4);
        k4 = _x86Rotl(k4, 18);
        k4 = _x86Multiply(k4, c1);
        h4 ^= k4;

      case 12:
        k3 ^= bytes[i + 11] << 24;

      case 11:
        k3 ^= bytes[i + 10] << 16;

      case 10:
        k3 ^= bytes[i + 9] << 8;

      case 9:
        k3 ^= bytes[i + 8];
        k3 = _x86Multiply(k3, c3);
        k3 = _x86Rotl(k3, 17);
        k3 = _x86Multiply(k3, c4);
        h3 ^= k3;

      case 8:
        k2 ^= bytes[i + 7] << 24;

      case 7:
        k2 ^= bytes[i + 6] << 16;

      case 6:
        k2 ^= bytes[i + 5] << 8;

      case 5:
        k2 ^= bytes[i + 4];
        k2 = _x86Multiply(k2, c2);
        k2 = _x86Rotl(k2, 16);
        k2 = _x86Multiply(k2, c3);
        h2 ^= k2;

      case 4:
        k1 ^= bytes[i + 3] << 24;

      case 3:
        k1 ^= bytes[i + 2] << 16;

      case 2:
        k1 ^= bytes[i + 1] << 8;

      case 1:
        k1 ^= bytes[i];
        k1 = _x86Multiply(k1, c1);
        k1 = _x86Rotl(k1, 15);
        k1 = _x86Multiply(k1, c2);
        h1 ^= k1;
    }

    h1 ^= bytes.length;
    h2 ^= bytes.length;
    h3 ^= bytes.length;
    h4 ^= bytes.length;
    h1 += h2;
    h1 += h3;
    h1 += h4;
    h2 += h1;
    h3 += h1;
    h4 += h1;
    h1 = _x86Fmix(h1);
    h2 = _x86Fmix(h2);
    h3 = _x86Fmix(h3);
    h4 = _x86Fmix(h4);
    h1 += h2;
    h1 += h3;
    h1 += h4;
    h2 += h1;
    h3 += h1;
    h4 += h1;
    return ("00000000" + (h1 >>> 0).toString(16)).slice(-8) + ("00000000" + (h2 >>> 0).toString(16)).slice(-8) + ("00000000" + (h3 >>> 0).toString(16)).slice(-8) + ("00000000" + (h4 >>> 0).toString(16)).slice(-8);
  };

  library.x64.hash128 = function (bytes, seed) {
    //
    // Given a string and an optional seed as an int, returns a 128 bit
    // hash using the x64 flavor of MurmurHash3, as an unsigned hex.
    //
    if (library.inputValidation && !_validBytes(bytes)) {
      return undefined;
    }

    seed = seed || 0;
    var remainder = bytes.length % 16;
    var blocks = bytes.length - remainder;
    var h1 = [0, seed];
    var h2 = [0, seed];
    var k1 = [0, 0];
    var k2 = [0, 0];
    var c1 = [0x87c37b91, 0x114253d5];
    var c2 = [0x4cf5ad43, 0x2745937f];

    for (var i = 0; i < blocks; i = i + 16) {
      k1 = [bytes[i + 4] | bytes[i + 5] << 8 | bytes[i + 6] << 16 | bytes[i + 7] << 24, bytes[i] | bytes[i + 1] << 8 | bytes[i + 2] << 16 | bytes[i + 3] << 24];
      k2 = [bytes[i + 12] | bytes[i + 13] << 8 | bytes[i + 14] << 16 | bytes[i + 15] << 24, bytes[i + 8] | bytes[i + 9] << 8 | bytes[i + 10] << 16 | bytes[i + 11] << 24];
      k1 = _x64Multiply(k1, c1);
      k1 = _x64Rotl(k1, 31);
      k1 = _x64Multiply(k1, c2);
      h1 = _x64Xor(h1, k1);
      h1 = _x64Rotl(h1, 27);
      h1 = _x64Add(h1, h2);
      h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);
      k2 = _x64Multiply(k2, c2);
      k2 = _x64Rotl(k2, 33);
      k2 = _x64Multiply(k2, c1);
      h2 = _x64Xor(h2, k2);
      h2 = _x64Rotl(h2, 31);
      h2 = _x64Add(h2, h1);
      h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);
    }

    k1 = [0, 0];
    k2 = [0, 0];

    switch (remainder) {
      case 15:
        k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 14]], 48));

      case 14:
        k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 13]], 40));

      case 13:
        k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 12]], 32));

      case 12:
        k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 11]], 24));

      case 11:
        k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 10]], 16));

      case 10:
        k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 9]], 8));

      case 9:
        k2 = _x64Xor(k2, [0, bytes[i + 8]]);
        k2 = _x64Multiply(k2, c2);
        k2 = _x64Rotl(k2, 33);
        k2 = _x64Multiply(k2, c1);
        h2 = _x64Xor(h2, k2);

      case 8:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 7]], 56));

      case 7:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 6]], 48));

      case 6:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 5]], 40));

      case 5:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 4]], 32));

      case 4:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 3]], 24));

      case 3:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 2]], 16));

      case 2:
        k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 1]], 8));

      case 1:
        k1 = _x64Xor(k1, [0, bytes[i]]);
        k1 = _x64Multiply(k1, c1);
        k1 = _x64Rotl(k1, 31);
        k1 = _x64Multiply(k1, c2);
        h1 = _x64Xor(h1, k1);
    }

    h1 = _x64Xor(h1, [0, bytes.length]);
    h2 = _x64Xor(h2, [0, bytes.length]);
    h1 = _x64Add(h1, h2);
    h2 = _x64Add(h2, h1);
    h1 = _x64Fmix(h1);
    h2 = _x64Fmix(h2);
    h1 = _x64Add(h1, h2);
    h2 = _x64Add(h2, h1);
    return ("00000000" + (h1[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h1[1] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[1] >>> 0).toString(16)).slice(-8);
  }; // INITIALIZATION
  // --------------
  // Export murmurHash3 for CommonJS, either as an AMD module or just as part
  // of the global object.


  if (true) {
    if ( true && module.exports) {
      exports = module.exports = library;
    }

    exports.murmurHash3 = library;
  } else {}
})(void 0);

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _require = __webpack_require__(1),
    Buffer = _require.Buffer;

var crypto = self.crypto || self.msCrypto;

module.exports = function (algorithm) {
  if (typeof self === 'undefined' || !self.crypto && !self.msCrypto) {
    throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context');
  }

  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(data) {
        var d;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = algorithm;
                _context.next = _context.t0 === 'sha1' ? 3 : _context.t0 === 'sha2-256' ? 8 : _context.t0 === 'sha2-512' ? 13 : _context.t0 === 'dbl-sha2-256' ? 18 : 26;
                break;

              case 3:
                _context.t1 = Buffer;
                _context.next = 6;
                return crypto.subtle.digest({
                  name: 'SHA-1'
                }, data);

              case 6:
                _context.t2 = _context.sent;
                return _context.abrupt("return", _context.t1.from.call(_context.t1, _context.t2));

              case 8:
                _context.t3 = Buffer;
                _context.next = 11;
                return crypto.subtle.digest({
                  name: 'SHA-256'
                }, data);

              case 11:
                _context.t4 = _context.sent;
                return _context.abrupt("return", _context.t3.from.call(_context.t3, _context.t4));

              case 13:
                _context.t5 = Buffer;
                _context.next = 16;
                return crypto.subtle.digest({
                  name: 'SHA-512'
                }, data);

              case 16:
                _context.t6 = _context.sent;
                return _context.abrupt("return", _context.t5.from.call(_context.t5, _context.t6));

              case 18:
                _context.next = 20;
                return crypto.subtle.digest({
                  name: 'SHA-256'
                }, data);

              case 20:
                d = _context.sent;
                _context.t7 = Buffer;
                _context.next = 24;
                return crypto.subtle.digest({
                  name: 'SHA-256'
                }, d);

              case 24:
                _context.t8 = _context.sent;
                return _context.abrupt("return", _context.t7.from.call(_context.t7, _context.t8));

              case 26:
                throw new Error("".concat(algorithm, " is not a supported algorithm"));

              case 27:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  );
};

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _require = __webpack_require__(1),
    Buffer = _require.Buffer;

var fromNumberTo32BitBuf = function fromNumberTo32BitBuf(number) {
  var bytes = new Array(4);

  for (var i = 0; i < 4; i++) {
    bytes[i] = number & 0xff;
    number = number >> 8;
  }

  return Buffer.from(bytes);
};

module.exports = {
  fromNumberTo32BitBuf: fromNumberTo32BitBuf
};

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _require = __webpack_require__(1),
    Buffer = _require.Buffer;

var blake = __webpack_require__(233);

var minB = 0xb201;
var minS = 0xb241;
var blake2b = {
  init: blake.blake2bInit,
  update: blake.blake2bUpdate,
  digest: blake.blake2bFinal
};
var blake2s = {
  init: blake.blake2sInit,
  update: blake.blake2sUpdate,
  digest: blake.blake2sFinal // Note that although this function doesn't do any asynchronous work, we mark
  // the function as async because it must return a Promise to match the API
  // for other functions that do perform asynchronous work (see sha.browser.js)

};

var makeB2Hash = function makeB2Hash(size, hf) {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(data) {
        var ctx;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                ctx = hf.init(size, null);
                hf.update(ctx, data);
                return _context.abrupt("return", Buffer.from(hf.digest(ctx)));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  );
};

module.exports = function (table) {
  for (var i = 0; i < 64; i++) {
    table[minB + i] = makeB2Hash(i + 1, blake2b);
  }

  for (var _i = 0; _i < 32; _i++) {
    table[minS + _i] = makeB2Hash(_i + 1, blake2s);
  }
};

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var b2b = __webpack_require__(234);

var b2s = __webpack_require__(235);

module.exports = {
  blake2b: b2b.blake2b,
  blake2bHex: b2b.blake2bHex,
  blake2bInit: b2b.blake2bInit,
  blake2bUpdate: b2b.blake2bUpdate,
  blake2bFinal: b2b.blake2bFinal,
  blake2s: b2s.blake2s,
  blake2sHex: b2s.blake2sHex,
  blake2sInit: b2s.blake2sInit,
  blake2sUpdate: b2s.blake2sUpdate,
  blake2sFinal: b2s.blake2sFinal
};

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Blake2B in pure Javascript
// Adapted from the reference implementation in RFC7693
// Ported to Javascript by DC - https://github.com/dcposch
var util = __webpack_require__(94); // 64-bit unsigned addition
// Sets v[a,a+1] += v[b,b+1]
// v should be a Uint32Array


function ADD64AA(v, a, b) {
  var o0 = v[a] + v[b];
  var o1 = v[a + 1] + v[b + 1];

  if (o0 >= 0x100000000) {
    o1++;
  }

  v[a] = o0;
  v[a + 1] = o1;
} // 64-bit unsigned addition
// Sets v[a,a+1] += b
// b0 is the low 32 bits of b, b1 represents the high 32 bits


function ADD64AC(v, a, b0, b1) {
  var o0 = v[a] + b0;

  if (b0 < 0) {
    o0 += 0x100000000;
  }

  var o1 = v[a + 1] + b1;

  if (o0 >= 0x100000000) {
    o1++;
  }

  v[a] = o0;
  v[a + 1] = o1;
} // Little-endian byte access


function B2B_GET32(arr, i) {
  return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;
} // G Mixing function
// The ROTRs are inlined for speed


function B2B_G(a, b, c, d, ix, iy) {
  var x0 = m[ix];
  var x1 = m[ix + 1];
  var y0 = m[iy];
  var y1 = m[iy + 1];
  ADD64AA(v, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s

  ADD64AC(v, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits
  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits

  var xor0 = v[d] ^ v[a];
  var xor1 = v[d + 1] ^ v[a + 1];
  v[d] = xor1;
  v[d + 1] = xor0;
  ADD64AA(v, c, d); // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits

  xor0 = v[b] ^ v[c];
  xor1 = v[b + 1] ^ v[c + 1];
  v[b] = xor0 >>> 24 ^ xor1 << 8;
  v[b + 1] = xor1 >>> 24 ^ xor0 << 8;
  ADD64AA(v, a, b);
  ADD64AC(v, a, y0, y1); // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits

  xor0 = v[d] ^ v[a];
  xor1 = v[d + 1] ^ v[a + 1];
  v[d] = xor0 >>> 16 ^ xor1 << 16;
  v[d + 1] = xor1 >>> 16 ^ xor0 << 16;
  ADD64AA(v, c, d); // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits

  xor0 = v[b] ^ v[c];
  xor1 = v[b + 1] ^ v[c + 1];
  v[b] = xor1 >>> 31 ^ xor0 << 1;
  v[b + 1] = xor0 >>> 31 ^ xor1 << 1;
} // Initialization Vector


var BLAKE2B_IV32 = new Uint32Array([0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85, 0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A, 0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C, 0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19]);
var SIGMA8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3]; // These are offsets into a uint64 buffer.
// Multiply them all by 2 to make them offsets into a uint32 buffer,
// because this is Javascript and we don't have uint64s

var SIGMA82 = new Uint8Array(SIGMA8.map(function (x) {
  return x * 2;
})); // Compression function. 'last' flag indicates last block.
// Note we're representing 16 uint64s as 32 uint32s

var v = new Uint32Array(32);
var m = new Uint32Array(32);

function blake2bCompress(ctx, last) {
  var i = 0; // init work variables

  for (i = 0; i < 16; i++) {
    v[i] = ctx.h[i];
    v[i + 16] = BLAKE2B_IV32[i];
  } // low 64 bits of offset


  v[24] = v[24] ^ ctx.t;
  v[25] = v[25] ^ ctx.t / 0x100000000; // high 64 bits not supported, offset may not be higher than 2**53-1
  // last block flag set ?

  if (last) {
    v[28] = ~v[28];
    v[29] = ~v[29];
  } // get little-endian words


  for (i = 0; i < 32; i++) {
    m[i] = B2B_GET32(ctx.b, 4 * i);
  } // twelve rounds of mixing
  // uncomment the DebugPrint calls to log the computation
  // and match the RFC sample documentation
  // util.debugPrint('          m[16]', m, 64)


  for (i = 0; i < 12; i++) {
    // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)
    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
  } // util.debugPrint('   (i=12) v[16]', v, 64)


  for (i = 0; i < 16; i++) {
    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];
  } // util.debugPrint('h[8]', ctx.h, 64)

} // Creates a BLAKE2b hashing context
// Requires an output length between 1 and 64 bytes
// Takes an optional Uint8Array key


function blake2bInit(outlen, key) {
  if (outlen === 0 || outlen > 64) {
    throw new Error('Illegal output length, expected 0 < length <= 64');
  }

  if (key && key.length > 64) {
    throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64');
  } // state, 'param block'


  var ctx = {
    b: new Uint8Array(128),
    h: new Uint32Array(16),
    t: 0,
    // input count
    c: 0,
    // pointer within buffer
    outlen: outlen // output length in bytes
    // initialize hash state

  };

  for (var i = 0; i < 16; i++) {
    ctx.h[i] = BLAKE2B_IV32[i];
  }

  var keylen = key ? key.length : 0;
  ctx.h[0] ^= 0x01010000 ^ keylen << 8 ^ outlen; // key the hash, if applicable

  if (key) {
    blake2bUpdate(ctx, key); // at the end

    ctx.c = 128;
  }

  return ctx;
} // Updates a BLAKE2b streaming hash
// Requires hash context and Uint8Array (byte array)


function blake2bUpdate(ctx, input) {
  for (var i = 0; i < input.length; i++) {
    if (ctx.c === 128) {
      // buffer full ?
      ctx.t += ctx.c; // add counters

      blake2bCompress(ctx, false); // compress (not last)

      ctx.c = 0; // counter to zero
    }

    ctx.b[ctx.c++] = input[i];
  }
} // Completes a BLAKE2b streaming hash
// Returns a Uint8Array containing the message digest


function blake2bFinal(ctx) {
  ctx.t += ctx.c; // mark last block offset

  while (ctx.c < 128) {
    // fill up with zeros
    ctx.b[ctx.c++] = 0;
  }

  blake2bCompress(ctx, true); // final block flag = 1
  // little endian convert and store

  var out = new Uint8Array(ctx.outlen);

  for (var i = 0; i < ctx.outlen; i++) {
    out[i] = ctx.h[i >> 2] >> 8 * (i & 3);
  }

  return out;
} // Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array
//
// Returns a n-byte Uint8Array
//
// Parameters:
// - input - the input bytes, as a string, Buffer or Uint8Array
// - key - optional key Uint8Array, up to 64 bytes
// - outlen - optional output length in bytes, default 64


function blake2b(input, key, outlen) {
  // preprocess inputs
  outlen = outlen || 64;
  input = util.normalizeInput(input); // do the math

  var ctx = blake2bInit(outlen, key);
  blake2bUpdate(ctx, input);
  return blake2bFinal(ctx);
} // Computes the BLAKE2B hash of a string or byte array
//
// Returns an n-byte hash in hex, all lowercase
//
// Parameters:
// - input - the input bytes, as a string, Buffer, or Uint8Array
// - key - optional key Uint8Array, up to 64 bytes
// - outlen - optional output length in bytes, default 64


function blake2bHex(input, key, outlen) {
  var output = blake2b(input, key, outlen);
  return util.toHex(output);
}

module.exports = {
  blake2b: blake2b,
  blake2bHex: blake2bHex,
  blake2bInit: blake2bInit,
  blake2bUpdate: blake2bUpdate,
  blake2bFinal: blake2bFinal
};

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// BLAKE2s hash function in pure Javascript
// Adapted from the reference implementation in RFC7693
// Ported to Javascript by DC - https://github.com/dcposch
var util = __webpack_require__(94); // Little-endian byte access.
// Expects a Uint8Array and an index
// Returns the little-endian uint32 at v[i..i+3]


function B2S_GET32(v, i) {
  return v[i] ^ v[i + 1] << 8 ^ v[i + 2] << 16 ^ v[i + 3] << 24;
} // Mixing function G.


function B2S_G(a, b, c, d, x, y) {
  v[a] = v[a] + v[b] + x;
  v[d] = ROTR32(v[d] ^ v[a], 16);
  v[c] = v[c] + v[d];
  v[b] = ROTR32(v[b] ^ v[c], 12);
  v[a] = v[a] + v[b] + y;
  v[d] = ROTR32(v[d] ^ v[a], 8);
  v[c] = v[c] + v[d];
  v[b] = ROTR32(v[b] ^ v[c], 7);
} // 32-bit right rotation
// x should be a uint32
// y must be between 1 and 31, inclusive


function ROTR32(x, y) {
  return x >>> y ^ x << 32 - y;
} // Initialization Vector.


var BLAKE2S_IV = new Uint32Array([0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19]);
var SIGMA = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0]); // Compression function. "last" flag indicates last block

var v = new Uint32Array(16);
var m = new Uint32Array(16);

function blake2sCompress(ctx, last) {
  var i = 0;

  for (i = 0; i < 8; i++) {
    // init work variables
    v[i] = ctx.h[i];
    v[i + 8] = BLAKE2S_IV[i];
  }

  v[12] ^= ctx.t; // low 32 bits of offset

  v[13] ^= ctx.t / 0x100000000; // high 32 bits

  if (last) {
    // last block flag set ?
    v[14] = ~v[14];
  }

  for (i = 0; i < 16; i++) {
    // get little-endian words
    m[i] = B2S_GET32(ctx.b, 4 * i);
  } // ten rounds of mixing
  // uncomment the DebugPrint calls to log the computation
  // and match the RFC sample documentation
  // util.debugPrint('          m[16]', m, 32)


  for (i = 0; i < 10; i++) {
    // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)
    B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]]);
    B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]]);
    B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]]);
    B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]]);
    B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]]);
    B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]]);
    B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]]);
    B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]]);
  } // util.debugPrint('   (i=10) v[16]', v, 32)


  for (i = 0; i < 8; i++) {
    ctx.h[i] ^= v[i] ^ v[i + 8];
  } // util.debugPrint('h[8]', ctx.h, 32)

} // Creates a BLAKE2s hashing context
// Requires an output length between 1 and 32 bytes
// Takes an optional Uint8Array key


function blake2sInit(outlen, key) {
  if (!(outlen > 0 && outlen <= 32)) {
    throw new Error('Incorrect output length, should be in [1, 32]');
  }

  var keylen = key ? key.length : 0;

  if (key && !(keylen > 0 && keylen <= 32)) {
    throw new Error('Incorrect key length, should be in [1, 32]');
  }

  var ctx = {
    h: new Uint32Array(BLAKE2S_IV),
    // hash state
    b: new Uint32Array(64),
    // input block
    c: 0,
    // pointer within block
    t: 0,
    // input count
    outlen: outlen // output length in bytes

  };
  ctx.h[0] ^= 0x01010000 ^ keylen << 8 ^ outlen;

  if (keylen > 0) {
    blake2sUpdate(ctx, key);
    ctx.c = 64; // at the end
  }

  return ctx;
} // Updates a BLAKE2s streaming hash
// Requires hash context and Uint8Array (byte array)


function blake2sUpdate(ctx, input) {
  for (var i = 0; i < input.length; i++) {
    if (ctx.c === 64) {
      // buffer full ?
      ctx.t += ctx.c; // add counters

      blake2sCompress(ctx, false); // compress (not last)

      ctx.c = 0; // counter to zero
    }

    ctx.b[ctx.c++] = input[i];
  }
} // Completes a BLAKE2s streaming hash
// Returns a Uint8Array containing the message digest


function blake2sFinal(ctx) {
  ctx.t += ctx.c; // mark last block offset

  while (ctx.c < 64) {
    // fill up with zeros
    ctx.b[ctx.c++] = 0;
  }

  blake2sCompress(ctx, true); // final block flag = 1
  // little endian convert and store

  var out = new Uint8Array(ctx.outlen);

  for (var i = 0; i < ctx.outlen; i++) {
    out[i] = ctx.h[i >> 2] >> 8 * (i & 3) & 0xFF;
  }

  return out;
} // Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array
//
// Returns a n-byte Uint8Array
//
// Parameters:
// - input - the input bytes, as a string, Buffer, or Uint8Array
// - key - optional key Uint8Array, up to 32 bytes
// - outlen - optional output length in bytes, default 64


function blake2s(input, key, outlen) {
  // preprocess inputs
  outlen = outlen || 32;
  input = util.normalizeInput(input); // do the math

  var ctx = blake2sInit(outlen, key);
  blake2sUpdate(ctx, input);
  return blake2sFinal(ctx);
} // Computes the BLAKE2S hash of a string or byte array
//
// Returns an n-byte hash in hex, all lowercase
//
// Parameters:
// - input - the input bytes, as a string, Buffer, or Uint8Array
// - key - optional key Uint8Array, up to 32 bytes
// - outlen - optional output length in bytes, default 64


function blake2sHex(input, key, outlen) {
  var output = blake2s(input, key, outlen);
  return util.toHex(output);
}

module.exports = {
  blake2s: blake2s,
  blake2sHex: blake2sHex,
  blake2sInit: blake2sInit,
  blake2sUpdate: blake2sUpdate,
  blake2sFinal: blake2sFinal
};

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var dagNodeUtil = __webpack_require__(33);

var cloneLinks = dagNodeUtil.cloneLinks;
var cloneData = dagNodeUtil.cloneData;

var create = __webpack_require__(31);

function clone(dagNode) {
  var data = cloneData(dagNode);
  var links = cloneLinks(dagNode);
  return create(data, links);
}

module.exports = clone;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var dagNodeUtil = __webpack_require__(33);

var cloneLinks = dagNodeUtil.cloneLinks;
var cloneData = dagNodeUtil.cloneData;
var toDAGLink = dagNodeUtil.toDAGLink;

var DAGLink = __webpack_require__(19);

var DAGNode = __webpack_require__(30);

var create = __webpack_require__(31);

var asDAGLink =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(link) {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!DAGLink.isDAGLink(link)) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", link);

          case 2:
            if (!DAGNode.isDAGNode(link)) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return", toDAGLink(link, {}));

          case 4:
            return _context.abrupt("return", new DAGLink(link.Name || link.name, link.Tsize || link.size, link.Hash || link.multihash || link.hash || link.cid));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function asDAGLink(_x) {
    return _ref.apply(this, arguments);
  };
}();

var addLink =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(node, link) {
    var links, data, dagLink;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            links = cloneLinks(node);
            data = cloneData(node);
            _context2.next = 4;
            return asDAGLink(link);

          case 4:
            dagLink = _context2.sent;
            links.push(dagLink);
            return _context2.abrupt("return", create(data, links));

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function addLink(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

module.exports = addLink;

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var dagNodeUtil = __webpack_require__(33);

var cloneLinks = dagNodeUtil.cloneLinks;
var cloneData = dagNodeUtil.cloneData;

var create = __webpack_require__(31);

var CID = __webpack_require__(11);

var rmLink = function rmLink(dagNode, nameOrCid) {
  var data = cloneData(dagNode);
  var links = cloneLinks(dagNode);

  if (typeof nameOrCid === 'string') {
    links = links.filter(function (link) {
      return link.Name !== nameOrCid;
    });
  } else if (Buffer.isBuffer(nameOrCid) || CID.isCID(nameOrCid)) {
    links = links.filter(function (link) {
      return !link.Hash.equals(nameOrCid);
    });
  } else {
    throw new Error('second arg needs to be a name or CID');
  }

  return create(data, links);
};

module.exports = rmLink;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var CID = __webpack_require__(11);

var util = __webpack_require__(32);
/**
 * Resolves a path within a PB block.
 *
 * Returns the value or a link and the partial mising path. This way the
 * IPLD Resolver can fetch the link and continue to resolve.
 *
 * @param {Buffer} binaryBlob - Binary representation of a PB block
 * @param {string} [path='/'] - Path that should be resolved
 * @returns {Object} result - Result of the path it it was resolved successfully
 * @returns {*} result.value - Value the path resolves to
 * @returns {string} result.remainderPath - If the path resolves half-way to a
 *   link, then the `remainderPath` is the part after the link that can be used
 *   for further resolving
 */


exports.resolve = function (binaryBlob, path) {
  var node = util.deserialize(binaryBlob);
  var parts = path.split('/').filter(Boolean);

  while (parts.length) {
    var key = parts.shift();

    if (node[key] === undefined) {
      throw new Error("Object has no property '".concat(key, "'"));
    }

    node = node[key];

    if (CID.isCID(node)) {
      return {
        value: node,
        remainderPath: parts.join('/')
      };
    }
  }

  return {
    value: node,
    remainderPath: ''
  };
};

var traverse =
/*#__PURE__*/
_regenerator["default"].mark(function traverse(node, path) {
  var _i, _Object$keys, item, nextpath;

  return _regenerator["default"].wrap(function traverse$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(Buffer.isBuffer(node) || CID.isCID(node) || typeof node === 'string' || node === null)) {
            _context.next = 2;
            break;
          }

          return _context.abrupt("return");

        case 2:
          _i = 0, _Object$keys = Object.keys(node);

        case 3:
          if (!(_i < _Object$keys.length)) {
            _context.next = 12;
            break;
          }

          item = _Object$keys[_i];
          nextpath = path === undefined ? item : path + '/' + item;
          _context.next = 8;
          return nextpath;

        case 8:
          return _context.delegateYield(traverse(node[item], nextpath), "t0", 9);

        case 9:
          _i++;
          _context.next = 3;
          break;

        case 12:
        case "end":
          return _context.stop();
      }
    }
  }, traverse);
});
/**
 * Return all available paths of a block.
 *
 * @generator
 * @param {Buffer} binaryBlob - Binary representation of a PB block
 * @yields {string} - A single path
 */


exports.tree =
/*#__PURE__*/
_regenerator["default"].mark(function _callee(binaryBlob) {
  var node;
  return _regenerator["default"].wrap(function _callee$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          node = util.deserialize(binaryBlob);
          return _context2.delegateYield(traverse(node), "t0", 2);

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug["default"] = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = __webpack_require__(241);
  Object.keys(env).forEach(function (key) {
    createDebug[key] = env[key];
  });
  /**
  * Active `debug` instances.
  */

  createDebug.instances = [];
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    var hash = 0;

    for (var i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      // Disabled?
      if (!debug.enabled) {
        return;
      }

      var self = debug; // Set `diff` timestamp

      var curr = Number(new Date());
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return match;
        }

        index++;
        var formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          var val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      var logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend; // Debug.formatArgs = formatArgs;
    // debug.rawLog = rawLog;
    // env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    createDebug.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = createDebug.instances.indexOf(this);

    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }

    return false;
  }

  function extend(namespace, delimiter) {
    var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    newDebug.log = this.log;
    return newDebug;
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < createDebug.instances.length; i++) {
      var instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  /**
  * Disable debug output.
  *
  * @return {String} namespaces
  * @api public
  */


  function disable() {
    var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {
      return '-' + namespace;
    }))).join(',');
    createDebug.enable('');
    return namespaces;
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i;
    var len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Convert regexp to namespace
  *
  * @param {RegExp} regxep
  * @return {String} namespace
  * @api private
  */


  function toNamespace(regexp) {
    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};

  var type = _typeof(val);

  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options["long"] ? fmtLong(val) : fmtShort(val);
  }

  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */


function parse(str) {
  str = String(str);

  if (str.length > 100) {
    return;
  }

  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

  if (!match) {
    return;
  }

  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();

  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;

    case 'weeks':
    case 'week':
    case 'w':
      return n * w;

    case 'days':
    case 'day':
    case 'd':
      return n * d;

    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;

    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;

    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;

    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;

    default:
      return undefined;
  }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtShort(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }

  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }

  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }

  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }

  return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtLong(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }

  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }

  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }

  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }

  return ms + ' ms';
}
/**
 * Pluralization helper.
 */


function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var errCode = __webpack_require__(2);

var resolvers = {
  'dag-pb': __webpack_require__(243),
  raw: __webpack_require__(252),
  'dag-cbor': __webpack_require__(253)
};

var resolve = function resolve(cid, name, path, toResolve, depth, ipld) {
  var resolver = resolvers[cid.codec];

  if (!resolver) {
    throw errCode(new Error("No resolver for codec ".concat(cid.codec)), 'ERR_NO_RESOLVER');
  }

  return resolver(cid, name, path, toResolve, resolve, depth, ipld);
};

module.exports = resolve;

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var errCode = __webpack_require__(2);

var UnixFS = __webpack_require__(6);

var findShardCid = __webpack_require__(244);

var findLinkCid = function findLinkCid(node, name) {
  var link = node.Links.find(function (link) {
    return link.Name === name;
  });
  return link && link.Hash;
};

var contentExporters = {
  raw: __webpack_require__(95),
  file: __webpack_require__(95),
  directory: __webpack_require__(250),
  'hamt-sharded-directory': __webpack_require__(251),
  metadata: function metadata(cid, node, unixfs, path, resolve, depth, ipld) {},
  symlink: function symlink(cid, node, unixfs, path, resolve, depth, ipld) {}
};

var unixFsResolver =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(cid, name, path, toResolve, resolve, depth, ipld) {
    var node, unixfs, next, linkCid, nextName, nextPath;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return ipld.get(cid);

          case 2:
            node = _context.sent;

            if (!name) {
              name = cid.toBaseEncodedString();
            }

            _context.prev = 4;
            unixfs = UnixFS.unmarshal(node.Data);
            _context.next = 11;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](4);
            throw errCode(_context.t0, 'ERR_NOT_UNIXFS');

          case 11:
            if (!path) {
              path = name;
            }

            if (!toResolve.length) {
              _context.next = 25;
              break;
            }

            if (!(unixfs && unixfs.type === 'hamt-sharded-directory')) {
              _context.next = 19;
              break;
            }

            _context.next = 16;
            return findShardCid(node, toResolve[0], ipld);

          case 16:
            linkCid = _context.sent;
            _context.next = 20;
            break;

          case 19:
            linkCid = findLinkCid(node, toResolve[0]);

          case 20:
            if (linkCid) {
              _context.next = 22;
              break;
            }

            throw errCode(new Error("file does not exist"), 'ERR_NOT_FOUND');

          case 22:
            // remove the path component we have resolved
            nextName = toResolve.shift();
            nextPath = "".concat(path, "/").concat(nextName);
            next = {
              cid: linkCid,
              toResolve: toResolve,
              name: nextName,
              path: nextPath
            };

          case 25:
            return _context.abrupt("return", {
              entry: {
                name: name,
                path: path,
                cid: cid,
                node: node,
                content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, ipld),
                unixfs: unixfs,
                depth: depth
              },
              next: next
            });

          case 26:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 8]]);
  }));

  return function unixFsResolver(_x, _x2, _x3, _x4, _x5, _x6, _x7) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = unixFsResolver;

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Bucket = __webpack_require__(55);

var DirSharded = __webpack_require__(34);

var addLinksToHamtBucket = function addLinksToHamtBucket(links, bucket, rootBucket) {
  return Promise.all(links.map(function (link) {
    if (link.Name.length === 2) {
      var pos = parseInt(link.Name, 16);
      return bucket._putObjectAt(pos, new Bucket({
        hashFn: DirSharded.hashFn
      }, bucket, pos));
    }

    return rootBucket.put(link.Name.substring(2), true);
  }));
};

var toPrefix = function toPrefix(position) {
  return position.toString('16').toUpperCase().padStart(2, '0').substring(0, 2);
};

var toBucketPath = function toBucketPath(position) {
  var bucket = position.bucket;
  var path = [];

  while (bucket._parent) {
    path.push(bucket);
    bucket = bucket._parent;
  }

  path.push(bucket);
  return path.reverse();
};

var findShardCid =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(node, name, ipld, context) {
    var position, prefix, bucketPath, link;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!context) {
              context = {
                rootBucket: new Bucket({
                  hashFn: DirSharded.hashFn
                }),
                hamtDepth: 1
              };
              context.lastBucket = context.rootBucket;
            }

            _context.next = 3;
            return addLinksToHamtBucket(node.Links, context.lastBucket, context.rootBucket);

          case 3:
            _context.next = 5;
            return context.rootBucket._findNewBucketAndPos(name);

          case 5:
            position = _context.sent;
            prefix = toPrefix(position.pos);
            bucketPath = toBucketPath(position);

            if (bucketPath.length > context.hamtDepth) {
              context.lastBucket = bucketPath[context.hamtDepth];
              prefix = toPrefix(context.lastBucket._posAtParent);
            }

            link = node.Links.find(function (link) {
              var entryPrefix = link.Name.substring(0, 2);
              var entryName = link.Name.substring(2);

              if (entryPrefix !== prefix) {
                // not the entry or subshard we're looking for
                return;
              }

              if (entryName && entryName !== name) {
                // not the entry we're looking for
                return;
              }

              return true;
            });

            if (link) {
              _context.next = 12;
              break;
            }

            return _context.abrupt("return", null);

          case 12:
            if (!(link.Name.substring(2) === name)) {
              _context.next = 14;
              break;
            }

            return _context.abrupt("return", link.Hash);

          case 14:
            context.hamtDepth++;
            _context.next = 17;
            return ipld.get(link.Hash);

          case 17:
            node = _context.sent;
            return _context.abrupt("return", findShardCid(node, name, ipld, context));

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function findShardCid(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = findShardCid;

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // JS treats subjects of bitwise operators as SIGNED 32 bit numbers,
// which means the maximum amount of bits we can store inside each byte
// is 7..

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BITS_PER_BYTE = 7;

module.exports =
/*#__PURE__*/
function () {
  function SparseArray() {
    _classCallCheck(this, SparseArray);

    this._bitArrays = [];
    this._data = [];
    this._length = 0;
    this._changedLength = false;
    this._changedData = false;
  }

  _createClass(SparseArray, [{
    key: "set",
    value: function set(index, value) {
      var pos = this._internalPositionFor(index, false);

      if (value === undefined) {
        // unsetting
        if (pos !== -1) {
          // remove item from bit array and array itself
          this._unsetInternalPos(pos);

          this._unsetBit(index);

          this._changedLength = true;
          this._changedData = true;
        }
      } else {
        var needsSort = false;

        if (pos === -1) {
          pos = this._data.length;

          this._setBit(index);

          this._changedData = true;
        } else {
          needsSort = true;
        }

        this._setInternalPos(pos, index, value, needsSort);

        this._changedLength = true;
      }
    }
  }, {
    key: "unset",
    value: function unset(index) {
      this.set(index, undefined);
    }
  }, {
    key: "get",
    value: function get(index) {
      this._sortData();

      var pos = this._internalPositionFor(index, true);

      if (pos === -1) {
        return undefined;
      }

      return this._data[pos][1];
    }
  }, {
    key: "push",
    value: function push(value) {
      this.set(this.length, value);
      return this.length;
    }
  }, {
    key: "forEach",
    value: function forEach(iterator) {
      var i = 0;

      while (i < this.length) {
        iterator(this.get(i), i, this);
        i++;
      }
    }
  }, {
    key: "map",
    value: function map(iterator) {
      var i = 0;
      var mapped = new Array(this.length);

      while (i < this.length) {
        mapped[i] = iterator(this.get(i), i, this);
        i++;
      }

      return mapped;
    }
  }, {
    key: "reduce",
    value: function reduce(reducer, initialValue) {
      var i = 0;
      var acc = initialValue;

      while (i < this.length) {
        var value = this.get(i);
        acc = reducer(acc, value, i);
        i++;
      }

      return acc;
    }
  }, {
    key: "find",
    value: function find(finder) {
      var i = 0,
          found,
          last;

      while (i < this.length && !found) {
        last = this.get(i);
        found = finder(last);
        i++;
      }

      return found ? last : undefined;
    }
  }, {
    key: "_internalPositionFor",
    value: function _internalPositionFor(index, noCreate) {
      var bytePos = this._bytePosFor(index, noCreate);

      if (bytePos >= this._bitArrays.length) {
        return -1;
      }

      var _byte = this._bitArrays[bytePos];
      var bitPos = index - bytePos * BITS_PER_BYTE;
      var exists = (_byte & 1 << bitPos) > 0;

      if (!exists) {
        return -1;
      }

      var previousPopCount = this._bitArrays.slice(0, bytePos).reduce(popCountReduce, 0);

      var mask = ~(0xffffffff << bitPos + 1);
      var bytePopCount = popCount(_byte & mask);
      var arrayPos = previousPopCount + bytePopCount - 1;
      return arrayPos;
    }
  }, {
    key: "_bytePosFor",
    value: function _bytePosFor(index, noCreate) {
      var bytePos = Math.floor(index / BITS_PER_BYTE);
      var targetLength = bytePos + 1;

      while (!noCreate && this._bitArrays.length < targetLength) {
        this._bitArrays.push(0);
      }

      return bytePos;
    }
  }, {
    key: "_setBit",
    value: function _setBit(index) {
      var bytePos = this._bytePosFor(index, false);

      this._bitArrays[bytePos] |= 1 << index - bytePos * BITS_PER_BYTE;
    }
  }, {
    key: "_unsetBit",
    value: function _unsetBit(index) {
      var bytePos = this._bytePosFor(index, false);

      this._bitArrays[bytePos] &= ~(1 << index - bytePos * BITS_PER_BYTE);
    }
  }, {
    key: "_setInternalPos",
    value: function _setInternalPos(pos, index, value, needsSort) {
      var data = this._data;
      var elem = [index, value];

      if (needsSort) {
        this._sortData();

        data[pos] = elem;
      } else {
        // new element. just shove it into the array
        // but be nice about where we shove it
        // in order to make sorting it later easier
        if (data.length) {
          if (data[data.length - 1][0] >= index) {
            data.push(elem);
          } else if (data[0][0] <= index) {
            data.unshift(elem);
          } else {
            var randomIndex = Math.round(data.length / 2);
            this._data = data.slice(0, randomIndex).concat(elem).concat(data.slice(randomIndex));
          }
        } else {
          this._data.push(elem);
        }

        this._changedData = true;
        this._changedLength = true;
      }
    }
  }, {
    key: "_unsetInternalPos",
    value: function _unsetInternalPos(pos) {
      this._data.splice(pos, 1);
    }
  }, {
    key: "_sortData",
    value: function _sortData() {
      if (this._changedData) {
        this._data.sort(sortInternal);
      }

      this._changedData = false;
    }
  }, {
    key: "bitField",
    value: function bitField() {
      var bytes = [];
      var pendingBitsForResultingByte = 8;
      var pendingBitsForNewByte = 0;
      var resultingByte = 0;
      var newByte;

      var pending = this._bitArrays.slice();

      while (pending.length || pendingBitsForNewByte) {
        if (pendingBitsForNewByte === 0) {
          newByte = pending.shift();
          pendingBitsForNewByte = 7;
        }

        var usingBits = Math.min(pendingBitsForNewByte, pendingBitsForResultingByte);
        var mask = ~(255 << usingBits);
        var masked = newByte & mask;
        resultingByte |= masked << 8 - pendingBitsForResultingByte;
        newByte = newByte >>> usingBits;
        pendingBitsForNewByte -= usingBits;
        pendingBitsForResultingByte -= usingBits;

        if (!pendingBitsForResultingByte || !pendingBitsForNewByte && !pending.length) {
          bytes.push(resultingByte);
          resultingByte = 0;
          pendingBitsForResultingByte = 8;
        }
      } // remove trailing zeroes


      for (var i = bytes.length - 1; i > 0; i--) {
        var value = bytes[i];

        if (value === 0) {
          bytes.pop();
        } else {
          break;
        }
      }

      return bytes;
    }
  }, {
    key: "compactArray",
    value: function compactArray() {
      this._sortData();

      return this._data.map(valueOnly);
    }
  }, {
    key: "length",
    get: function get() {
      this._sortData();

      if (this._changedLength) {
        var last = this._data[this._data.length - 1];
        this._length = last ? last[0] + 1 : 0;
        this._changedLength = false;
      }

      return this._length;
    }
  }]);

  return SparseArray;
}();

function popCountReduce(count, _byte2) {
  return count + popCount(_byte2);
}

function popCount(_v) {
  var v = _v;
  v = v - (v >> 1 & 0x55555555); // reuse input as temporary

  v = (v & 0x33333333) + (v >> 2 & 0x33333333); // temp

  return (v + (v >> 4) & 0xF0F0F0F) * 0x1010101 >> 24;
}

function sortInternal(a, b) {
  return a[0] - b[0];
}

function valueOnly(elem) {
  return elem[1];
}

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ConsumableBuffer = __webpack_require__(247);

module.exports = function wrapHash(hashFn) {
  return function hashing(value) {
    if (value instanceof InfiniteHash) {
      // already a hash. return it
      return value;
    } else {
      return new InfiniteHash(value, hashFn);
    }
  };
};

var InfiniteHash =
/*#__PURE__*/
function () {
  function InfiniteHash(value, hashFn) {
    _classCallCheck(this, InfiniteHash);

    if (typeof value !== 'string' && !Buffer.isBuffer(value)) {
      throw new Error('can only hash strings or buffers');
    }

    this._value = value;
    this._hashFn = hashFn;
    this._depth = -1;
    this._availableBits = 0;
    this._currentBufferIndex = 0;
    this._buffers = [];
  }

  _createClass(InfiniteHash, [{
    key: "take",
    value: function () {
      var _take = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(bits) {
        var pendingBits, result, hash, available, took;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                pendingBits = bits;

              case 1:
                if (!(this._availableBits < pendingBits)) {
                  _context.next = 6;
                  break;
                }

                _context.next = 4;
                return this._produceMoreBits();

              case 4:
                _context.next = 1;
                break;

              case 6:
                result = 0;

                while (pendingBits > 0) {
                  hash = this._buffers[this._currentBufferIndex];
                  available = Math.min(hash.availableBits(), pendingBits);
                  took = hash.take(available);
                  result = (result << available) + took;
                  pendingBits -= available;
                  this._availableBits -= available;

                  if (hash.availableBits() === 0) {
                    this._currentBufferIndex++;
                  }
                }

                return _context.abrupt("return", result);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function take(_x) {
        return _take.apply(this, arguments);
      }

      return take;
    }()
  }, {
    key: "untake",
    value: function untake(bits) {
      var pendingBits = bits;

      while (pendingBits > 0) {
        var hash = this._buffers[this._currentBufferIndex];
        var availableForUntake = Math.min(hash.totalBits() - hash.availableBits(), pendingBits);
        hash.untake(availableForUntake);
        pendingBits -= availableForUntake;
        this._availableBits += availableForUntake;

        if (this._currentBufferIndex > 0 && hash.totalBits() === hash.availableBits()) {
          this._depth--;
          this._currentBufferIndex--;
        }
      }
    }
  }, {
    key: "_produceMoreBits",
    value: function () {
      var _produceMoreBits2 = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        var value, hashValue, buffer;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this._depth++;
                value = this._depth ? this._value + this._depth : this._value;
                _context2.next = 4;
                return this._hashFn(value);

              case 4:
                hashValue = _context2.sent;
                buffer = new ConsumableBuffer(hashValue);

                this._buffers.push(buffer);

                this._availableBits += buffer.availableBits();

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _produceMoreBits() {
        return _produceMoreBits2.apply(this, arguments);
      }

      return _produceMoreBits;
    }()
  }]);

  return InfiniteHash;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var START_MASKS = [255, 254, 252, 248, 240, 224, 192, 128];
var STOP_MASKS = [1, 3, 7, 15, 31, 63, 127, 255];

module.exports =
/*#__PURE__*/
function () {
  function ConsumableBuffer(value) {
    _classCallCheck(this, ConsumableBuffer);

    this._value = value;
    this._currentBytePos = value.length - 1;
    this._currentBitPos = 7;
  }

  _createClass(ConsumableBuffer, [{
    key: "availableBits",
    value: function availableBits() {
      return this._currentBitPos + 1 + this._currentBytePos * 8;
    }
  }, {
    key: "totalBits",
    value: function totalBits() {
      return this._value.length * 8;
    }
  }, {
    key: "take",
    value: function take(bits) {
      var pendingBits = bits;
      var result = 0;

      while (pendingBits && this._haveBits()) {
        var _byte = this._value[this._currentBytePos];
        var availableBits = this._currentBitPos + 1;
        var taking = Math.min(availableBits, pendingBits);
        var value = byteBitsToInt(_byte, availableBits - taking, taking);
        result = (result << taking) + value;
        pendingBits -= taking;
        this._currentBitPos -= taking;

        if (this._currentBitPos < 0) {
          this._currentBitPos = 7;
          this._currentBytePos--;
        }
      }

      return result;
    }
  }, {
    key: "untake",
    value: function untake(bits) {
      this._currentBitPos += bits;

      while (this._currentBitPos > 7) {
        this._currentBitPos -= 8;
        this._currentBytePos += 1;
      }
    }
  }, {
    key: "_haveBits",
    value: function _haveBits() {
      return this._currentBytePos >= 0;
    }
  }]);

  return ConsumableBuffer;
}();

function byteBitsToInt(_byte2, start, length) {
  var mask = maskFor(start, length);
  return (_byte2 & mask) >>> start;
}

function maskFor(start, length) {
  return START_MASKS[start] & STOP_MASKS[Math.min(length + start - 1, 7)];
}

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Bucket = __webpack_require__(55);

module.exports = function createHAMT(options) {
  return new Bucket(options);
};

module.exports.isBucket = Bucket.isBucket;

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
 * @description Recursive object extending
 * @author Viacheslav Lotsmanov <lotsmanov89@gmail.com>
 * @license MIT
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2013-2018 Viacheslav Lotsmanov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function isSpecificValue(val) {
  return val instanceof Buffer || val instanceof Date || val instanceof RegExp ? true : false;
}

function cloneSpecificValue(val) {
  if (val instanceof Buffer) {
    var x = Buffer.alloc ? Buffer.alloc(val.length) : new Buffer(val.length);
    val.copy(x);
    return x;
  } else if (val instanceof Date) {
    return new Date(val.getTime());
  } else if (val instanceof RegExp) {
    return new RegExp(val);
  } else {
    throw new Error('Unexpected situation');
  }
}
/**
 * Recursive cloning array.
 */


function deepCloneArray(arr) {
  var clone = [];
  arr.forEach(function (item, index) {
    if (_typeof(item) === 'object' && item !== null) {
      if (Array.isArray(item)) {
        clone[index] = deepCloneArray(item);
      } else if (isSpecificValue(item)) {
        clone[index] = cloneSpecificValue(item);
      } else {
        clone[index] = deepExtend({}, item);
      }
    } else {
      clone[index] = item;
    }
  });
  return clone;
}

function safeGetProperty(object, property) {
  return property === '__proto__' ? undefined : object[property];
}
/**
 * Extening object that entered in first argument.
 *
 * Returns extended object or false if have no target object or incorrect type.
 *
 * If you wish to clone source object (without modify it), just use empty new
 * object as first argument, like this:
 *   deepExtend({}, yourObj_1, [yourObj_N]);
 */


var deepExtend = module.exports = function ()
/*obj_1, [obj_2], [obj_N]*/
{
  if (arguments.length < 1 || _typeof(arguments[0]) !== 'object') {
    return false;
  }

  if (arguments.length < 2) {
    return arguments[0];
  }

  var target = arguments[0]; // convert arguments to array and cut off target object

  var args = Array.prototype.slice.call(arguments, 1);
  var val, src, clone;
  args.forEach(function (obj) {
    // skip argument if isn't an object, is null, or is an array
    if (_typeof(obj) !== 'object' || obj === null || Array.isArray(obj)) {
      return;
    }

    Object.keys(obj).forEach(function (key) {
      src = safeGetProperty(target, key); // source value

      val = safeGetProperty(obj, key); // new value
      // recursion prevention

      if (val === target) {
        return;
        /**
         * if new value isn't object then just overwrite by new value
         * instead of extending.
         */
      } else if (_typeof(val) !== 'object' || val === null) {
        target[key] = val;
        return; // just clone arrays (and recursive clone objects inside)
      } else if (Array.isArray(val)) {
        target[key] = deepCloneArray(val);
        return; // custom cloning and overwrite for specific objects
      } else if (isSpecificValue(val)) {
        target[key] = cloneSpecificValue(val);
        return; // overwrite by new value if source isn't object or array
      } else if (_typeof(src) !== 'object' || src === null || Array.isArray(src)) {
        target[key] = deepExtend({}, val);
        return; // source value and new value is objects both, extending...
      } else {
        target[key] = deepExtend(src, val);
        return;
      }
    });
  });
  return target;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

var directoryContent = function directoryContent(cid, node, unixfs, path, resolve, depth, ipld) {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _wrapAsyncGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var options,
            offset,
            length,
            links,
            _iteratorNormalCompletion,
            _didIteratorError,
            _iteratorError,
            _iterator,
            _step,
            link,
            result,
            _args = arguments;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                offset = options.offset || 0;
                length = options.length || node.Links.length;
                links = node.Links.slice(offset, length);
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context.prev = 7;
                _iterator = links[Symbol.iterator]();

              case 9:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context.next = 19;
                  break;
                }

                link = _step.value;
                _context.next = 13;
                return _awaitAsyncGenerator(resolve(link.Hash, link.Name, "".concat(path, "/").concat(link.Name), [], depth + 1, ipld));

              case 13:
                result = _context.sent;
                _context.next = 16;
                return result.entry;

              case 16:
                _iteratorNormalCompletion = true;
                _context.next = 9;
                break;

              case 19:
                _context.next = 25;
                break;

              case 21:
                _context.prev = 21;
                _context.t0 = _context["catch"](7);
                _didIteratorError = true;
                _iteratorError = _context.t0;

              case 25:
                _context.prev = 25;
                _context.prev = 26;

                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }

              case 28:
                _context.prev = 28;

                if (!_didIteratorError) {
                  _context.next = 31;
                  break;
                }

                throw _iteratorError;

              case 31:
                return _context.finish(28);

              case 32:
                return _context.finish(25);

              case 33:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[7, 21, 25, 33], [26,, 28, 32]]);
      }));

      return function () {
        return _ref.apply(this, arguments);
      };
    }()
  );
};

module.exports = directoryContent;

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var hamtShardedDirectoryContent = function hamtShardedDirectoryContent(cid, node, unixfs, path, resolve, depth, ipld) {
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return listDirectory(node, path, resolve, depth, ipld, options);
  };
};

function listDirectory(_x, _x2, _x3, _x4, _x5, _x6) {
  return _listDirectory.apply(this, arguments);
}

function _listDirectory() {
  _listDirectory = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(node, path, resolve, depth, ipld, options) {
    var links, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, link, name, result, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, file;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            links = node.Links;
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context.prev = 4;
            _iterator2 = links[Symbol.iterator]();

          case 6:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context.next = 57;
              break;
            }

            link = _step2.value;
            name = link.Name.substring(2);

            if (!name) {
              _context.next = 17;
              break;
            }

            _context.next = 12;
            return _awaitAsyncGenerator(resolve(link.Hash, name, "".concat(path, "/").concat(name), [], depth + 1, ipld));

          case 12:
            result = _context.sent;
            _context.next = 15;
            return result.entry;

          case 15:
            _context.next = 54;
            break;

          case 17:
            _context.next = 19;
            return _awaitAsyncGenerator(ipld.get(link.Hash));

          case 19:
            node = _context.sent;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 22;
            _iterator = _asyncIterator(listDirectory(node, path, resolve, depth, ipld, options));

          case 24:
            _context.next = 26;
            return _awaitAsyncGenerator(_iterator.next());

          case 26:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 30;
            return _awaitAsyncGenerator(_step.value);

          case 30:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 38;
              break;
            }

            file = _value;
            _context.next = 35;
            return file;

          case 35:
            _iteratorNormalCompletion = true;
            _context.next = 24;
            break;

          case 38:
            _context.next = 44;
            break;

          case 40:
            _context.prev = 40;
            _context.t0 = _context["catch"](22);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 44:
            _context.prev = 44;
            _context.prev = 45;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 49;
              break;
            }

            _context.next = 49;
            return _awaitAsyncGenerator(_iterator["return"]());

          case 49:
            _context.prev = 49;

            if (!_didIteratorError) {
              _context.next = 52;
              break;
            }

            throw _iteratorError;

          case 52:
            return _context.finish(49);

          case 53:
            return _context.finish(44);

          case 54:
            _iteratorNormalCompletion2 = true;
            _context.next = 6;
            break;

          case 57:
            _context.next = 63;
            break;

          case 59:
            _context.prev = 59;
            _context.t1 = _context["catch"](4);
            _didIteratorError2 = true;
            _iteratorError2 = _context.t1;

          case 63:
            _context.prev = 63;
            _context.prev = 64;

            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }

          case 66:
            _context.prev = 66;

            if (!_didIteratorError2) {
              _context.next = 69;
              break;
            }

            throw _iteratorError2;

          case 69:
            return _context.finish(66);

          case 70:
            return _context.finish(63);

          case 71:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 59, 63, 71], [22, 40, 44, 54], [45,, 49, 53], [64,, 66, 70]]);
  }));
  return _listDirectory.apply(this, arguments);
}

module.exports = hamtShardedDirectoryContent;

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var errCode = __webpack_require__(2);

var extractDataFromBlock = __webpack_require__(96);

var validateOffsetAndLength = __webpack_require__(97);

var rawContent = function rawContent(node) {
  return (
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee() {
      var options,
          _validateOffsetAndLen,
          offset,
          length,
          _args = arguments;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
              _validateOffsetAndLen = validateOffsetAndLength(node.length, options.offset, options.length), offset = _validateOffsetAndLen.offset, length = _validateOffsetAndLen.length;
              _context.next = 4;
              return extractDataFromBlock(node, 0, offset, offset + length);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })
  );
};

var resolve =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(cid, name, path, toResolve, _resolve, depth, ipld) {
    var buf;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!toResolve.length) {
              _context2.next = 2;
              break;
            }

            throw errCode(new Error("No link named ".concat(path, " found in raw node ").concat(cid.toBaseEncodedString())), 'ERR_NOT_FOUND');

          case 2:
            _context2.next = 4;
            return ipld.get(cid);

          case 4:
            buf = _context2.sent;
            return _context2.abrupt("return", {
              entry: {
                name: name,
                path: path,
                cid: cid,
                node: buf,
                content: rawContent(buf),
                depth: depth
              }
            });

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function resolve(_x, _x2, _x3, _x4, _x5, _x6, _x7) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = resolve;

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var CID = __webpack_require__(11);

var errCode = __webpack_require__(2);

var resolve =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(cid, name, path, toResolve, _resolve, depth, ipld) {
    var node, subObject, subPath, prop;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return ipld.get(cid);

          case 2:
            node = _context.sent;
            subObject = node;
            subPath = path;

          case 5:
            if (!toResolve.length) {
              _context.next = 18;
              break;
            }

            prop = toResolve[0];

            if (!(prop in subObject)) {
              _context.next = 15;
              break;
            }

            // remove the bit of the path we have resolved
            toResolve.shift();
            subPath = "".concat(subPath, "/").concat(prop);

            if (!CID.isCID(subObject[prop])) {
              _context.next = 12;
              break;
            }

            return _context.abrupt("return", {
              entry: {
                name: name,
                path: path,
                cid: cid,
                node: node,
                depth: depth
              },
              next: {
                cid: subObject[prop],
                name: prop,
                path: subPath,
                toResolve: toResolve
              }
            });

          case 12:
            subObject = subObject[prop];
            _context.next = 16;
            break;

          case 15:
            throw errCode(new Error("No property named ".concat(prop, " found in cbor node ").concat(cid.toBaseEncodedString())), 'ERR_NO_PROP');

          case 16:
            _context.next = 5;
            break;

          case 18:
            return _context.abrupt("return", {
              entry: {
                name: name,
                path: path,
                cid: cid,
                node: node,
                depth: depth
              }
            });

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function resolve(_x, _x2, _x3, _x4, _x5, _x6, _x7) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = resolve;

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var UnixFS = __webpack_require__(6);

var _require = __webpack_require__(13),
    DAGNode = _require.DAGNode;

var mc = __webpack_require__(15);

var mh = __webpack_require__(9);

var createNode =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(context, type, options) {
    var format, hashAlg, node, cid;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            format = mc[options.format.toUpperCase().replace(/-/g, '_')];
            hashAlg = mh.names[options.hashAlg];
            node = DAGNode.create(new UnixFS(type).marshal());
            _context.next = 5;
            return context.ipld.put(node, format, {
              cidVersion: options.cidVersion,
              hashAlg: hashAlg
            });

          case 5:
            cid = _context.sent;
            return _context.abrupt("return", {
              cid: cid,
              node: node
            });

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createNode(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = createNode;

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var toSources = __webpack_require__(58);

function toSourcesAndDestination(_x, _x2) {
  return _toSourcesAndDestination.apply(this, arguments);
}

function _toSourcesAndDestination() {
  _toSourcesAndDestination = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(context, args) {
    var _ref, sources, options, destination;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return toSources(context, args);

          case 2:
            _ref = _context.sent;
            sources = _ref.sources;
            options = _ref.options;
            destination = sources.pop();
            return _context.abrupt("return", {
              destination: destination,
              sources: sources,
              options: options
            });

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _toSourcesAndDestination.apply(this, arguments);
}

module.exports = toSourcesAndDestination;

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var applyDefaultOptions = __webpack_require__(10);

var stat = __webpack_require__(28);

var _require = __webpack_require__(8),
    FILE_SEPARATOR = _require.FILE_SEPARATOR;

var defaultOptions = {};

module.exports = function (context) {
  return (
    /*#__PURE__*/
    function () {
      var _mfsFlush = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var path,
            options,
            _args = arguments;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                path = _args.length > 0 && _args[0] !== undefined ? _args[0] : FILE_SEPARATOR;
                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : defaultOptions;
                options = applyDefaultOptions(options, defaultOptions);
                _context.next = 5;
                return stat(context)(path, options);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function mfsFlush() {
        return _mfsFlush.apply(this, arguments);
      }

      return mfsFlush;
    }()
  );
};

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var applyDefaultOptions = __webpack_require__(10);

var toSources = __webpack_require__(58);

var cp = __webpack_require__(98);

var rm = __webpack_require__(100);

var defaultOptions = {
  parents: false,
  recursive: false,
  flush: true,
  format: 'dag-pb',
  hashAlg: 'sha2-256',
  shardSplitThreshold: 1000
};

module.exports = function (context) {
  return (
    /*#__PURE__*/
    function () {
      var _mfsMv = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var _len,
            args,
            _key,
            _ref,
            sources,
            options,
            cpArgs,
            rmArgs,
            _args = arguments;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = _args[_key];
                }

                if (Array.isArray(args[0])) {
                  args = args[0].concat(args.slice(1));
                }

                _context.next = 4;
                return toSources(context, args);

              case 4:
                _ref = _context.sent;
                sources = _ref.sources;
                options = applyDefaultOptions(args, defaultOptions);
                cpArgs = sources.map(function (source) {
                  return source.path;
                }).concat(options); // remove the last source as it'll be the destination

                rmArgs = sources.slice(0, -1).map(function (source) {
                  return source.path;
                }).concat(Object.assign(options, {
                  recursive: true
                }));
                _context.next = 11;
                return cp(context).apply(null, cpArgs);

              case 11:
                _context.next = 13;
                return rm(context).apply(null, rmArgs);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function mfsMv() {
        return _mfsMv.apply(this, arguments);
      }

      return mfsMv;
    }()
  );
};

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _require = __webpack_require__(13),
    DAGNode = _require.DAGNode,
    DAGLink = _require.DAGLink;

var CID = __webpack_require__(11);

var log = __webpack_require__(5)('ipfs:mfs:core:utils:remove-link');

var UnixFS = __webpack_require__(6);

var _require2 = __webpack_require__(99),
    generatePath = _require2.generatePath,
    updateHamtDirectory = _require2.updateHamtDirectory;

var errCode = __webpack_require__(2);

var mc = __webpack_require__(15);

var mh = __webpack_require__(9);

var removeLink =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(context, options) {
    var meta;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!options.parentCid && !options.parent)) {
              _context.next = 2;
              break;
            }

            throw errCode(new Error('No parent node or CID passed to removeLink'), 'EINVALIDPARENT');

          case 2:
            if (!(options.parentCid && !CID.isCID(options.parentCid))) {
              _context.next = 4;
              break;
            }

            throw errCode(new Error('Invalid CID passed to removeLink'), 'EINVALIDPARENTCID');

          case 4:
            if (options.parent) {
              _context.next = 9;
              break;
            }

            log("Loading parent node ".concat(options.parentCid));
            _context.next = 8;
            return context.ipld.get(options.parentCid);

          case 8:
            options.parent = _context.sent;

          case 9:
            if (options.name) {
              _context.next = 11;
              break;
            }

            throw errCode(new Error('No child name passed to removeLink'), 'EINVALIDCHILDNAME');

          case 11:
            meta = UnixFS.unmarshal(options.parent.Data);

            if (!(meta.type === 'hamt-sharded-directory')) {
              _context.next = 15;
              break;
            }

            log("Removing ".concat(options.name, " from sharded directory"));
            return _context.abrupt("return", removeFromShardedDirectory(context, options));

          case 15:
            log("Removing link ".concat(options.name, " regular directory"));
            return _context.abrupt("return", removeFromDirectory(context, options));

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function removeLink(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var removeFromDirectory =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(context, options) {
    var format, hashAlg, newParentNode, cid;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            format = mc[options.format.toUpperCase().replace(/-/g, '_')];
            hashAlg = mh.names[options.hashAlg];
            _context2.next = 4;
            return DAGNode.rmLink(options.parent, options.name);

          case 4:
            newParentNode = _context2.sent;
            _context2.next = 7;
            return context.ipld.put(newParentNode, format, {
              cidVersion: options.cidVersion,
              hashAlg: hashAlg
            });

          case 7:
            cid = _context2.sent;
            log("Updated regular directory ".concat(cid));
            return _context2.abrupt("return", {
              node: newParentNode,
              cid: cid
            });

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function removeFromDirectory(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

var removeFromShardedDirectory =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(context, options) {
    var _ref4, rootBucket, path, _ref5, node;

    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return generatePath(context, options.name, options.parent);

          case 2:
            _ref4 = _context3.sent;
            rootBucket = _ref4.rootBucket;
            path = _ref4.path;
            _context3.next = 7;
            return rootBucket.del(options.name);

          case 7:
            _context3.next = 9;
            return updateShard(context, path, {
              name: options.name,
              cid: options.cid,
              size: options.size,
              hashAlg: options.hashAlg,
              format: options.format,
              cidVersion: options.cidVersion,
              flush: options.flush
            }, options);

          case 9:
            _ref5 = _context3.sent;
            node = _ref5.node;
            return _context3.abrupt("return", updateHamtDirectory(context, node.Links, rootBucket, options));

          case 12:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function removeFromShardedDirectory(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();

var updateShard =
/*#__PURE__*/
function () {
  var _ref6 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee4(context, positions, child, options) {
    var _positions$pop, bucket, prefix, node, link, newNode, result, newName, size;

    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _positions$pop = positions.pop(), bucket = _positions$pop.bucket, prefix = _positions$pop.prefix, node = _positions$pop.node;
            link = node.Links.find(function (link) {
              return link.Name.substring(0, 2) === prefix;
            });

            if (link) {
              _context4.next = 4;
              break;
            }

            throw errCode(new Error("No link found with prefix ".concat(prefix, " for file ").concat(child.name)), 'ERR_NOT_FOUND');

          case 4:
            if (!(link.Name === "".concat(prefix).concat(child.name))) {
              _context4.next = 12;
              break;
            }

            log("Removing existing link ".concat(link.Name));
            _context4.next = 8;
            return DAGNode.rmLink(node, link.Name);

          case 8:
            newNode = _context4.sent;
            _context4.next = 11;
            return bucket.del(child.name);

          case 11:
            return _context4.abrupt("return", updateHamtDirectory(context, newNode.Links, bucket, options));

          case 12:
            log("Descending into sub-shard ".concat(link.Name, " for ").concat(prefix).concat(child.name));
            _context4.next = 15;
            return updateShard(context, positions, child, options);

          case 15:
            result = _context4.sent;
            newName = prefix;

            if (result.node.Links.length === 1) {
              log("Removing subshard for ".concat(prefix)); // convert shard back to normal dir

              result.cid = result.node.Links[0].Hash;
              result.node = result.node.Links[0];
              newName = "".concat(prefix).concat(result.node.Name.substring(2));
            }

            log("Updating shard ".concat(prefix, " with name ").concat(newName));
            size = DAGNode.isDAGNode(result.node) ? result.node.size : result.node.Tsize;
            return _context4.abrupt("return", updateShardParent(context, bucket, node, prefix, newName, size, result.cid, options));

          case 21:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function updateShard(_x7, _x8, _x9, _x10) {
    return _ref6.apply(this, arguments);
  };
}();

var updateShardParent =
/*#__PURE__*/
function () {
  var _ref7 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee5(context, bucket, parent, oldName, newName, size, cid, options) {
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return DAGNode.rmLink(parent, oldName);

          case 2:
            parent = _context5.sent;
            _context5.next = 5;
            return DAGNode.addLink(parent, new DAGLink(newName, size, cid));

          case 5:
            parent = _context5.sent;
            return _context5.abrupt("return", updateHamtDirectory(context, parent.Links, bucket, options));

          case 7:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function updateShardParent(_x11, _x12, _x13, _x14, _x15, _x16, _x17, _x18) {
    return _ref7.apply(this, arguments);
  };
}();

module.exports = removeLink;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

var log = __webpack_require__(5)('ipfs:mfs:write');

var importer = __webpack_require__(260);

var stat = __webpack_require__(28);

var mkdir = __webpack_require__(57);

var addLink = __webpack_require__(39);

var applyDefaultOptions = __webpack_require__(10);

var createLock = __webpack_require__(70);

var toAsyncIterator = __webpack_require__(290);

var toMfsPath = __webpack_require__(17);

var toPathComponents = __webpack_require__(54);

var toTrail = __webpack_require__(59);

var updateTree = __webpack_require__(38);

var updateMfsRoot = __webpack_require__(37);

var errCode = __webpack_require__(2);

var _require = __webpack_require__(8),
    MAX_CHUNK_SIZE = _require.MAX_CHUNK_SIZE;

var last = __webpack_require__(36);

var defaultOptions = {
  offset: 0,
  // the offset in the file to begin writing
  length: undefined,
  // how many bytes from the incoming buffer to write
  create: false,
  // whether to create the file if it does not exist
  truncate: false,
  // whether to truncate the file first
  rawLeaves: false,
  reduceSingleLeafToSelf: false,
  cidVersion: 0,
  hashAlg: 'sha2-256',
  format: 'dag-pb',
  parents: false,
  // whether to create intermediate directories if they do not exist
  progress: function progress() {},
  strategy: 'trickle',
  flush: true,
  leafType: 'raw',
  shardSplitThreshold: 1000
};

module.exports = function (context) {
  return (
    /*#__PURE__*/
    function () {
      var _mfsWrite = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(path, content, options) {
        var source, destination, parent;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                log('Hello world, writing', path, content, options);
                options = applyDefaultOptions(options, defaultOptions);
                log('Reading source, destination and parent');
                _context2.next = 5;
                return createLock().readLock(
                /*#__PURE__*/
                _asyncToGenerator(
                /*#__PURE__*/
                _regenerator["default"].mark(function _callee() {
                  return _regenerator["default"].wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return toAsyncIterator(content, options);

                        case 2:
                          source = _context.sent;
                          _context.next = 5;
                          return toMfsPath(context, path);

                        case 5:
                          destination = _context.sent;
                          _context.next = 8;
                          return toMfsPath(context, destination.mfsDirectory);

                        case 8:
                          parent = _context.sent;

                        case 9:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                })))();

              case 5:
                log('Read source, destination and parent');

                if (!(!options.parents && !parent.exists)) {
                  _context2.next = 8;
                  break;
                }

                throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST');

              case 8:
                if (!(!options.create && !destination.exists)) {
                  _context2.next = 10;
                  break;
                }

                throw errCode(new Error('file does not exist'), 'ERR_NO_EXIST');

              case 10:
                return _context2.abrupt("return", updateOrImport(context, path, source, destination, options));

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function mfsWrite(_x4, _x5, _x6) {
        return _mfsWrite.apply(this, arguments);
      }

      return mfsWrite;
    }()
  );
};

var updateOrImport =
/*#__PURE__*/
function () {
  var _ref5 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee4(context, path, source, destination, options) {
    var child;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return write(context, source, destination, options);

          case 2:
            child = _context4.sent;
            _context4.next = 5;
            return createLock().writeLock(
            /*#__PURE__*/
            _asyncToGenerator(
            /*#__PURE__*/
            _regenerator["default"].mark(function _callee3() {
              var pathComponents, fileName, parentExists, updatedPath, trail, parent, parentNode, result, newRootCid;
              return _regenerator["default"].wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      pathComponents = toPathComponents(path);
                      fileName = pathComponents.pop();
                      parentExists = false;
                      _context3.prev = 3;
                      _context3.next = 6;
                      return stat(context)("/".concat(pathComponents.join('/')), options);

                    case 6:
                      parentExists = true;
                      _context3.next = 13;
                      break;

                    case 9:
                      _context3.prev = 9;
                      _context3.t0 = _context3["catch"](3);

                      if (!(_context3.t0.code !== 'ERR_NOT_FOUND')) {
                        _context3.next = 13;
                        break;
                      }

                      throw _context3.t0;

                    case 13:
                      if (parentExists) {
                        _context3.next = 16;
                        break;
                      }

                      _context3.next = 16;
                      return mkdir(context)("/".concat(pathComponents.join('/')), options);

                    case 16:
                      _context3.next = 18;
                      return toMfsPath(context, path);

                    case 18:
                      updatedPath = _context3.sent;
                      _context3.next = 21;
                      return toTrail(context, updatedPath.mfsDirectory, options);

                    case 21:
                      trail = _context3.sent;
                      parent = trail[trail.length - 1];

                      if (parent.type.includes('directory')) {
                        _context3.next = 25;
                        break;
                      }

                      throw errCode(new Error("cannot write to ".concat(parent.name, ": Not a directory")), 'ERR_NOT_A_DIRECTORY');

                    case 25:
                      _context3.next = 27;
                      return context.ipld.get(parent.cid);

                    case 27:
                      parentNode = _context3.sent;
                      _context3.next = 30;
                      return addLink(context, {
                        parent: parentNode,
                        name: fileName,
                        cid: child.cid,
                        size: child.size,
                        flush: options.flush,
                        shardSplitThreshold: options.shardSplitThreshold,
                        format: options.format,
                        hashAlg: options.hashAlg,
                        cidVersion: options.cidVersion
                      });

                    case 30:
                      result = _context3.sent;
                      parent.cid = result.cid; // update the tree with the new child

                      _context3.next = 34;
                      return updateTree(context, trail, options);

                    case 34:
                      newRootCid = _context3.sent;
                      _context3.next = 37;
                      return updateMfsRoot(context, newRootCid);

                    case 37:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3, null, [[3, 9]]);
            })))();

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function updateOrImport(_x7, _x8, _x9, _x10, _x11) {
    return _ref5.apply(this, arguments);
  };
}();

var write =
/*#__PURE__*/
function () {
  var _ref7 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee6(context, source, destination, options) {
    var sources, content, result;
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (destination.exists) {
              log("Overwriting file ".concat(destination.cid, " offset ").concat(options.offset, " length ").concat(options.length));
            } else {
              log("Writing file offset ".concat(options.offset, " length ").concat(options.length));
            }

            sources = []; // pad start of file if necessary

            if (options.offset > 0) {
              if (destination.unixfs && destination.unixfs.fileSize() > options.offset) {
                log("Writing first ".concat(options.offset, " bytes of original file"));
                sources.push(function () {
                  return destination.content({
                    offset: 0,
                    length: options.offset
                  });
                });
              } else {
                log("Writing zeros for first ".concat(options.offset, " bytes"));
                sources.push(asyncZeroes(options.offset));
              }
            }

            sources.push(limitAsyncStreamBytes(source, options.length));
            content = countBytesStreamed(catAsyncInterators(sources), function (bytesWritten) {
              if (destination.unixfs && !options.truncate) {
                // if we've done reading from the new source and we are not going
                // to truncate the file, add the end of the existing file to the output
                var fileSize = destination.unixfs.fileSize();

                if (fileSize > bytesWritten) {
                  log("Writing last ".concat(fileSize - bytesWritten, " of ").concat(fileSize, " bytes from original file starting at offset ").concat(bytesWritten));
                  return destination.content({
                    offset: bytesWritten
                  });
                } else {
                  log("Not writing last bytes from original file");
                }
              }

              return _defineProperty({}, Symbol.asyncIterator, _wrapAsyncGenerator(
              /*#__PURE__*/
              _regenerator["default"].mark(function _callee5() {
                return _regenerator["default"].wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5);
              })));
            });
            _context6.next = 7;
            return last(importer([{
              content: content
            }], context.ipld, {
              progress: options.progress,
              hashAlg: options.hashAlg,
              cidVersion: options.cidVersion,
              strategy: options.strategy,
              rawLeaves: options.rawLeaves,
              reduceSingleLeafToSelf: options.reduceSingleLeafToSelf,
              leafType: options.leafType
            }));

          case 7:
            result = _context6.sent;
            log("Wrote ".concat(result.cid));
            return _context6.abrupt("return", {
              cid: result.cid,
              size: result.size
            });

          case 10:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function write(_x12, _x13, _x14, _x15) {
    return _ref7.apply(this, arguments);
  };
}();

var limitAsyncStreamBytes = function limitAsyncStreamBytes(stream, limit) {
  return (
    /*#__PURE__*/
    function () {
      var _limitAsyncStreamBytes2 = _wrapAsyncGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee7() {
        var emitted, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, buf;

        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                emitted = 0;
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _context7.prev = 3;
                _iterator = _asyncIterator(stream);

              case 5:
                _context7.next = 7;
                return _awaitAsyncGenerator(_iterator.next());

              case 7:
                _step = _context7.sent;
                _iteratorNormalCompletion = _step.done;
                _context7.next = 11;
                return _awaitAsyncGenerator(_step.value);

              case 11:
                _value = _context7.sent;

                if (_iteratorNormalCompletion) {
                  _context7.next = 24;
                  break;
                }

                buf = _value;
                emitted += buf.length;

                if (!(emitted > limit)) {
                  _context7.next = 19;
                  break;
                }

                _context7.next = 18;
                return buf.slice(0, limit - emitted);

              case 18:
                return _context7.abrupt("return");

              case 19:
                _context7.next = 21;
                return buf;

              case 21:
                _iteratorNormalCompletion = true;
                _context7.next = 5;
                break;

              case 24:
                _context7.next = 30;
                break;

              case 26:
                _context7.prev = 26;
                _context7.t0 = _context7["catch"](3);
                _didIteratorError = true;
                _iteratorError = _context7.t0;

              case 30:
                _context7.prev = 30;
                _context7.prev = 31;

                if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
                  _context7.next = 35;
                  break;
                }

                _context7.next = 35;
                return _awaitAsyncGenerator(_iterator["return"]());

              case 35:
                _context7.prev = 35;

                if (!_didIteratorError) {
                  _context7.next = 38;
                  break;
                }

                throw _iteratorError;

              case 38:
                return _context7.finish(35);

              case 39:
                return _context7.finish(30);

              case 40:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, null, [[3, 26, 30, 40], [31,, 35, 39]]);
      }));

      function _limitAsyncStreamBytes() {
        return _limitAsyncStreamBytes2.apply(this, arguments);
      }

      return _limitAsyncStreamBytes;
    }()
  );
};

var asyncZeroes = function asyncZeroes(count) {
  var chunkSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_CHUNK_SIZE;
  var buf = Buffer.alloc(chunkSize, 0);

  var stream = _defineProperty({}, Symbol.asyncIterator, function () {
    var _asyncZeroes2 = _wrapAsyncGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee8() {
      return _regenerator["default"].wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (false) {}

              _context8.next = 3;
              return buf.slice();

            case 3:
              _context8.next = 0;
              break;

            case 5:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    function _asyncZeroes() {
      return _asyncZeroes2.apply(this, arguments);
    }

    return _asyncZeroes;
  }());

  return limitAsyncStreamBytes(stream, count);
};

var catAsyncInterators =
/*#__PURE__*/
function () {
  var _ref2 = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee9(sources) {
    var i, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, buf;

    return _regenerator["default"].wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            i = 0;

          case 1:
            if (!(i < sources.length)) {
              _context9.next = 39;
              break;
            }

            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _context9.prev = 4;
            _iterator2 = _asyncIterator(sources[i]());

          case 6:
            _context9.next = 8;
            return _awaitAsyncGenerator(_iterator2.next());

          case 8:
            _step2 = _context9.sent;
            _iteratorNormalCompletion2 = _step2.done;
            _context9.next = 12;
            return _awaitAsyncGenerator(_step2.value);

          case 12:
            _value2 = _context9.sent;

            if (_iteratorNormalCompletion2) {
              _context9.next = 20;
              break;
            }

            buf = _value2;
            _context9.next = 17;
            return buf;

          case 17:
            _iteratorNormalCompletion2 = true;
            _context9.next = 6;
            break;

          case 20:
            _context9.next = 26;
            break;

          case 22:
            _context9.prev = 22;
            _context9.t0 = _context9["catch"](4);
            _didIteratorError2 = true;
            _iteratorError2 = _context9.t0;

          case 26:
            _context9.prev = 26;
            _context9.prev = 27;

            if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
              _context9.next = 31;
              break;
            }

            _context9.next = 31;
            return _awaitAsyncGenerator(_iterator2["return"]());

          case 31:
            _context9.prev = 31;

            if (!_didIteratorError2) {
              _context9.next = 34;
              break;
            }

            throw _iteratorError2;

          case 34:
            return _context9.finish(31);

          case 35:
            return _context9.finish(26);

          case 36:
            i++;
            _context9.next = 1;
            break;

          case 39:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9, null, [[4, 22, 26, 36], [27,, 31, 35]]);
  }));

  return function catAsyncInterators(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var countBytesStreamed =
/*#__PURE__*/
function () {
  var _ref3 = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee10(source, notify) {
    var wrote, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, buf, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _value4, _buf;

    return _regenerator["default"].wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            wrote = 0;
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _context10.prev = 3;
            _iterator3 = _asyncIterator(source);

          case 5:
            _context10.next = 7;
            return _awaitAsyncGenerator(_iterator3.next());

          case 7:
            _step3 = _context10.sent;
            _iteratorNormalCompletion3 = _step3.done;
            _context10.next = 11;
            return _awaitAsyncGenerator(_step3.value);

          case 11:
            _value3 = _context10.sent;

            if (_iteratorNormalCompletion3) {
              _context10.next = 20;
              break;
            }

            buf = _value3;
            wrote += buf.length;
            _context10.next = 17;
            return buf;

          case 17:
            _iteratorNormalCompletion3 = true;
            _context10.next = 5;
            break;

          case 20:
            _context10.next = 26;
            break;

          case 22:
            _context10.prev = 22;
            _context10.t0 = _context10["catch"](3);
            _didIteratorError3 = true;
            _iteratorError3 = _context10.t0;

          case 26:
            _context10.prev = 26;
            _context10.prev = 27;

            if (!(!_iteratorNormalCompletion3 && _iterator3["return"] != null)) {
              _context10.next = 31;
              break;
            }

            _context10.next = 31;
            return _awaitAsyncGenerator(_iterator3["return"]());

          case 31:
            _context10.prev = 31;

            if (!_didIteratorError3) {
              _context10.next = 34;
              break;
            }

            throw _iteratorError3;

          case 34:
            return _context10.finish(31);

          case 35:
            return _context10.finish(26);

          case 36:
            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _context10.prev = 38;
            _iterator4 = _asyncIterator(notify(wrote));

          case 40:
            _context10.next = 42;
            return _awaitAsyncGenerator(_iterator4.next());

          case 42:
            _step4 = _context10.sent;
            _iteratorNormalCompletion4 = _step4.done;
            _context10.next = 46;
            return _awaitAsyncGenerator(_step4.value);

          case 46:
            _value4 = _context10.sent;

            if (_iteratorNormalCompletion4) {
              _context10.next = 55;
              break;
            }

            _buf = _value4;
            wrote += _buf.length;
            _context10.next = 52;
            return _buf;

          case 52:
            _iteratorNormalCompletion4 = true;
            _context10.next = 40;
            break;

          case 55:
            _context10.next = 61;
            break;

          case 57:
            _context10.prev = 57;
            _context10.t1 = _context10["catch"](38);
            _didIteratorError4 = true;
            _iteratorError4 = _context10.t1;

          case 61:
            _context10.prev = 61;
            _context10.prev = 62;

            if (!(!_iteratorNormalCompletion4 && _iterator4["return"] != null)) {
              _context10.next = 66;
              break;
            }

            _context10.next = 66;
            return _awaitAsyncGenerator(_iterator4["return"]());

          case 66:
            _context10.prev = 66;

            if (!_didIteratorError4) {
              _context10.next = 69;
              break;
            }

            throw _iteratorError4;

          case 69:
            return _context10.finish(66);

          case 70:
            return _context10.finish(61);

          case 71:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10, null, [[3, 22, 26, 36], [27,, 31, 35], [38, 57, 61, 71], [62,, 66, 70]]);
  }));

  return function countBytesStreamed(_x2, _x3) {
    return _ref3.apply(this, arguments);
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var _require = __webpack_require__(261),
    superstruct = _require.superstruct;

var dagBuilder = __webpack_require__(262);

var treeBuilder = __webpack_require__(285);

var mh = __webpack_require__(9);

var struct = superstruct({
  types: {
    codec: function codec(v) {
      return ['dag-pb', 'dag-cbor', 'raw'].includes(v);
    },
    hashAlg: function hashAlg(v) {
      return Object.keys(mh.names).includes(v);
    },
    leafType: function leafType(v) {
      return ['file', 'raw'].includes(v);
    }
  }
});
var ChunkerOptions = struct({
  minChunkSize: 'number?',
  maxChunkSize: 'number?',
  avgChunkSize: 'number?',
  window: 'number?',
  polynomial: 'number?'
}, {
  maxChunkSize: 262144,
  avgChunkSize: 262144,
  window: 16,
  polynomial: 17437180132763653 // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11

});
var BuilderOptions = struct({
  maxChildrenPerNode: 'number?',
  layerRepeat: 'number?'
}, {
  maxChildrenPerNode: 174,
  layerRepeat: 4
});
var Options = struct({
  chunker: struct["enum"](['fixed', 'rabin']),
  rawLeaves: 'boolean?',
  hashOnly: 'boolean?',
  strategy: struct["enum"](['balanced', 'flat', 'trickle']),
  reduceSingleLeafToSelf: 'boolean?',
  codec: 'codec?',
  format: 'codec?',
  hashAlg: 'hashAlg?',
  leafType: 'leafType?',
  cidVersion: 'number?',
  progress: 'function?',
  wrapWithDirectory: 'boolean?',
  shardSplitThreshold: 'number?',
  onlyHash: 'boolean?',
  chunkerOptions: ChunkerOptions,
  builderOptions: BuilderOptions,
  wrap: 'boolean?',
  pin: 'boolean?',
  recursive: 'boolean?',
  ignore: 'array?',
  hidden: 'boolean?',
  preload: 'boolean?'
}, {
  chunker: 'fixed',
  strategy: 'balanced',
  rawLeaves: false,
  reduceSingleLeafToSelf: true,
  codec: 'dag-pb',
  hashAlg: 'sha2-256',
  leafType: 'file',
  cidVersion: 0,
  progress: function progress() {
    return function () {};
  },
  shardSplitThreshold: 1000
});

module.exports =
/*#__PURE__*/
function () {
  var _ref = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(source, ipld) {
    var options,
        opts,
        _iteratorNormalCompletion,
        _didIteratorError,
        _iteratorError,
        _iterator,
        _step,
        _value,
        entry,
        _args = arguments;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            opts = Options(options);

            if (options.cidVersion > 0 && options.rawLeaves === undefined) {
              // if the cid version is 1 or above, use raw leaves as this is
              // what go does.
              opts.rawLeaves = true;
            }

            if (options.hashAlg !== undefined && options.rawLeaves === undefined) {
              // if a non-default hash alg has been specified, use raw leaves as this is
              // what go does.
              opts.rawLeaves = true;
            } // go-ifps trickle dag defaults to unixfs raw leaves, balanced dag defaults to file leaves


            if (options.strategy === 'trickle') {
              opts.leafType = 'raw';
              opts.reduceSingleLeafToSelf = false;
            }

            if (options.format) {
              options.codec = options.format;
            }

            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 8;
            _iterator = _asyncIterator(treeBuilder(dagBuilder(source, ipld, opts), ipld, opts));

          case 10:
            _context.next = 12;
            return _awaitAsyncGenerator(_iterator.next());

          case 12:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 16;
            return _awaitAsyncGenerator(_step.value);

          case 16:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 24;
              break;
            }

            entry = _value;
            _context.next = 21;
            return {
              cid: entry.cid,
              path: entry.path,
              unixfs: entry.unixfs,
              size: entry.size
            };

          case 21:
            _iteratorNormalCompletion = true;
            _context.next = 10;
            break;

          case 24:
            _context.next = 30;
            break;

          case 26:
            _context.prev = 26;
            _context.t0 = _context["catch"](8);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 30:
            _context.prev = 30;
            _context.prev = 31;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 35;
              break;
            }

            _context.next = 35;
            return _awaitAsyncGenerator(_iterator["return"]());

          case 35:
            _context.prev = 35;

            if (!_didIteratorError) {
              _context.next = 38;
              break;
            }

            throw _iteratorError;

          case 38:
            return _context.finish(35);

          case 39:
            return _context.finish(30);

          case 40:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[8, 26, 30, 40], [31,, 35, 39]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.superstruct = superstruct;
exports.isStruct = isStruct;
exports.StructError = exports.struct = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Define a struct error.
 *
 * @type {StructError}
 */
var StructError =
/*#__PURE__*/
function (_TypeError) {
  _inherits(StructError, _TypeError);

  _createClass(StructError, null, [{
    key: "format",
    value: function format(attrs) {
      var type = attrs.type,
          path = attrs.path,
          value = attrs.value;
      var message = "Expected a value of type `".concat(type, "`").concat(path.length ? " for `".concat(path.join('.'), "`") : '', " but received `").concat(JSON.stringify(value), "`.");
      return message;
    }
  }]);

  function StructError(attrs) {
    var _this;

    _classCallCheck(this, StructError);

    var message = StructError.format(attrs);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(StructError).call(this, message));
    var data = attrs.data,
        path = attrs.path,
        value = attrs.value,
        reason = attrs.reason,
        type = attrs.type,
        _attrs$errors = attrs.errors,
        errors = _attrs$errors === void 0 ? [] : _attrs$errors;
    _this.data = data;
    _this.path = path;
    _this.value = value;
    _this.reason = reason;
    _this.type = type;
    _this.errors = errors;

    if (!errors.length) {
      errors.push(_assertThisInitialized(_this));
    }

    if (Error.captureStackTrace) {
      Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    } else {
      _this.stack = new Error().stack;
    }

    return _this;
  }

  return StructError;
}(_wrapNativeSuper(TypeError));

exports.StructError = StructError;
var toString = Object.prototype.toString;

var kindOf = function kindOf(val) {
  if (val === void 0) return 'undefined';
  if (val === null) return 'null';

  var type = _typeof(val);

  if (type === 'boolean') return 'boolean';
  if (type === 'string') return 'string';
  if (type === 'number') return 'number';
  if (type === 'symbol') return 'symbol';

  if (type === 'function') {
    return isGeneratorFn(val) ? 'generatorfunction' : 'function';
  }

  if (isArray(val)) return 'array';
  if (isBuffer(val)) return 'buffer';
  if (isArguments(val)) return 'arguments';
  if (isDate(val)) return 'date';
  if (isError(val)) return 'error';
  if (isRegexp(val)) return 'regexp';

  switch (ctorName(val)) {
    case 'Symbol':
      return 'symbol';

    case 'Promise':
      return 'promise';
    // Set, Map, WeakSet, WeakMap

    case 'WeakMap':
      return 'weakmap';

    case 'WeakSet':
      return 'weakset';

    case 'Map':
      return 'map';

    case 'Set':
      return 'set';
    // 8-bit typed arrays

    case 'Int8Array':
      return 'int8array';

    case 'Uint8Array':
      return 'uint8array';

    case 'Uint8ClampedArray':
      return 'uint8clampedarray';
    // 16-bit typed arrays

    case 'Int16Array':
      return 'int16array';

    case 'Uint16Array':
      return 'uint16array';
    // 32-bit typed arrays

    case 'Int32Array':
      return 'int32array';

    case 'Uint32Array':
      return 'uint32array';

    case 'Float32Array':
      return 'float32array';

    case 'Float64Array':
      return 'float64array';
  }

  if (isGeneratorObj(val)) {
    return 'generator';
  } // Non-plain objects


  type = toString.call(val);

  switch (type) {
    case '[object Object]':
      return 'object';
    // iterators

    case '[object Map Iterator]':
      return 'mapiterator';

    case '[object Set Iterator]':
      return 'setiterator';

    case '[object String Iterator]':
      return 'stringiterator';

    case '[object Array Iterator]':
      return 'arrayiterator';
  } // other


  return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
};

function ctorName(val) {
  return val.constructor ? val.constructor.name : null;
}

function isArray(val) {
  if (Array.isArray) return Array.isArray(val);
  return val instanceof Array;
}

function isError(val) {
  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';
}

function isDate(val) {
  if (val instanceof Date) return true;
  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';
}

function isRegexp(val) {
  if (val instanceof RegExp) return true;
  return typeof val.flags === 'string' && typeof val.ignoreCase === 'boolean' && typeof val.multiline === 'boolean' && typeof val.global === 'boolean';
}

function isGeneratorFn(name, val) {
  return ctorName(name) === 'GeneratorFunction';
}

function isGeneratorObj(val) {
  return typeof val["throw"] === 'function' && typeof val["return"] === 'function' && typeof val.next === 'function';
}

function isArguments(val) {
  try {
    if (typeof val.length === 'number' && typeof val.callee === 'function') {
      return true;
    }
  } catch (err) {
    if (err.message.indexOf('callee') !== -1) {
      return true;
    }
  }

  return false;
}
/**
 * If you need to support Safari 5-7 (8-10 yr-old browser),
 * take a look at https://github.com/feross/is-buffer
 */


function isBuffer(val) {
  if (val.constructor && typeof val.constructor.isBuffer === 'function') {
    return val.constructor.isBuffer(val);
  }

  return false;
}
/**
 * A private string to identify structs by.
 *
 * @type {String}
 */


var IS_STRUCT = '@@__STRUCT__@@';
/**
 * A private string to refer to a struct's kind.
 *
 * @type {String}
 */

var KIND = '@@__KIND__@@';
/**
 * Check if a `value` is a struct.
 *
 * @param {Any} value
 * @return {Boolean}
 */

function isStruct(value) {
  return !!(value && value[IS_STRUCT]);
}
/**
 * Resolve `defaults`, for an optional `value`.
 *
 * @param {Function|Any} defaults
 * @param {Any} value
 * @return {Any}
 */


function resolveDefaults(defaults, value) {
  return typeof defaults === 'function' ? defaults(value) : defaults;
}

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};
/**
 * Kind.
 *
 * @type {Kind}
 */


var Kind = function Kind(name, type, validate) {
  _classCallCheck(this, Kind);

  this.name = name;
  this.type = type;
  this.validate = validate;
};
/**
 * Any.
 *
 * @param {Array|Function|Object|String} schema
 * @param {Any} defaults
 * @param {Object} options
 */


function any(schema, defaults$$1, options) {
  if (isStruct(schema)) {
    return schema[KIND];
  }

  if (schema instanceof Kind) {
    return schema;
  }

  switch (kindOf(schema)) {
    case 'array':
      {
        return schema.length > 1 ? tuple(schema, defaults$$1, options) : list(schema, defaults$$1, options);
      }

    case 'function':
      {
        return func(schema, defaults$$1, options);
      }

    case 'object':
      {
        return object(schema, defaults$$1, options);
      }

    case 'string':
      {
        var required = true;
        var type;

        if (schema.endsWith('?')) {
          required = false;
          schema = schema.slice(0, -1);
        }

        if (schema.includes('|')) {
          var scalars = schema.split(/\s*\|\s*/g);
          type = union(scalars, defaults$$1, options);
        } else if (schema.includes('&')) {
          var _scalars = schema.split(/\s*&\s*/g);

          type = intersection(_scalars, defaults$$1, options);
        } else {
          type = scalar(schema, defaults$$1, options);
        }

        if (!required) {
          type = optional(type, undefined, options);
        }

        return type;
      }
  }

  if (false) {} else {
    throw new Error("Invalid schema: ".concat(schema));
  }
}
/**
 * Dict.
 *
 * @param {Array} schema
 * @param {Object} defaults
 * @param {Object} options
 */


function dict(schema, defaults$$1, options) {
  if (kindOf(schema) !== 'array' || schema.length !== 2) {
    if (false) {} else {
      throw new Error("Invalid schema: ".concat(schema));
    }
  }

  var obj = scalar('object', undefined, options);
  var keys = any(schema[0], undefined, options);
  var values = any(schema[1], undefined, options);
  var name = 'dict';
  var type = "dict<".concat(keys.type, ",").concat(values.type, ">");

  var validate = function validate(value) {
    var resolved = resolveDefaults(defaults$$1);
    value = resolved ? _extends({}, resolved, value) : value;

    var _obj$validate = obj.validate(value),
        _obj$validate2 = _slicedToArray(_obj$validate, 1),
        error = _obj$validate2[0];

    if (error) {
      error.type = type;
      return [error];
    }

    var ret = {};
    var errors = [];

    var _loop = function _loop(_k) {
      var v = value[_k];

      var _keys$validate = keys.validate(_k),
          _keys$validate2 = _slicedToArray(_keys$validate, 2),
          e = _keys$validate2[0],
          r = _keys$validate2[1];

      if (e) {
        var allE = e.errors || [e];
        allE.forEach(function (singleE) {
          singleE.path = [_k].concat(singleE.path);
          singleE.data = value;
          errors.push(singleE);
        });
        k = _k;
        return "continue";
      }

      _k = r;

      var _values$validate = values.validate(v),
          _values$validate2 = _slicedToArray(_values$validate, 2),
          e2 = _values$validate2[0],
          r2 = _values$validate2[1];

      if (e2) {
        var allE2 = e2.errors || [e2];
        allE2.forEach(function (singleE) {
          singleE.path = [_k].concat(singleE.path);
          singleE.data = value;
          errors.push(singleE);
        });
        k = _k;
        return "continue";
      }

      ret[_k] = r2;
      k = _k;
    };

    for (var k in value) {
      var _ret = _loop(k);

      if (_ret === "continue") continue;
    }

    return errors.length ? [_extends({}, errors[0], {
      errors: errors
    })] : [undefined, ret];
  };

  return new Kind(name, type, validate);
}
/**
 * Enum.
 *
 * @param {Array} schema
 * @param {Any} defaults
 * @param {Object} options
 */


function en(schema, defaults$$1, options) {
  if (kindOf(schema) !== 'array') {
    if (false) {} else {
      throw new Error("Invalid schema: ".concat(schema));
    }
  }

  var name = 'enum';
  var type = schema.map(function (s) {
    try {
      return JSON.stringify(s);
    } catch (e) {
      return String(s);
    }
  }).join(' | ');

  var validate = function validate() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : resolveDefaults(defaults$$1);
    return schema.includes(value) ? [undefined, value] : [{
      data: value,
      path: [],
      value: value,
      type: type
    }];
  };

  return new Kind(name, type, validate);
}
/**
 * Enums.
 *
 * @param {Array} schema
 * @param {Any} defaults
 * @param {Object} options
 */


function enums(schema, defaults$$1, options) {
  var e = en(schema, undefined, options);
  var l = list([e], defaults$$1, options);
  return l;
}
/**
 * Function.
 *
 * @param {Function} schema
 * @param {Any} defaults
 * @param {Object} options
 */


function func(schema, defaults$$1, options) {
  if (kindOf(schema) !== 'function') {
    if (false) {} else {
      throw new Error("Invalid schema: ".concat(schema));
    }
  }

  var name = 'function';
  var type = '<function>';

  var validate = function validate() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : resolveDefaults(defaults$$1);
    var data = arguments.length > 1 ? arguments[1] : undefined;
    var result = schema(value, data);
    var failure = {
      path: [],
      reason: null
    };
    var isValid;

    switch (kindOf(result)) {
      case 'boolean':
        {
          isValid = result;
          break;
        }

      case 'string':
        {
          isValid = false;
          failure.reason = result;
          break;
        }

      case 'object':
        {
          isValid = false;
          failure = _extends({}, failure, result);
          break;
        }

      default:
        {
          if (false) {} else {
            throw new Error("Invalid result: ".concat(result));
          }
        }
    }

    return isValid ? [undefined, value] : [_extends({
      type: type,
      value: value,
      data: value
    }, failure)];
  };

  return new Kind(name, type, validate);
}
/**
 * Instance.
 *
 * @param {Array} schema
 * @param {Any} defaults
 * @param {Object} options
 */


function instance(schema, defaults$$1, options) {
  var name = 'instance';
  var type = "instance<".concat(schema.name, ">");

  var validate = function validate() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : resolveDefaults(defaults$$1);
    return value instanceof schema ? [undefined, value] : [{
      data: value,
      path: [],
      value: value,
      type: type
    }];
  };

  return new Kind(name, type, validate);
}
/**
 * Interface.
 *
 * @param {Object} schema
 * @param {Object} defaults
 * @param {Object} options
 */


function inter(schema, defaults$$1, options) {
  if (kindOf(schema) !== 'object') {
    if (false) {} else {
      throw new Error("Invalid schema: ".concat(schema));
    }
  }

  var obj = scalar('object', undefined, options);
  var ks = [];
  var properties = {};

  for (var key in schema) {
    ks.push(key);
    var s = schema[key];
    var kind = any(s, undefined, options);
    properties[key] = kind;
  }

  var name = 'interface';
  var type = "{".concat(ks.join(), "}");

  var validate = function validate() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : resolveDefaults(defaults$$1);

    var _obj$validate3 = obj.validate(value),
        _obj$validate4 = _slicedToArray(_obj$validate3, 1),
        error = _obj$validate4[0];

    if (error) {
      error.type = type;
      return [error];
    }

    var errors = [];
    var ret = value;

    var _loop2 = function _loop2(_key) {
      var v = value[_key];
      var kind = properties[_key];

      if (v === undefined) {
        var d = defaults$$1 && defaults$$1[_key];
        v = resolveDefaults(d, value);
      }

      var _kind$validate = kind.validate(v, value),
          _kind$validate2 = _slicedToArray(_kind$validate, 2),
          e = _kind$validate2[0],
          r = _kind$validate2[1];

      if (e) {
        var allE = e.errors || [e];
        allE.forEach(function (singleE) {
          singleE.path = [_key].concat(singleE.path);
          singleE.data = value;
          errors.push(singleE);
        });
        return "continue";
      }

      if (_key in value || r !== undefined) {
        ret[_key] = r;
      }
    };

    for (var _key in properties) {
      var _ret2 = _loop2(_key);

      if (_ret2 === "continue") continue;
    }

    return errors.length ? [_extends({}, errors[0], {
      errors: errors
    })] : [undefined, ret];
  };

  return new Kind(name, type, validate);
}
/**
 * Lazy.
 *
 * @param {Function} schema
 * @param {Any} defaults
 * @param {Object} options
 */


function lazy(schema, defaults$$1, options) {
  if (kindOf(schema) !== 'function') {
    if (false) {} else {
      throw new Error("Invalid schema: ".concat(schema));
    }
  }

  var kind;
  var struct;
  var name = 'lazy';
  var type = "lazy...";

  var compile = function compile(value) {
    struct = schema();
    kind.name = struct.kind;
    kind.type = struct.type;
    kind.validate = struct.validate;
    return kind.validate(value);
  };

  kind = new Kind(name, type, compile);
  return kind;
}
/**
 * Dynamic.
 *
 * @param {Function} createSchema
 * @param {Any} defaults
 * @param {Object} options
 */


function dynamic(createSchema, defaults$$1, options) {
  if (kindOf(createSchema) !== 'function') {
    if (false) {} else {
      throw new Error("Invalid schema: ".concat(createSchema));
    }
  }

  var name = 'dynamic';
  var type = 'dynamic...';

  var validate = function validate() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : resolveDefaults(defaults$$1);
    var data = arguments.length > 1 ? arguments[1] : undefined;
    var schema = createSchema(value, data);

    if (kindOf(schema) !== 'function') {
      if (false) {} else {
        throw new Error("Invalid schema: ".concat(schema));
      }
    }

    var _schema$validate = schema.validate(value),
        _schema$validate2 = _slicedToArray(_schema$validate, 2),
        error = _schema$validate2[0],
        result = _schema$validate2[1];

    if (error) {
      return [error];
    }

    return [undefined, result];
  };

  return new Kind(name, type, validate);
}
/**
 * List.
 *
 * @param {Array} schema
 * @param {Array} defaults
 * @param {Object} options
 */


function list(schema, defaults$$1, options) {
  if (kindOf(schema) !== 'array' || schema.length !== 1) {
    if (false) {} else {
      throw new Error("Invalid schema: ".concat(schema));
    }
  }

  var array = scalar('array', undefined, options);
  var element = any(schema[0], undefined, options);
  var name = 'list';
  var type = "[".concat(element.type, "]");

  var validate = function validate() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : resolveDefaults(defaults$$1);

    var _array$validate = array.validate(value),
        _array$validate2 = _slicedToArray(_array$validate, 2),
        error = _array$validate2[0],
        result = _array$validate2[1];

    if (error) {
      error.type = type;
      return [error];
    }

    value = result;
    var errors = [];
    var ret = [];

    var _loop3 = function _loop3(i) {
      var v = value[i];

      var _element$validate = element.validate(v),
          _element$validate2 = _slicedToArray(_element$validate, 2),
          e = _element$validate2[0],
          r = _element$validate2[1];

      if (e) {
        var allE = e.errors || [e];
        allE.forEach(function (singleE) {
          singleE.path = [i].concat(singleE.path);
          singleE.data = value;
          errors.push(singleE);
        });
        return "continue";
      }

      ret[i] = r;
    };

    for (var i = 0; i < value.length; i++) {
      var _ret3 = _loop3(i);

      if (_ret3 === "continue") continue;
    }

    return errors.length ? [_extends({}, errors[0], {
      errors: errors
    })] : [undefined, ret];
  };

  return new Kind(name, type, validate);
}
/**
 * Literal.
 *
 * @param {Array} schema
 * @param {Any} defaults
 * @param {Object} options
 */


function literal(schema, defaults$$1, options) {
  var name = 'literal';
  var type = "literal: ".concat(JSON.stringify(schema));

  var validate = function validate() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : resolveDefaults(defaults$$1);
    return value === schema ? [undefined, value] : [{
      data: value,
      path: [],
      value: value,
      type: type
    }];
  };

  return new Kind(name, type, validate);
}
/**
 * Object.
 *
 * @param {Object} schema
 * @param {Object} defaults
 * @param {Object} options
 */


function object(schema, defaults$$1, options) {
  if (kindOf(schema) !== 'object') {
    if (false) {} else {
      throw new Error("Invalid schema: ".concat(schema));
    }
  }

  var obj = scalar('object', undefined, options);
  var ks = [];
  var properties = {};

  for (var key in schema) {
    ks.push(key);
    var s = schema[key];
    var kind = any(s, undefined, options);
    properties[key] = kind;
  }

  var name = 'object';
  var type = "{".concat(ks.join(), "}");

  var validate = function validate() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : resolveDefaults(defaults$$1);

    var _obj$validate5 = obj.validate(value),
        _obj$validate6 = _slicedToArray(_obj$validate5, 1),
        error = _obj$validate6[0];

    if (error) {
      error.type = type;
      return [error];
    }

    var errors = [];
    var ret = {};
    var valueKeys = Object.keys(value);
    var propertiesKeys = Object.keys(properties);
    var keys = new Set(valueKeys.concat(propertiesKeys));
    keys.forEach(function (key) {
      var v = value[key];
      var kind = properties[key];

      if (v === undefined) {
        var d = defaults$$1 && defaults$$1[key];
        v = resolveDefaults(d, value);
      }

      if (!kind) {
        var _e2 = {
          data: value,
          path: [key],
          value: v
        };
        errors.push(_e2);
        return;
      }

      var _kind$validate3 = kind.validate(v, value),
          _kind$validate4 = _slicedToArray(_kind$validate3, 2),
          e = _kind$validate4[0],
          r = _kind$validate4[1];

      if (e) {
        var allE = e.errors || [e];
        allE.forEach(function (singleE) {
          singleE.path = [key].concat(singleE.path);
          singleE.data = value;
          errors.push(singleE);
        });
        return;
      }

      if (key in value || r !== undefined) {
        ret[key] = r;
      }
    });
    return errors.length ? [_extends({}, errors[0], {
      errors: errors
    })] : [undefined, ret];
  };

  return new Kind(name, type, validate);
}
/**
 * Optional.
 *
 * @param {Any} schema
 * @param {Any} defaults
 * @param {Object} options
 */


function optional(schema, defaults$$1, options) {
  return union([schema, 'undefined'], defaults$$1, options);
}
/**
 * Partial.
 *
 * @param {Object} schema
 * @param {Object} defaults
 * @param {Object} options
 */


function partial(schema, defaults$$1, options) {
  if (kindOf(schema) !== 'object') {
    if (false) {} else {
      throw new Error("Invalid schema: ".concat(schema));
    }
  }

  var obj = scalar('object', undefined, options);
  var ks = [];
  var properties = {};

  for (var key in schema) {
    ks.push(key);
    var s = schema[key];
    var kind = any(s, undefined, options);
    properties[key] = kind;
  }

  var name = 'partial';
  var type = "{".concat(ks.join(), ",...}");

  var validate = function validate() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : resolveDefaults(defaults$$1);

    var _obj$validate7 = obj.validate(value),
        _obj$validate8 = _slicedToArray(_obj$validate7, 1),
        error = _obj$validate8[0];

    if (error) {
      error.type = type;
      return [error];
    }

    var errors = [];
    var ret = {};

    var _loop4 = function _loop4(_key2) {
      var v = value[_key2];
      var kind = properties[_key2];

      if (v === undefined) {
        var d = defaults$$1 && defaults$$1[_key2];
        v = resolveDefaults(d, value);
      }

      var _kind$validate5 = kind.validate(v, value),
          _kind$validate6 = _slicedToArray(_kind$validate5, 2),
          e = _kind$validate6[0],
          r = _kind$validate6[1];

      if (e) {
        var allE = e.errors || [e];
        allE.forEach(function (singleE) {
          singleE.path = [_key2].concat(singleE.path);
          singleE.data = value;
          errors.push(singleE);
        });
        return "continue";
      }

      if (_key2 in value || r !== undefined) {
        ret[_key2] = r;
      }
    };

    for (var _key2 in properties) {
      var _ret4 = _loop4(_key2);

      if (_ret4 === "continue") continue;
    }

    return errors.length ? [_extends({}, errors[0], {
      errors: errors
    })] : [undefined, ret];
  };

  return new Kind(name, type, validate);
}
/**
 * Scalar.
 *
 * @param {String} schema
 * @param {Any} defaults
 * @param {Object} options
 */


function scalar(schema, defaults$$1, options) {
  if (kindOf(schema) !== 'string') {
    if (false) {} else {
      throw new Error("Invalid schema: ".concat(schema));
    }
  }

  var types = options.types;
  var fn = types[schema];

  if (kindOf(fn) !== 'function') {
    if (false) {} else {
      throw new Error("Invalid type: ".concat(schema));
    }
  }

  var kind = func(fn, defaults$$1, options);
  var name = 'scalar';
  var type = schema;

  var validate = function validate(value) {
    var _kind$validate7 = kind.validate(value),
        _kind$validate8 = _slicedToArray(_kind$validate7, 2),
        error = _kind$validate8[0],
        result = _kind$validate8[1];

    if (error) {
      error.type = type;
      return [error];
    }

    return [undefined, result];
  };

  return new Kind(name, type, validate);
}
/**
 * Tuple.
 *
 * @param {Array} schema
 * @param {Array} defaults
 * @param {Object} options
 */


function tuple(schema, defaults$$1, options) {
  if (kindOf(schema) !== 'array') {
    if (false) {} else {
      throw new Error("Invalid schema: ".concat(schema));
    }
  }

  var kinds = schema.map(function (s) {
    return any(s, undefined, options);
  });
  var array = scalar('array', undefined, options);
  var name = 'tuple';
  var type = "[".concat(kinds.map(function (k) {
    return k.type;
  }).join(), "]");

  var validate = function validate() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : resolveDefaults(defaults$$1);

    var _array$validate3 = array.validate(value),
        _array$validate4 = _slicedToArray(_array$validate3, 1),
        error = _array$validate4[0];

    if (error) {
      error.type = type;
      return [error];
    }

    var ret = [];
    var errors = [];
    var length = Math.max(value.length, kinds.length);

    var _loop5 = function _loop5(i) {
      var kind = kinds[i];
      var v = value[i];

      if (!kind) {
        var _e3 = {
          data: value,
          path: [i],
          value: v
        };
        errors.push(_e3);
        return "continue";
      }

      var _kind$validate9 = kind.validate(v),
          _kind$validate10 = _slicedToArray(_kind$validate9, 2),
          e = _kind$validate10[0],
          r = _kind$validate10[1];

      if (e) {
        var allE = e.errors || [e];
        allE.forEach(function (singleE) {
          singleE.path = [i].concat(singleE.path);
          singleE.data = value;
          errors.push(singleE);
        });
        return "continue";
      }

      ret[i] = r;
    };

    for (var i = 0; i < length; i++) {
      var _ret5 = _loop5(i);

      if (_ret5 === "continue") continue;
    }

    return errors.length ? [_extends({}, errors[0], {
      errors: errors
    })] : [undefined, ret];
  };

  return new Kind(name, type, validate);
}
/**
 * Union.
 *
 * @param {Array} schema
 * @param {Any} defaults
 * @param {Object} options
 */


function union(schema, defaults$$1, options) {
  if (kindOf(schema) !== 'array') {
    if (false) {} else {
      throw new Error("Invalid schema: ".concat(schema));
    }
  }

  var kinds = schema.map(function (s) {
    return any(s, undefined, options);
  });
  var name = 'union';
  var type = kinds.map(function (k) {
    return k.type;
  }).join(' | ');

  var validate = function validate() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : resolveDefaults(defaults$$1);
    var errors = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = kinds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _k2 = _step.value;

        var _k2$validate = _k2.validate(value),
            _k2$validate2 = _slicedToArray(_k2$validate, 2),
            e = _k2$validate2[0],
            r = _k2$validate2[1];

        if (!e) {
          return [undefined, r];
        }

        errors.push(e);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    errors[0].type = type;
    return errors;
  };

  return new Kind(name, type, validate);
}
/**
 * Intersection.
 *
 * @param {Array} schema
 * @param {Any} defaults
 * @param {Object} options
 */


function intersection(schema, defaults$$1, options) {
  if (kindOf(schema) !== 'array') {
    if (false) {} else {
      throw new Error("Invalid schema: ".concat(schema));
    }
  }

  var types = schema.map(function (s) {
    return any(s, undefined, options);
  });
  var name = 'intersection';
  var type = types.map(function (t) {
    return t.type;
  }).join(' & ');

  var validate = function validate() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : resolveDefaults(defaults$$1);
    var v = value;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = types[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var t = _step2.value;

        var _t$validate = t.validate(v),
            _t$validate2 = _slicedToArray(_t$validate, 2),
            e = _t$validate2[0],
            r = _t$validate2[1];

        if (e) {
          e.type = type;
          return [e];
        }

        v = r;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return [undefined, v];
  };

  return new Kind(name, type, validate);
}
/**
 * Kinds.
 *
 * @type {Object}
 */


var Kinds = {
  any: any,
  dict: dict,
  "enum": en,
  enums: enums,
  "function": func,
  instance: instance,
  "interface": inter,
  lazy: lazy,
  list: list,
  literal: literal,
  object: object,
  optional: optional,
  partial: partial,
  scalar: scalar,
  tuple: tuple,
  union: union,
  intersection: intersection,
  dynamic: dynamic
  /**
   * Export.
   *
   * @type {Object}
   */

};
/**
 * The types that `kind-of` supports.
 *
 * @type {Array}
 */

var TYPES = ['arguments', 'array', 'boolean', 'buffer', 'error', 'float32array', 'float64array', 'function', 'generatorfunction', 'int16array', 'int32array', 'int8array', 'map', 'null', 'number', 'object', 'promise', 'regexp', 'set', 'string', 'symbol', 'uint16array', 'uint32array', 'uint8array', 'uint8clampedarray', 'undefined', 'weakmap', 'weakset'];
/**
 * The default types that Superstruct ships with.
 *
 * @type {Object}
 */

var Types = {
  any: function any(value) {
    return value !== undefined;
  }
};
TYPES.forEach(function (type) {
  Types[type] = function (value) {
    return kindOf(value) === type;
  };
});
/**
 * Handle the 'date' case specially, to throw out invalid `Date` objects.
 *
 * @param {Mixed} value
 * @return {Boolean}
 */

Types.date = function (value) {
  return kindOf(value) === 'date' && !isNaN(value);
};
/**
 * Create a struct factory with a `config`.
 *
 * @param {Object} config
 * @return {Function}
 */


function superstruct() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var types = _extends({}, Types, config.types || {});
  /**
   * Create a `kind` struct with `schema`, `defaults` and `options`.
   *
   * @param {Any} schema
   * @param {Any} defaults
   * @param {Object} options
   * @return {Function}
   */


  function struct(schema, defaults$$1) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (isStruct(schema)) {
      schema = schema.schema;
    }

    var kind = Kinds.any(schema, defaults$$1, _extends({}, options, {
      types: types
    }));

    function Struct(data) {
      if (this instanceof Struct) {
        if (false) {} else {
          throw new Error('Invalid `new` keyword!');
        }
      }

      return Struct.assert(data);
    }

    Object.defineProperty(Struct, IS_STRUCT, {
      value: true
    });
    Object.defineProperty(Struct, KIND, {
      value: kind
    });
    Struct.kind = kind.name;
    Struct.type = kind.type;
    Struct.schema = schema;
    Struct.defaults = defaults$$1;
    Struct.options = options;

    Struct.assert = function (value) {
      var _kind$validate11 = kind.validate(value),
          _kind$validate12 = _slicedToArray(_kind$validate11, 2),
          error = _kind$validate12[0],
          result = _kind$validate12[1];

      if (error) {
        throw new StructError(error);
      }

      return result;
    };

    Struct.test = function (value) {
      var _kind$validate13 = kind.validate(value),
          _kind$validate14 = _slicedToArray(_kind$validate13, 1),
          error = _kind$validate14[0];

      return !error;
    };

    Struct.validate = function (value) {
      var _kind$validate15 = kind.validate(value),
          _kind$validate16 = _slicedToArray(_kind$validate15, 2),
          error = _kind$validate16[0],
          result = _kind$validate16[1];

      if (error) {
        return [new StructError(error)];
      }

      return [undefined, result];
    };

    return Struct;
  }
  /**
   * Mix in a factory for each specific kind of struct.
   */


  Object.keys(Kinds).forEach(function (name) {
    var kind = Kinds[name];

    struct[name] = function (schema, defaults$$1, options) {
      var type = kind(schema, defaults$$1, _extends({}, options, {
        types: types
      }));
      var s = struct(type, defaults$$1, options);
      return s;
    };
  });
  /**
   * Return the struct factory.
   */

  return struct;
}
/**
 * Create a convenience `struct` factory for the default types.
 *
 * @type {Function}
 */


var struct = superstruct();
exports.struct = struct;

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var dirBuilder = __webpack_require__(263);

var fileBuilder = __webpack_require__(264);

var createChunker = __webpack_require__(269);

var validateChunks = __webpack_require__(284);

function dagBuilder(_x, _x2, _x3) {
  return _dagBuilder.apply(this, arguments);
}

function _dagBuilder() {
  _dagBuilder = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(source, ipld, options) {
    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, _value;

    return _regenerator["default"].wrap(function _callee2$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context3.prev = 2;
            _loop =
            /*#__PURE__*/
            _regenerator["default"].mark(function _loop() {
              var entry, _source, chunker;

              return _regenerator["default"].wrap(function _loop$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      entry = _value;

                      if (entry.path) {
                        if (entry.path.substring(0, 2) === './') {
                          options.wrapWithDirectory = true;
                        }

                        entry.path = entry.path.split('/').filter(function (path) {
                          return path && path !== '.';
                        }).join('/');
                      }

                      if (!entry.content) {
                        _context2.next = 10;
                        break;
                      }

                      _source = entry.content; // wrap in iterator if it is array-like or not an iterator

                      if (!_source[Symbol.asyncIterator] && !_source[Symbol.iterator] || _source.length !== undefined) {
                        _source = _defineProperty({}, Symbol.iterator,
                        /*#__PURE__*/
                        _regenerator["default"].mark(function _callee() {
                          return _regenerator["default"].wrap(function _callee$(_context) {
                            while (1) {
                              switch (_context.prev = _context.next) {
                                case 0:
                                  _context.next = 2;
                                  return entry.content;

                                case 2:
                                case "end":
                                  return _context.stop();
                              }
                            }
                          }, _callee);
                        }));
                      }

                      chunker = createChunker(options.chunker, validateChunks(_source), options.chunkerOptions); // item is a file

                      _context2.next = 8;
                      return fileBuilder(entry, chunker, ipld, options);

                    case 8:
                      _context2.next = 12;
                      break;

                    case 10:
                      _context2.next = 12;
                      return dirBuilder(entry, ipld, options);

                    case 12:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _loop);
            });
            _iterator = _asyncIterator(source);

          case 5:
            _context3.next = 7;
            return _awaitAsyncGenerator(_iterator.next());

          case 7:
            _step = _context3.sent;
            _iteratorNormalCompletion = _step.done;
            _context3.next = 11;
            return _awaitAsyncGenerator(_step.value);

          case 11:
            _value = _context3.sent;

            if (_iteratorNormalCompletion) {
              _context3.next = 17;
              break;
            }

            return _context3.delegateYield(_loop(), "t0", 14);

          case 14:
            _iteratorNormalCompletion = true;
            _context3.next = 5;
            break;

          case 17:
            _context3.next = 23;
            break;

          case 19:
            _context3.prev = 19;
            _context3.t1 = _context3["catch"](2);
            _didIteratorError = true;
            _iteratorError = _context3.t1;

          case 23:
            _context3.prev = 23;
            _context3.prev = 24;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context3.next = 28;
              break;
            }

            _context3.next = 28;
            return _awaitAsyncGenerator(_iterator["return"]());

          case 28:
            _context3.prev = 28;

            if (!_didIteratorError) {
              _context3.next = 31;
              break;
            }

            throw _iteratorError;

          case 31:
            return _context3.finish(28);

          case 32:
            return _context3.finish(23);

          case 33:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee2, null, [[2, 19, 23, 33], [24,, 28, 32]]);
  }));
  return _dagBuilder.apply(this, arguments);
}

module.exports = dagBuilder;

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var UnixFS = __webpack_require__(6);

var persist = __webpack_require__(35);

var _require = __webpack_require__(13),
    DAGNode = _require.DAGNode;

var dirBuilder =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(item, ipld, options) {
    var unixfs, node, cid, path;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            unixfs = new UnixFS('directory');
            node = DAGNode.create(unixfs.marshal(), []);
            _context.next = 4;
            return persist(node, ipld, options);

          case 4:
            cid = _context.sent;
            path = item.path;
            return _context.abrupt("return", {
              cid: cid,
              path: path,
              unixfs: unixfs,
              node: node
            });

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function dirBuilder(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = dirBuilder;

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var errCode = __webpack_require__(2);

var UnixFS = __webpack_require__(6);

var persist = __webpack_require__(35);

var _require = __webpack_require__(13),
    DAGNode = _require.DAGNode,
    DAGLink = _require.DAGLink;

var all = __webpack_require__(265);

var dagBuilders = {
  flat: __webpack_require__(266),
  balanced: __webpack_require__(267),
  trickle: __webpack_require__(268)
};

function buildFile(_x, _x2, _x3) {
  return _buildFile.apply(this, arguments);
}

function _buildFile() {
  _buildFile = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(source, ipld, options) {
    var count, previous, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, buffer, node, unixfs, opts, cid, entry;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            count = -1;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 3;
            _iterator = _asyncIterator(source);

          case 5:
            _context.next = 7;
            return _awaitAsyncGenerator(_iterator.next());

          case 7:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 11;
            return _awaitAsyncGenerator(_step.value);

          case 11:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 38;
              break;
            }

            buffer = _value;
            count++;
            options.progress(buffer.length);
            node = void 0;
            unixfs = void 0;
            opts = _objectSpread({}, options);

            if (options.rawLeaves) {
              node = buffer;
              opts.codec = 'raw';
              opts.cidVersion = 1;
            } else {
              unixfs = new UnixFS(options.leafType, buffer);
              node = DAGNode.create(unixfs.marshal(), []);
            }

            _context.next = 22;
            return _awaitAsyncGenerator(persist(node, ipld, opts));

          case 22:
            cid = _context.sent;
            entry = {
              cid: cid,
              unixfs: unixfs,
              node: node
            };

            if (!(count === 0)) {
              _context.next = 29;
              break;
            }

            previous = entry;
            return _context.abrupt("continue", 35);

          case 29:
            if (!(count === 1)) {
              _context.next = 33;
              break;
            }

            _context.next = 32;
            return previous;

          case 32:
            previous = null;

          case 33:
            _context.next = 35;
            return entry;

          case 35:
            _iteratorNormalCompletion = true;
            _context.next = 5;
            break;

          case 38:
            _context.next = 44;
            break;

          case 40:
            _context.prev = 40;
            _context.t0 = _context["catch"](3);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 44:
            _context.prev = 44;
            _context.prev = 45;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 49;
              break;
            }

            _context.next = 49;
            return _awaitAsyncGenerator(_iterator["return"]());

          case 49:
            _context.prev = 49;

            if (!_didIteratorError) {
              _context.next = 52;
              break;
            }

            throw _iteratorError;

          case 52:
            return _context.finish(49);

          case 53:
            return _context.finish(44);

          case 54:
            if (!previous) {
              _context.next = 58;
              break;
            }

            previous.single = true;
            _context.next = 58;
            return previous;

          case 58:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 40, 44, 54], [45,, 49, 53]]);
  }));
  return _buildFile.apply(this, arguments);
}

var reduce = function reduce(file, ipld, options) {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(leaves) {
        var leaf, f, links, node, cid;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf)) {
                  _context2.next = 3;
                  break;
                }

                leaf = leaves[0];
                return _context2.abrupt("return", {
                  cid: leaf.cid,
                  path: file.path,
                  name: (file.path || '').split('/').pop(),
                  unixfs: leaf.unixfs,
                  node: leaf.node
                });

              case 3:
                // create a parent node and add all the leaves
                f = new UnixFS('file');
                links = leaves.filter(function (leaf) {
                  if (leaf.cid.codec === 'raw' && leaf.node.length) {
                    return true;
                  }

                  if (!leaf.unixfs.data && leaf.unixfs.fileSize()) {
                    return true;
                  }

                  return Boolean(leaf.unixfs.data.length);
                }).map(function (leaf) {
                  if (leaf.cid.codec === 'raw') {
                    // node is a leaf buffer
                    f.addBlockSize(leaf.node.length);
                    return new DAGLink(leaf.name, leaf.node.length, leaf.cid);
                  }

                  if (!leaf.unixfs.data) {
                    // node is an intermediate node
                    f.addBlockSize(leaf.unixfs.fileSize());
                  } else {
                    // node is a unixfs 'file' leaf node
                    f.addBlockSize(leaf.unixfs.data.length);
                  }

                  return new DAGLink(leaf.name, leaf.node.size, leaf.cid);
                });
                node = DAGNode.create(f.marshal(), links);
                _context2.next = 8;
                return persist(node, ipld, options);

              case 8:
                cid = _context2.sent;
                return _context2.abrupt("return", {
                  cid: cid,
                  path: file.path,
                  unixfs: f,
                  node: node,
                  size: node.size
                });

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x4) {
        return _ref.apply(this, arguments);
      };
    }()
  );
};

var fileBuilder =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(file, source, ipld, options) {
    var dagBuilder, roots;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            dagBuilder = dagBuilders[options.strategy];

            if (dagBuilder) {
              _context3.next = 3;
              break;
            }

            throw errCode(new Error("Unknown importer build strategy name: ".concat(options.strategy)), 'ERR_BAD_STRATEGY');

          case 3:
            _context3.next = 5;
            return all(dagBuilder(buildFile(source, ipld, options), reduce(file, ipld, options), options.builderOptions));

          case 5:
            roots = _context3.sent;

            if (!(roots.length > 1)) {
              _context3.next = 8;
              break;
            }

            throw errCode(new Error('expected a maximum of 1 roots and got ' + roots.length), 'ETOOMANYROOTS');

          case 8:
            return _context3.abrupt("return", roots[0]);

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function fileBuilder(_x5, _x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}();

module.exports = fileBuilder;

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var toArray =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(iterator) {
    var arr, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            arr = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 3;
            _iterator = _asyncIterator(iterator);

          case 5:
            _context.next = 7;
            return _iterator.next();

          case 7:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 11;
            return _step.value;

          case 11:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 18;
              break;
            }

            entry = _value;
            arr.push(entry);

          case 15:
            _iteratorNormalCompletion = true;
            _context.next = 5;
            break;

          case 18:
            _context.next = 24;
            break;

          case 20:
            _context.prev = 20;
            _context.t0 = _context["catch"](3);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 24:
            _context.prev = 24;
            _context.prev = 25;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 29;
              break;
            }

            _context.next = 29;
            return _iterator["return"]();

          case 29:
            _context.prev = 29;

            if (!_didIteratorError) {
              _context.next = 32;
              break;
            }

            throw _iteratorError;

          case 32:
            return _context.finish(29);

          case 33:
            return _context.finish(24);

          case 34:
            return _context.abrupt("return", arr);

          case 35:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 20, 24, 34], [25,, 29, 33]]);
  }));

  return function toArray(_x) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = toArray;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var batch = __webpack_require__(60);

module.exports =
/*#__PURE__*/
function () {
  var _ref = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(source, reduce) {
    var roots, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            roots = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 3;
            _iterator = _asyncIterator(batch(source, Infinity));

          case 5:
            _context.next = 7;
            return _awaitAsyncGenerator(_iterator.next());

          case 7:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 11;
            return _awaitAsyncGenerator(_step.value);

          case 11:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 22;
              break;
            }

            chunk = _value;
            _context.t0 = roots;
            _context.next = 17;
            return _awaitAsyncGenerator(reduce(chunk));

          case 17:
            _context.t1 = _context.sent;

            _context.t0.push.call(_context.t0, _context.t1);

          case 19:
            _iteratorNormalCompletion = true;
            _context.next = 5;
            break;

          case 22:
            _context.next = 28;
            break;

          case 24:
            _context.prev = 24;
            _context.t2 = _context["catch"](3);
            _didIteratorError = true;
            _iteratorError = _context.t2;

          case 28:
            _context.prev = 28;
            _context.prev = 29;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 33;
              break;
            }

            _context.next = 33;
            return _awaitAsyncGenerator(_iterator["return"]());

          case 33:
            _context.prev = 33;

            if (!_didIteratorError) {
              _context.next = 36;
              break;
            }

            throw _iteratorError;

          case 36:
            return _context.finish(33);

          case 37:
            return _context.finish(28);

          case 38:
            _context.next = 40;
            return roots[0];

          case 40:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 24, 28, 38], [29,, 33, 37]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

var batch = __webpack_require__(60);

function balanced(_x, _x2, _x3) {
  return _balanced.apply(this, arguments);
}

function _balanced() {
  _balanced = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(source, reduce, options) {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return reduceToParents(source, reduce, options);

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _balanced.apply(this, arguments);
}

function reduceToParents(_x4, _x5, _x6) {
  return _reduceToParents.apply(this, arguments);
}

function _reduceToParents() {
  _reduceToParents = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(source, reduce, options) {
    var roots, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunked;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            roots = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context2.prev = 3;
            _iterator = _asyncIterator(batch(source, options.maxChildrenPerNode));

          case 5:
            _context2.next = 7;
            return _iterator.next();

          case 7:
            _step = _context2.sent;
            _iteratorNormalCompletion = _step.done;
            _context2.next = 11;
            return _step.value;

          case 11:
            _value = _context2.sent;

            if (_iteratorNormalCompletion) {
              _context2.next = 22;
              break;
            }

            chunked = _value;
            _context2.t0 = roots;
            _context2.next = 17;
            return reduce(chunked);

          case 17:
            _context2.t1 = _context2.sent;

            _context2.t0.push.call(_context2.t0, _context2.t1);

          case 19:
            _iteratorNormalCompletion = true;
            _context2.next = 5;
            break;

          case 22:
            _context2.next = 28;
            break;

          case 24:
            _context2.prev = 24;
            _context2.t2 = _context2["catch"](3);
            _didIteratorError = true;
            _iteratorError = _context2.t2;

          case 28:
            _context2.prev = 28;
            _context2.prev = 29;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context2.next = 33;
              break;
            }

            _context2.next = 33;
            return _iterator["return"]();

          case 33:
            _context2.prev = 33;

            if (!_didIteratorError) {
              _context2.next = 36;
              break;
            }

            throw _iteratorError;

          case 36:
            return _context2.finish(33);

          case 37:
            return _context2.finish(28);

          case 38:
            if (!(roots.length > 1)) {
              _context2.next = 40;
              break;
            }

            return _context2.abrupt("return", reduceToParents(roots, reduce, options));

          case 40:
            return _context2.abrupt("return", roots[0]);

          case 41:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[3, 24, 28, 38], [29,, 33, 37]]);
  }));
  return _reduceToParents.apply(this, arguments);
}

module.exports = balanced;

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var batch = __webpack_require__(60);

module.exports =
/*#__PURE__*/
_regenerator["default"].mark(function trickleReduceToRoot(source, reduce, options) {
  return _regenerator["default"].wrap(function trickleReduceToRoot$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return trickleStream(source, reduce, options);

        case 2:
        case "end":
          return _context.stop();
      }
    }
  }, trickleReduceToRoot);
});

function trickleStream(_x, _x2, _x3) {
  return _trickleStream.apply(this, arguments);
}

function _trickleStream() {
  _trickleStream = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(source, reduce, options) {
    var root, iteration, maxDepth, subTree, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, layer;

    return _regenerator["default"].wrap(function _callee2$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            iteration = 0;
            maxDepth = 1;
            subTree = root = new Root(options.layerRepeat);
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context3.prev = 5;
            _iterator = _asyncIterator(batch(source, options.maxChildrenPerNode));

          case 7:
            _context3.next = 9;
            return _iterator.next();

          case 9:
            _step = _context3.sent;
            _iteratorNormalCompletion = _step.done;
            _context3.next = 13;
            return _step.value;

          case 13:
            _value = _context3.sent;

            if (_iteratorNormalCompletion) {
              _context3.next = 30;
              break;
            }

            layer = _value;

            if (!subTree.isFull()) {
              _context3.next = 26;
              break;
            }

            if (!(subTree !== root)) {
              _context3.next = 23;
              break;
            }

            _context3.t0 = root;
            _context3.next = 21;
            return subTree.reduce(reduce);

          case 21:
            _context3.t1 = _context3.sent;

            _context3.t0.addChild.call(_context3.t0, _context3.t1);

          case 23:
            if (iteration && iteration % options.layerRepeat === 0) {
              maxDepth++;
            }

            subTree = new SubTree(maxDepth, options.layerRepeat, iteration);
            iteration++;

          case 26:
            subTree.append(layer);

          case 27:
            _iteratorNormalCompletion = true;
            _context3.next = 7;
            break;

          case 30:
            _context3.next = 36;
            break;

          case 32:
            _context3.prev = 32;
            _context3.t2 = _context3["catch"](5);
            _didIteratorError = true;
            _iteratorError = _context3.t2;

          case 36:
            _context3.prev = 36;
            _context3.prev = 37;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context3.next = 41;
              break;
            }

            _context3.next = 41;
            return _iterator["return"]();

          case 41:
            _context3.prev = 41;

            if (!_didIteratorError) {
              _context3.next = 44;
              break;
            }

            throw _iteratorError;

          case 44:
            return _context3.finish(41);

          case 45:
            return _context3.finish(36);

          case 46:
            if (!(subTree && subTree !== root)) {
              _context3.next = 52;
              break;
            }

            _context3.t3 = root;
            _context3.next = 50;
            return subTree.reduce(reduce);

          case 50:
            _context3.t4 = _context3.sent;

            _context3.t3.addChild.call(_context3.t3, _context3.t4);

          case 52:
            return _context3.abrupt("return", root.reduce(reduce));

          case 53:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee2, null, [[5, 32, 36, 46], [37,, 41, 45]]);
  }));
  return _trickleStream.apply(this, arguments);
}

var SubTree =
/*#__PURE__*/
function () {
  function SubTree(maxDepth, layerRepeat, iteration) {
    _classCallCheck(this, SubTree);

    this.maxDepth = maxDepth;
    this.layerRepeat = layerRepeat;
    this.currentDepth = 1;
    this.iteration = iteration;
    this.root = this.node = this.parent = {
      children: [],
      depth: this.currentDepth,
      maxDepth: maxDepth,
      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat
    };
  }

  _createClass(SubTree, [{
    key: "isFull",
    value: function isFull() {
      if (!this.root.data) {
        return false;
      }

      if (this.currentDepth < this.maxDepth && this.node.maxChildren) {
        // can descend
        this._addNextNodeToParent(this.node);

        return false;
      } // try to find new node from node.parent


      var distantRelative = this._findParent(this.node, this.currentDepth);

      if (distantRelative) {
        this._addNextNodeToParent(distantRelative);

        return false;
      }

      return true;
    }
  }, {
    key: "_addNextNodeToParent",
    value: function _addNextNodeToParent(parent) {
      this.parent = parent; // find site for new node

      var nextNode = {
        children: [],
        depth: parent.depth + 1,
        parent: parent,
        maxDepth: this.maxDepth,
        maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat
      };
      parent.children.push(nextNode);
      this.currentDepth = nextNode.depth;
      this.node = nextNode;
    }
  }, {
    key: "append",
    value: function append(layer) {
      this.node.data = layer;
    }
  }, {
    key: "reduce",
    value: function reduce(_reduce) {
      return this._reduce(this.root, _reduce);
    }
  }, {
    key: "_reduce",
    value: function () {
      var _reduce2 = _asyncToGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(node, reduce) {
        var _this = this;

        var children;
        return _regenerator["default"].wrap(function _callee$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                children = [];

                if (!node.children.length) {
                  _context2.next = 5;
                  break;
                }

                _context2.next = 4;
                return Promise.all(node.children.filter(function (child) {
                  return child.data;
                }).map(function (child) {
                  return _this._reduce(child, reduce);
                }));

              case 4:
                children = _context2.sent;

              case 5:
                return _context2.abrupt("return", reduce(node.data.concat(children)));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee);
      }));

      function _reduce(_x4, _x5) {
        return _reduce2.apply(this, arguments);
      }

      return _reduce;
    }()
  }, {
    key: "_findParent",
    value: function _findParent(node, depth) {
      var parent = node.parent;

      if (!parent || parent.depth === 0) {
        return;
      }

      if (parent.children.length === parent.maxChildren || !parent.maxChildren) {
        // this layer is full, may be able to traverse to a different branch
        return this._findParent(parent, depth);
      }

      return parent;
    }
  }]);

  return SubTree;
}();

var Root =
/*#__PURE__*/
function (_SubTree) {
  _inherits(Root, _SubTree);

  function Root(layerRepeat) {
    var _this2;

    _classCallCheck(this, Root);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Root).call(this, 0, layerRepeat));
    _this2.root.depth = 0;
    _this2.currentDepth = 1;
    return _this2;
  }

  _createClass(Root, [{
    key: "addChild",
    value: function addChild(child) {
      this.root.children.push(child);
    }
  }, {
    key: "reduce",
    value: function reduce(_reduce3) {
      return _reduce3(this.root.data.concat(this.root.children));
    }
  }]);

  return Root;
}(SubTree);

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var errCode = __webpack_require__(2);

var chunkers = {
  fixed: __webpack_require__(270),
  rabin: __webpack_require__(279)
};

module.exports = function (type, source, options) {
  var chunker = chunkers[type];

  if (!chunker) {
    throw errCode(new Error("Unknkown chunker named ".concat(type)), 'ERR_UNKNOWN_CHUNKER');
  }

  return chunker(source, options);
};

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var BufferList = __webpack_require__(101);

module.exports =
/*#__PURE__*/
function () {
  var _fixedSizeChunker = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(source, options) {
    var bl, currentLength, emitted, maxChunkSize, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, buffer, newBl;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            bl = new BufferList();
            currentLength = 0;
            emitted = false;
            maxChunkSize = options.maxChunkSize;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 6;
            _iterator = _asyncIterator(source);

          case 8:
            _context.next = 10;
            return _awaitAsyncGenerator(_iterator.next());

          case 10:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 14;
            return _awaitAsyncGenerator(_step.value);

          case 14:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 29;
              break;
            }

            buffer = _value;
            bl.append(buffer);
            currentLength += buffer.length;

          case 19:
            if (!(currentLength >= maxChunkSize)) {
              _context.next = 26;
              break;
            }

            _context.next = 22;
            return bl.slice(0, maxChunkSize);

          case 22:
            emitted = true; // throw away consumed bytes

            if (maxChunkSize === bl.length) {
              bl = new BufferList();
              currentLength = 0;
            } else {
              newBl = new BufferList();
              newBl.append(bl.shallowSlice(maxChunkSize));
              bl = newBl; // update our offset

              currentLength -= maxChunkSize;
            }

            _context.next = 19;
            break;

          case 26:
            _iteratorNormalCompletion = true;
            _context.next = 8;
            break;

          case 29:
            _context.next = 35;
            break;

          case 31:
            _context.prev = 31;
            _context.t0 = _context["catch"](6);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 35:
            _context.prev = 35;
            _context.prev = 36;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 40;
              break;
            }

            _context.next = 40;
            return _awaitAsyncGenerator(_iterator["return"]());

          case 40:
            _context.prev = 40;

            if (!_didIteratorError) {
              _context.next = 43;
              break;
            }

            throw _iteratorError;

          case 43:
            return _context.finish(40);

          case 44:
            return _context.finish(35);

          case 45:
            if (!(!emitted || currentLength)) {
              _context.next = 48;
              break;
            }

            _context.next = 48;
            return bl.slice(0, currentLength);

          case 48:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[6, 31, 35, 45], [36,, 40, 44]]);
  }));

  function fixedSizeChunker(_x, _x2) {
    return _fixedSizeChunker.apply(this, arguments);
  }

  return fixedSizeChunker;
}();

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports = module.exports = __webpack_require__(102);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(106);
exports.Duplex = __webpack_require__(22);
exports.Transform = __webpack_require__(108);
exports.PassThrough = __webpack_require__(277);
exports.finished = __webpack_require__(61);
exports.pipeline = __webpack_require__(278);

/***/ }),
/* 272 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var _require = __webpack_require__(1),
    Buffer = _require.Buffer;

var _require2 = __webpack_require__(274),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  var _proto = BufferList.prototype;

  _proto.push = function push(v) {
    var entry = {
      data: v,
      next: null
    };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  _proto.unshift = function unshift(v) {
    var entry = {
      data: v,
      next: this.head
    };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  _proto.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  _proto.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  _proto.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;

    while (p = p.next) {
      ret += s + p.data;
    }

    return ret;
  };

  _proto.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;

    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }

    return ret;
  } // Consumes a specified amount of bytes or characters from the buffered data.
  ;

  _proto.consume = function consume(n, hasStrings) {
    var ret;

    if (n < this.head.data.length) {
      // `slice` is the same for buffers and strings.
      ret = this.head.data.slice(0, n);
      this.head.data = this.head.data.slice(n);
    } else if (n === this.head.data.length) {
      // First chunk is a perfect match.
      ret = this.shift();
    } else {
      // Result spans more than one buffer.
      ret = hasStrings ? this._getString(n) : this._getBuffer(n);
    }

    return ret;
  };

  _proto.first = function first() {
    return this.head.data;
  } // Consumes a specified amount of characters from the buffered data.
  ;

  _proto._getString = function _getString(n) {
    var p = this.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;

    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;

      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) this.head = p.next;else this.head = this.tail = null;
        } else {
          this.head = p;
          p.data = str.slice(nb);
        }

        break;
      }

      ++c;
    }

    this.length -= c;
    return ret;
  } // Consumes a specified amount of bytes from the buffered data.
  ;

  _proto._getBuffer = function _getBuffer(n) {
    var ret = Buffer.allocUnsafe(n);
    var p = this.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;

    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;

      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) this.head = p.next;else this.head = this.tail = null;
        } else {
          this.head = p;
          p.data = buf.slice(nb);
        }

        break;
      }

      ++c;
    }

    this.length -= c;
    return ret;
  } // Make sure the linked list only shows the minimal necessary information.
  ;

  _proto[custom] = function (_, options) {
    return inspect(this, _objectSpread({}, options, {
      // Only inspect one level.
      depth: 0,
      // It should not recurse.
      customInspect: false
    }));
  };

  return BufferList;
}();

/***/ }),
/* 274 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var experimentalWarnings = new Set();

function emitExperimentalWarning(feature) {
  if (experimentalWarnings.has(feature)) return;
  var msg = feature + ' is an experimental feature. This feature could ' + 'change at any time';
  experimentalWarnings.add(feature);
  process.emitWarning(msg, 'ExperimentalWarning');
}

function noop() {}

module.exports.emitExperimentalWarning = process.emitWarning ? emitExperimentalWarning : noop;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var finished = __webpack_require__(61);

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this; // if we have detected an error in the meanwhile
    // reject straight away


    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this; // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to


  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(108);

__webpack_require__(7)(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).


var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = __webpack_require__(21).codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = __webpack_require__(61);
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var BufferList = __webpack_require__(101);

var _require = __webpack_require__(280),
    create = _require.create;

var errcode = __webpack_require__(2);

module.exports =
/*#__PURE__*/
function () {
  var _rabinChunker = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(source, options) {
    var rabin, min, max, avg, sizepow, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            rabin = jsRabin();

            if (!(options.minChunkSize && options.maxChunkSize && options.avgChunkSize)) {
              _context.next = 7;
              break;
            }

            avg = options.avgChunkSize;
            min = options.minChunkSize;
            max = options.maxChunkSize;
            _context.next = 14;
            break;

          case 7:
            if (options.avgChunkSize) {
              _context.next = 11;
              break;
            }

            throw errcode(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE');

          case 11:
            avg = options.avgChunkSize;
            min = avg / 3;
            max = avg + avg / 2;

          case 14:
            if (!(min < 16)) {
              _context.next = 16;
              break;
            }

            throw errcode(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE');

          case 16:
            if (max < min) {
              max = min;
            }

            if (avg < min) {
              avg = min;
            }

            sizepow = Math.floor(Math.log2(avg));
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 21;
            _iterator = _asyncIterator(rabin(source, {
              min: min,
              max: max,
              bits: sizepow,
              window: options.window,
              polynomial: options.polynomial
            }));

          case 23:
            _context.next = 25;
            return _awaitAsyncGenerator(_iterator.next());

          case 25:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 29;
            return _awaitAsyncGenerator(_step.value);

          case 29:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 37;
              break;
            }

            chunk = _value;
            _context.next = 34;
            return chunk;

          case 34:
            _iteratorNormalCompletion = true;
            _context.next = 23;
            break;

          case 37:
            _context.next = 43;
            break;

          case 39:
            _context.prev = 39;
            _context.t0 = _context["catch"](21);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 43:
            _context.prev = 43;
            _context.prev = 44;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 48;
              break;
            }

            _context.next = 48;
            return _awaitAsyncGenerator(_iterator["return"]());

          case 48:
            _context.prev = 48;

            if (!_didIteratorError) {
              _context.next = 51;
              break;
            }

            throw _iteratorError;

          case 51:
            return _context.finish(48);

          case 52:
            return _context.finish(43);

          case 53:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[21, 39, 43, 53], [44,, 48, 52]]);
  }));

  function rabinChunker(_x, _x2) {
    return _rabinChunker.apply(this, arguments);
  }

  return rabinChunker;
}();

var jsRabin = function jsRabin() {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _wrapAsyncGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(source, options) {
        var r, buffers, pending, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, chunk, sizes, i, size, buf;

        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _awaitAsyncGenerator(create(options.bits, options.min, options.max, options.window));

              case 2:
                r = _context2.sent;
                buffers = new BufferList();
                pending = [];
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _context2.prev = 7;
                _iterator2 = _asyncIterator(source);

              case 9:
                _context2.next = 11;
                return _awaitAsyncGenerator(_iterator2.next());

              case 11:
                _step2 = _context2.sent;
                _iteratorNormalCompletion2 = _step2.done;
                _context2.next = 15;
                return _awaitAsyncGenerator(_step2.value);

              case 15:
                _value2 = _context2.sent;

                if (_iteratorNormalCompletion2) {
                  _context2.next = 35;
                  break;
                }

                chunk = _value2;
                buffers.append(chunk);
                pending.push(chunk);
                sizes = r.fingerprint(Buffer.concat(pending));
                pending = [];
                i = 0;

              case 23:
                if (!(i < sizes.length)) {
                  _context2.next = 32;
                  break;
                }

                size = sizes[i];
                buf = buffers.slice(0, size);
                buffers.consume(size);
                _context2.next = 29;
                return buf;

              case 29:
                i++;
                _context2.next = 23;
                break;

              case 32:
                _iteratorNormalCompletion2 = true;
                _context2.next = 9;
                break;

              case 35:
                _context2.next = 41;
                break;

              case 37:
                _context2.prev = 37;
                _context2.t0 = _context2["catch"](7);
                _didIteratorError2 = true;
                _iteratorError2 = _context2.t0;

              case 41:
                _context2.prev = 41;
                _context2.prev = 42;

                if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
                  _context2.next = 46;
                  break;
                }

                _context2.next = 46;
                return _awaitAsyncGenerator(_iterator2["return"]());

              case 46:
                _context2.prev = 46;

                if (!_didIteratorError2) {
                  _context2.next = 49;
                  break;
                }

                throw _iteratorError2;

              case 49:
                return _context2.finish(46);

              case 50:
                return _context2.finish(41);

              case 51:
                if (!buffers.length) {
                  _context2.next = 54;
                  break;
                }

                _context2.next = 54;
                return buffers.slice(0);

              case 54:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[7, 37, 41, 51], [42,, 46, 50]]);
      }));

      return function (_x3, _x4) {
        return _ref.apply(this, arguments);
      };
    }()
  );
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Rabin = __webpack_require__(281);

var getRabin = __webpack_require__(282);

var create =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(bits, min, max, windowSize) {
    var compiled;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return getRabin();

          case 2:
            compiled = _context.sent;
            return _context.abrupt("return", new Rabin(bits, min, max, windowSize, compiled));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function create(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = {
  Rabin: Rabin,
  create: create
};

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Rabin fingerprinting
 *
 * @class Rabin
 */
var Rabin =
/*#__PURE__*/
function () {
  /**
   * Creates an instance of Rabin.
   * @param {number} [bits=12]
   * @param {number} [min=8 * 1024]
   * @param {number} [max=32 * 1024]
   * @param { import("./../dist/rabin").default } asModule
   * @memberof Rabin
   */
  function Rabin() {
    var bits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8 * 1024;
    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32 * 1024;
    var windowSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 64;
    var asModule = arguments.length > 4 ? arguments[4] : undefined;

    _classCallCheck(this, Rabin);

    this.bits = bits;
    this.min = min;
    this.max = max;
    this.asModule = asModule;
    this.rabin = new asModule.Rabin(bits, min, max, windowSize);
  }
  /**
   * Fingerprints the buffer
   *
   * @param {Uint8Array} buf
   * @returns {Array<number>}
   * @memberof Rabin
   */


  _createClass(Rabin, [{
    key: "fingerprint",
    value: function fingerprint(buf) {
      var lengths = new Int32Array(Math.ceil(buf.length / this.min));
      var lengthsPtr = this.asModule.newArray(lengths);
      var pointer = this.asModule.newArray(buf); // run finderprint

      this.rabin.fingerprint(pointer, lengthsPtr);
      var processed = this.asModule.getArray(Int32Array, lengthsPtr); //free memory

      this.asModule.freeArray(lengthsPtr);
      this.asModule.freeArray(pointer); // TODO: remove this. @see https://github.com/ipfs/js-ipfs/issues/2118#issuecomment-497722625
      // clean extra 0s in the array

      var cleanArr = [];

      for (var i = 0; i < processed.length; i++) {
        if (processed[i] === 0) break;
        cleanArr[i] = processed[i];
      }

      return cleanArr;
    }
  }]);

  return Rabin;
}();

module.exports = Rabin;

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _require = __webpack_require__(283),
    instantiateStreaming = _require.instantiateStreaming;

loadWebAssembly.supported = typeof WebAssembly !== 'undefined';

function loadWebAssembly() {
  var imp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  if (!loadWebAssembly.supported) return null;
  var wasm = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 90, 16, 96, 0, 0, 96, 2, 127, 127, 1, 127, 96, 4, 127, 127, 127, 127, 0, 96, 1, 127, 1, 127, 96, 3, 127, 127, 127, 0, 96, 1, 126, 1, 127, 96, 2, 126, 126, 1, 126, 96, 5, 127, 127, 127, 127, 127, 1, 127, 96, 3, 127, 127, 126, 0, 96, 2, 127, 127, 1, 126, 96, 3, 127, 127, 127, 1, 127, 96, 1, 127, 0, 96, 2, 127, 127, 0, 96, 1, 127, 1, 126, 96, 2, 127, 126, 0, 96, 0, 1, 127, 2, 13, 1, 3, 101, 110, 118, 5, 97, 98, 111, 114, 116, 0, 2, 3, 57, 56, 3, 3, 12, 3, 3, 15, 5, 6, 1, 8, 4, 1, 9, 11, 7, 4, 10, 10, 11, 0, 0, 0, 3, 12, 3, 12, 3, 12, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 4, 4, 1, 112, 0, 1, 5, 3, 1, 0, 1, 6, 26, 5, 127, 1, 65, 0, 11, 127, 1, 65, 0, 11, 127, 1, 65, 0, 11, 127, 1, 65, 0, 11, 127, 1, 65, 0, 11, 7, 253, 6, 44, 6, 109, 101, 109, 111, 114, 121, 2, 0, 5, 116, 97, 98, 108, 101, 1, 0, 6, 100, 101, 103, 114, 101, 101, 0, 7, 3, 109, 111, 100, 0, 8, 16, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 119, 105, 110, 100, 111, 119, 0, 23, 16, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 119, 105, 110, 100, 111, 119, 0, 24, 21, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 119, 105, 110, 100, 111, 119, 95, 115, 105, 122, 101, 0, 25, 21, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 119, 105, 110, 100, 111, 119, 95, 115, 105, 122, 101, 0, 26, 14, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 119, 112, 111, 115, 0, 27, 14, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 119, 112, 111, 115, 0, 28, 15, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 99, 111, 117, 110, 116, 0, 29, 15, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 99, 111, 117, 110, 116, 0, 30, 13, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 112, 111, 115, 0, 31, 13, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 112, 111, 115, 0, 32, 15, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 115, 116, 97, 114, 116, 0, 33, 15, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 115, 116, 97, 114, 116, 0, 34, 16, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 100, 105, 103, 101, 115, 116, 0, 35, 16, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 100, 105, 103, 101, 115, 116, 0, 36, 21, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 99, 104, 117, 110, 107, 95, 115, 116, 97, 114, 116, 0, 37, 21, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 99, 104, 117, 110, 107, 95, 115, 116, 97, 114, 116, 0, 38, 22, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 99, 104, 117, 110, 107, 95, 108, 101, 110, 103, 116, 104, 0, 39, 22, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 99, 104, 117, 110, 107, 95, 108, 101, 110, 103, 116, 104, 0, 40, 31, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 99, 104, 117, 110, 107, 95, 99, 117, 116, 95, 102, 105, 110, 103, 101, 114, 112, 114, 105, 110, 116, 0, 41, 31, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 99, 104, 117, 110, 107, 95, 99, 117, 116, 95, 102, 105, 110, 103, 101, 114, 112, 114, 105, 110, 116, 0, 42, 20, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 0, 43, 20, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 0, 44, 27, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 95, 100, 101, 103, 114, 101, 101, 0, 45, 27, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 95, 100, 101, 103, 114, 101, 101, 0, 46, 26, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 95, 115, 104, 105, 102, 116, 0, 47, 26, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 112, 111, 108, 121, 110, 111, 109, 105, 97, 108, 95, 115, 104, 105, 102, 116, 0, 48, 22, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 97, 118, 101, 114, 97, 103, 101, 95, 98, 105, 116, 115, 0, 49, 22, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 97, 118, 101, 114, 97, 103, 101, 95, 98, 105, 116, 115, 0, 50, 17, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 109, 105, 110, 115, 105, 122, 101, 0, 51, 17, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 109, 105, 110, 115, 105, 122, 101, 0, 52, 17, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 109, 97, 120, 115, 105, 122, 101, 0, 53, 17, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 109, 97, 120, 115, 105, 122, 101, 0, 54, 14, 82, 97, 98, 105, 110, 35, 103, 101, 116, 58, 109, 97, 115, 107, 0, 55, 14, 82, 97, 98, 105, 110, 35, 115, 101, 116, 58, 109, 97, 115, 107, 0, 56, 17, 82, 97, 98, 105, 110, 35, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 0, 15, 17, 82, 97, 98, 105, 110, 35, 102, 105, 110, 103, 101, 114, 112, 114, 105, 110, 116, 0, 16, 14, 109, 101, 109, 111, 114, 121, 46, 99, 111, 109, 112, 97, 114, 101, 0, 18, 15, 109, 101, 109, 111, 114, 121, 46, 97, 108, 108, 111, 99, 97, 116, 101, 0, 4, 11, 109, 101, 109, 111, 114, 121, 46, 102, 114, 101, 101, 0, 19, 12, 109, 101, 109, 111, 114, 121, 46, 114, 101, 115, 101, 116, 0, 20, 8, 1, 21, 9, 7, 1, 0, 65, 0, 11, 1, 22, 10, 188, 30, 56, 104, 1, 3, 127, 32, 0, 65, 128, 128, 128, 128, 4, 75, 4, 64, 0, 11, 35, 1, 34, 1, 32, 0, 65, 1, 32, 0, 65, 1, 75, 27, 106, 65, 7, 106, 65, 120, 113, 34, 0, 63, 0, 34, 2, 65, 16, 116, 75, 4, 64, 32, 2, 32, 0, 32, 1, 107, 65, 255, 255, 3, 106, 65, 128, 128, 124, 113, 65, 16, 118, 34, 3, 32, 2, 32, 3, 74, 27, 64, 0, 65, 0, 72, 4, 64, 32, 3, 64, 0, 65, 0, 72, 4, 64, 0, 11, 11, 11, 32, 0, 36, 1, 32, 1, 11, 51, 1, 1, 127, 32, 0, 65, 248, 255, 255, 255, 3, 75, 4, 64, 65, 0, 65, 200, 0, 65, 26, 65, 2, 16, 0, 0, 11, 65, 1, 65, 32, 32, 0, 65, 7, 106, 103, 107, 116, 16, 1, 34, 1, 32, 0, 54, 2, 0, 32, 1, 11, 145, 3, 1, 1, 127, 32, 1, 69, 4, 64, 15, 11, 32, 0, 65, 0, 58, 0, 0, 32, 0, 32, 1, 106, 65, 1, 107, 65, 0, 58, 0, 0, 32, 1, 65, 2, 77, 4, 64, 15, 11, 32, 0, 65, 1, 106, 65, 0, 58, 0, 0, 32, 0, 65, 2, 106, 65, 0, 58, 0, 0, 32, 0, 32, 1, 106, 34, 2, 65, 2, 107, 65, 0, 58, 0, 0, 32, 2, 65, 3, 107, 65, 0, 58, 0, 0, 32, 1, 65, 6, 77, 4, 64, 15, 11, 32, 0, 65, 3, 106, 65, 0, 58, 0, 0, 32, 0, 32, 1, 106, 65, 4, 107, 65, 0, 58, 0, 0, 32, 1, 65, 8, 77, 4, 64, 15, 11, 65, 0, 32, 0, 107, 65, 3, 113, 34, 2, 32, 0, 106, 34, 0, 65, 0, 54, 2, 0, 32, 1, 32, 2, 107, 65, 124, 113, 34, 1, 32, 0, 106, 65, 4, 107, 65, 0, 54, 2, 0, 32, 1, 65, 8, 77, 4, 64, 15, 11, 32, 0, 65, 4, 106, 65, 0, 54, 2, 0, 32, 0, 65, 8, 106, 65, 0, 54, 2, 0, 32, 0, 32, 1, 106, 34, 2, 65, 12, 107, 65, 0, 54, 2, 0, 32, 2, 65, 8, 107, 65, 0, 54, 2, 0, 32, 1, 65, 24, 77, 4, 64, 15, 11, 32, 0, 65, 12, 106, 65, 0, 54, 2, 0, 32, 0, 65, 16, 106, 65, 0, 54, 2, 0, 32, 0, 65, 20, 106, 65, 0, 54, 2, 0, 32, 0, 65, 24, 106, 65, 0, 54, 2, 0, 32, 0, 32, 1, 106, 34, 2, 65, 28, 107, 65, 0, 54, 2, 0, 32, 2, 65, 24, 107, 65, 0, 54, 2, 0, 32, 2, 65, 20, 107, 65, 0, 54, 2, 0, 32, 2, 65, 16, 107, 65, 0, 54, 2, 0, 32, 0, 65, 4, 113, 65, 24, 106, 34, 2, 32, 0, 106, 33, 0, 32, 1, 32, 2, 107, 33, 1, 3, 64, 32, 1, 65, 32, 79, 4, 64, 32, 0, 66, 0, 55, 3, 0, 32, 0, 65, 8, 106, 66, 0, 55, 3, 0, 32, 0, 65, 16, 106, 66, 0, 55, 3, 0, 32, 0, 65, 24, 106, 66, 0, 55, 3, 0, 32, 1, 65, 32, 107, 33, 1, 32, 0, 65, 32, 106, 33, 0, 12, 1, 11, 11, 11, 6, 0, 32, 0, 16, 1, 11, 76, 1, 1, 127, 65, 128, 16, 16, 2, 34, 1, 65, 8, 106, 65, 128, 16, 16, 3, 32, 0, 69, 4, 64, 65, 12, 16, 1, 33, 0, 11, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 65, 0, 54, 2, 8, 32, 0, 32, 1, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 65, 128, 16, 54, 2, 8, 32, 0, 11, 8, 0, 65, 12, 16, 1, 16, 5, 11, 70, 2, 1, 127, 1, 126, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 2, 3, 64, 2, 64, 32, 1, 65, 192, 0, 78, 13, 0, 32, 0, 32, 2, 131, 66, 0, 86, 4, 64, 65, 63, 32, 1, 107, 15, 5, 32, 2, 66, 1, 136, 33, 2, 32, 1, 65, 1, 106, 33, 1, 12, 2, 11, 0, 11, 11, 65, 127, 11, 175, 2, 2, 1, 127, 2, 126, 3, 64, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 3, 65, 0, 33, 2, 3, 64, 2, 64, 32, 2, 65, 192, 0, 78, 13, 0, 65, 63, 32, 2, 107, 32, 0, 32, 3, 131, 66, 0, 86, 13, 2, 26, 32, 3, 66, 1, 136, 33, 3, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 127, 11, 2, 127, 32, 1, 33, 4, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 3, 65, 0, 33, 2, 3, 64, 2, 64, 32, 2, 65, 192, 0, 78, 13, 0, 65, 63, 32, 2, 107, 32, 3, 32, 4, 131, 66, 0, 86, 13, 2, 26, 32, 3, 66, 1, 136, 33, 3, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 127, 11, 78, 4, 64, 32, 1, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 3, 65, 0, 33, 2, 3, 64, 2, 64, 32, 2, 65, 192, 0, 78, 13, 0, 65, 63, 32, 2, 107, 32, 0, 32, 3, 131, 66, 0, 86, 13, 2, 26, 32, 3, 66, 1, 136, 33, 3, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 127, 11, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 3, 65, 0, 33, 2, 3, 64, 2, 64, 32, 2, 65, 192, 0, 78, 13, 0, 65, 63, 32, 2, 107, 32, 1, 32, 3, 131, 66, 0, 86, 13, 2, 26, 32, 3, 66, 1, 136, 33, 3, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 127, 11, 107, 172, 134, 32, 0, 133, 33, 0, 12, 1, 11, 11, 32, 0, 11, 96, 1, 1, 127, 32, 1, 65, 248, 255, 255, 255, 3, 75, 4, 64, 65, 0, 65, 8, 65, 23, 65, 34, 16, 0, 0, 11, 32, 1, 16, 2, 34, 2, 65, 8, 106, 32, 1, 16, 3, 32, 0, 69, 4, 64, 65, 12, 16, 1, 33, 0, 11, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 65, 0, 54, 2, 8, 32, 0, 32, 2, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 32, 1, 54, 2, 8, 32, 0, 11, 49, 0, 32, 1, 32, 0, 40, 2, 8, 65, 3, 118, 79, 4, 64, 65, 0, 65, 8, 65, 50, 65, 63, 16, 0, 0, 11, 32, 0, 40, 2, 4, 32, 0, 40, 2, 0, 32, 1, 65, 3, 116, 106, 106, 32, 2, 55, 3, 8, 11, 43, 0, 32, 1, 32, 0, 40, 2, 8, 79, 4, 64, 65, 0, 65, 8, 65, 50, 65, 63, 16, 0, 0, 11, 32, 0, 40, 2, 4, 32, 1, 32, 0, 40, 2, 0, 106, 106, 32, 2, 58, 0, 8, 11, 41, 0, 32, 1, 32, 0, 40, 2, 8, 79, 4, 64, 65, 0, 65, 8, 65, 39, 65, 63, 16, 0, 0, 11, 32, 0, 40, 2, 4, 32, 1, 32, 0, 40, 2, 0, 106, 106, 45, 0, 8, 11, 47, 0, 32, 1, 32, 0, 40, 2, 8, 65, 3, 118, 79, 4, 64, 65, 0, 65, 8, 65, 39, 65, 63, 16, 0, 0, 11, 32, 0, 40, 2, 4, 32, 0, 40, 2, 0, 32, 1, 65, 3, 116, 106, 106, 41, 3, 8, 11, 166, 10, 2, 3, 127, 5, 126, 35, 2, 69, 4, 64, 3, 64, 32, 2, 65, 128, 2, 72, 4, 64, 32, 2, 65, 255, 1, 113, 173, 33, 4, 32, 0, 41, 3, 72, 33, 6, 3, 64, 2, 127, 32, 4, 33, 5, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 2, 127, 32, 6, 33, 7, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 7, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 78, 4, 64, 32, 6, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 6, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 107, 172, 134, 32, 5, 133, 33, 4, 12, 1, 11, 11, 65, 0, 33, 1, 3, 64, 32, 1, 32, 0, 40, 2, 4, 65, 1, 107, 72, 4, 64, 32, 5, 66, 8, 134, 33, 4, 32, 0, 41, 3, 72, 33, 6, 3, 64, 2, 127, 32, 4, 33, 5, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 3, 3, 64, 32, 3, 65, 192, 0, 72, 4, 64, 65, 63, 32, 3, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 3, 65, 1, 106, 33, 3, 12, 1, 11, 11, 65, 127, 11, 2, 127, 32, 6, 33, 7, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 3, 3, 64, 32, 3, 65, 192, 0, 72, 4, 64, 65, 63, 32, 3, 107, 32, 4, 32, 7, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 3, 65, 1, 106, 33, 3, 12, 1, 11, 11, 65, 127, 11, 78, 4, 64, 32, 6, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 3, 3, 64, 32, 3, 65, 192, 0, 72, 4, 64, 65, 63, 32, 3, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 3, 65, 1, 106, 33, 3, 12, 1, 11, 11, 65, 127, 11, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 3, 3, 64, 32, 3, 65, 192, 0, 72, 4, 64, 65, 63, 32, 3, 107, 32, 4, 32, 6, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 3, 65, 1, 106, 33, 3, 12, 1, 11, 11, 65, 127, 11, 107, 172, 134, 32, 5, 133, 33, 4, 12, 1, 11, 11, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 35, 4, 32, 2, 32, 5, 16, 10, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 2, 127, 32, 0, 41, 3, 72, 33, 4, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 5, 65, 0, 33, 2, 3, 64, 32, 2, 65, 192, 0, 72, 4, 64, 65, 63, 32, 2, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 5, 66, 1, 136, 33, 5, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 127, 11, 172, 33, 8, 65, 0, 33, 2, 3, 64, 32, 2, 65, 128, 2, 72, 4, 64, 35, 3, 33, 3, 32, 2, 172, 32, 8, 134, 33, 5, 32, 0, 41, 3, 72, 33, 6, 3, 64, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 2, 127, 32, 6, 33, 7, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 7, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 78, 4, 64, 32, 6, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 5, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 2, 127, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 33, 4, 65, 0, 33, 1, 3, 64, 32, 1, 65, 192, 0, 72, 4, 64, 65, 63, 32, 1, 107, 32, 4, 32, 6, 131, 66, 0, 86, 13, 2, 26, 32, 4, 66, 1, 136, 33, 4, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 65, 127, 11, 107, 172, 134, 32, 5, 133, 33, 5, 12, 1, 11, 11, 32, 3, 32, 2, 32, 2, 172, 32, 8, 134, 32, 5, 132, 16, 10, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 65, 1, 36, 2, 11, 32, 0, 66, 0, 55, 3, 24, 32, 0, 66, 0, 55, 3, 32, 65, 0, 33, 2, 3, 64, 32, 2, 32, 0, 40, 2, 4, 72, 4, 64, 32, 0, 40, 2, 0, 32, 2, 65, 0, 16, 11, 32, 2, 65, 1, 106, 33, 2, 12, 1, 11, 11, 32, 0, 66, 0, 55, 3, 40, 32, 0, 65, 0, 54, 2, 8, 32, 0, 66, 0, 55, 3, 16, 32, 0, 66, 0, 55, 3, 40, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 16, 12, 33, 1, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 65, 1, 16, 11, 32, 0, 32, 0, 41, 3, 40, 35, 4, 32, 1, 65, 255, 1, 113, 16, 13, 133, 55, 3, 40, 32, 0, 32, 0, 40, 2, 8, 65, 1, 106, 32, 0, 40, 2, 4, 111, 54, 2, 8, 32, 0, 41, 3, 40, 32, 0, 41, 3, 88, 136, 167, 33, 1, 32, 0, 32, 0, 41, 3, 40, 66, 8, 134, 55, 3, 40, 32, 0, 32, 0, 41, 3, 40, 66, 1, 132, 55, 3, 40, 32, 0, 32, 0, 41, 3, 40, 35, 3, 32, 1, 65, 255, 1, 113, 16, 13, 133, 55, 3, 40, 11, 234, 1, 0, 32, 0, 69, 4, 64, 65, 128, 1, 16, 1, 33, 0, 11, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 65, 0, 54, 2, 8, 32, 0, 66, 0, 55, 3, 16, 32, 0, 66, 0, 55, 3, 24, 32, 0, 66, 0, 55, 3, 32, 32, 0, 66, 0, 55, 3, 40, 32, 0, 66, 0, 55, 3, 48, 32, 0, 66, 0, 55, 3, 56, 32, 0, 66, 0, 55, 3, 64, 32, 0, 66, 0, 55, 3, 72, 32, 0, 66, 0, 55, 3, 80, 32, 0, 66, 0, 55, 3, 88, 32, 0, 66, 0, 55, 3, 96, 32, 0, 66, 0, 55, 3, 104, 32, 0, 66, 0, 55, 3, 112, 32, 0, 66, 0, 55, 3, 120, 32, 0, 32, 1, 173, 55, 3, 96, 32, 0, 32, 2, 173, 55, 3, 104, 32, 0, 32, 3, 173, 55, 3, 112, 32, 0, 65, 12, 16, 1, 32, 4, 16, 9, 54, 2, 0, 32, 0, 32, 4, 54, 2, 4, 32, 0, 66, 1, 32, 0, 41, 3, 96, 134, 66, 1, 125, 55, 3, 120, 32, 0, 66, 243, 130, 183, 218, 216, 230, 232, 30, 55, 3, 72, 32, 0, 66, 53, 55, 3, 80, 32, 0, 32, 0, 41, 3, 80, 66, 8, 125, 55, 3, 88, 32, 0, 16, 14, 32, 0, 11, 206, 4, 1, 5, 127, 32, 1, 40, 2, 8, 33, 4, 32, 1, 40, 2, 0, 65, 8, 106, 33, 5, 3, 64, 2, 127, 65, 0, 33, 3, 3, 64, 32, 3, 32, 4, 72, 4, 64, 32, 3, 32, 5, 106, 45, 0, 0, 33, 1, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 16, 12, 33, 6, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 32, 1, 16, 11, 32, 0, 32, 0, 41, 3, 40, 35, 4, 32, 6, 65, 255, 1, 113, 16, 13, 133, 55, 3, 40, 32, 0, 32, 0, 40, 2, 8, 65, 1, 106, 32, 0, 40, 2, 4, 111, 54, 2, 8, 32, 0, 41, 3, 40, 32, 0, 41, 3, 88, 136, 167, 33, 6, 32, 0, 32, 0, 41, 3, 40, 66, 8, 134, 55, 3, 40, 32, 0, 32, 0, 41, 3, 40, 32, 1, 173, 132, 55, 3, 40, 32, 0, 32, 0, 41, 3, 40, 35, 3, 32, 6, 65, 255, 1, 113, 16, 13, 133, 55, 3, 40, 32, 0, 32, 0, 41, 3, 16, 66, 1, 124, 55, 3, 16, 32, 0, 32, 0, 41, 3, 24, 66, 1, 124, 55, 3, 24, 2, 127, 32, 0, 41, 3, 16, 32, 0, 41, 3, 104, 90, 34, 1, 4, 64, 32, 0, 41, 3, 40, 32, 0, 41, 3, 120, 131, 66, 0, 81, 33, 1, 11, 32, 1, 69, 11, 4, 127, 32, 0, 41, 3, 16, 32, 0, 41, 3, 112, 90, 5, 32, 1, 11, 4, 64, 32, 0, 32, 0, 41, 3, 32, 55, 3, 48, 32, 0, 32, 0, 41, 3, 16, 55, 3, 56, 32, 0, 32, 0, 41, 3, 40, 55, 3, 64, 65, 0, 33, 1, 3, 64, 32, 1, 32, 0, 40, 2, 4, 72, 4, 64, 32, 0, 40, 2, 0, 32, 1, 65, 0, 16, 11, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 32, 0, 66, 0, 55, 3, 40, 32, 0, 65, 0, 54, 2, 8, 32, 0, 66, 0, 55, 3, 16, 32, 0, 66, 0, 55, 3, 40, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 16, 12, 33, 1, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 65, 1, 16, 11, 32, 0, 32, 0, 41, 3, 40, 35, 4, 32, 1, 65, 255, 1, 113, 16, 13, 133, 55, 3, 40, 32, 0, 32, 0, 40, 2, 8, 65, 1, 106, 32, 0, 40, 2, 4, 111, 54, 2, 8, 32, 0, 41, 3, 40, 32, 0, 41, 3, 88, 136, 167, 33, 1, 32, 0, 32, 0, 41, 3, 40, 66, 8, 134, 55, 3, 40, 32, 0, 32, 0, 41, 3, 40, 66, 1, 132, 55, 3, 40, 32, 0, 32, 0, 41, 3, 40, 35, 3, 32, 1, 65, 255, 1, 113, 16, 13, 133, 55, 3, 40, 32, 3, 65, 1, 106, 12, 3, 5, 32, 3, 65, 1, 106, 33, 3, 12, 2, 11, 0, 11, 11, 65, 127, 11, 34, 1, 65, 0, 78, 4, 64, 32, 4, 32, 1, 107, 33, 4, 32, 1, 32, 5, 106, 33, 5, 32, 7, 34, 1, 65, 1, 106, 33, 7, 32, 2, 40, 2, 4, 32, 2, 40, 2, 0, 32, 1, 65, 2, 116, 106, 106, 32, 0, 41, 3, 56, 62, 2, 8, 32, 2, 40, 2, 4, 32, 2, 40, 2, 0, 32, 1, 65, 2, 116, 106, 106, 40, 2, 8, 26, 12, 1, 11, 11, 11, 88, 1, 1, 127, 32, 0, 32, 1, 70, 4, 64, 65, 0, 15, 11, 3, 64, 32, 2, 65, 0, 71, 34, 3, 4, 64, 32, 0, 45, 0, 0, 32, 1, 45, 0, 0, 70, 33, 3, 11, 32, 3, 4, 64, 32, 2, 65, 1, 107, 33, 2, 32, 0, 65, 1, 106, 33, 0, 32, 1, 65, 1, 106, 33, 1, 12, 1, 11, 11, 32, 2, 4, 127, 32, 0, 45, 0, 0, 32, 1, 45, 0, 0, 107, 5, 65, 0, 11, 11, 10, 0, 32, 0, 32, 1, 32, 2, 16, 17, 11, 3, 0, 1, 11, 6, 0, 35, 0, 36, 1, 11, 19, 0, 65, 136, 1, 36, 0, 35, 0, 36, 1, 16, 6, 36, 3, 16, 6, 36, 4, 11, 3, 0, 1, 11, 7, 0, 32, 0, 40, 2, 0, 11, 9, 0, 32, 0, 32, 1, 54, 2, 0, 11, 7, 0, 32, 0, 40, 2, 4, 11, 9, 0, 32, 0, 32, 1, 54, 2, 4, 11, 7, 0, 32, 0, 40, 2, 8, 11, 9, 0, 32, 0, 32, 1, 54, 2, 8, 11, 7, 0, 32, 0, 41, 3, 16, 11, 9, 0, 32, 0, 32, 1, 55, 3, 16, 11, 7, 0, 32, 0, 41, 3, 24, 11, 9, 0, 32, 0, 32, 1, 55, 3, 24, 11, 7, 0, 32, 0, 41, 3, 32, 11, 9, 0, 32, 0, 32, 1, 55, 3, 32, 11, 7, 0, 32, 0, 41, 3, 40, 11, 9, 0, 32, 0, 32, 1, 55, 3, 40, 11, 7, 0, 32, 0, 41, 3, 48, 11, 9, 0, 32, 0, 32, 1, 55, 3, 48, 11, 7, 0, 32, 0, 41, 3, 56, 11, 9, 0, 32, 0, 32, 1, 55, 3, 56, 11, 7, 0, 32, 0, 41, 3, 64, 11, 9, 0, 32, 0, 32, 1, 55, 3, 64, 11, 7, 0, 32, 0, 41, 3, 72, 11, 9, 0, 32, 0, 32, 1, 55, 3, 72, 11, 7, 0, 32, 0, 41, 3, 80, 11, 9, 0, 32, 0, 32, 1, 55, 3, 80, 11, 7, 0, 32, 0, 41, 3, 88, 11, 9, 0, 32, 0, 32, 1, 55, 3, 88, 11, 7, 0, 32, 0, 41, 3, 96, 11, 9, 0, 32, 0, 32, 1, 55, 3, 96, 11, 7, 0, 32, 0, 41, 3, 104, 11, 9, 0, 32, 0, 32, 1, 55, 3, 104, 11, 7, 0, 32, 0, 41, 3, 112, 11, 9, 0, 32, 0, 32, 1, 55, 3, 112, 11, 7, 0, 32, 0, 41, 3, 120, 11, 9, 0, 32, 0, 32, 1, 55, 3, 120, 11, 11, 128, 1, 2, 0, 65, 8, 11, 57, 27, 0, 0, 0, 126, 0, 108, 0, 105, 0, 98, 0, 47, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 110, 0, 97, 0, 108, 0, 47, 0, 116, 0, 121, 0, 112, 0, 101, 0, 100, 0, 97, 0, 114, 0, 114, 0, 97, 0, 121, 0, 46, 0, 116, 0, 115, 0, 65, 200, 0, 11, 59, 28, 0, 0, 0, 126, 0, 108, 0, 105, 0, 98, 0, 47, 0, 105, 0, 110, 0, 116, 0, 101, 0, 114, 0, 110, 0, 97, 0, 108, 0, 47, 0, 97, 0, 114, 0, 114, 0, 97, 0, 121, 0, 98, 0, 117, 0, 102, 0, 102, 0, 101, 0, 114, 0, 46, 0, 116, 0, 115, 0, 32, 16, 115, 111, 117, 114, 99, 101, 77, 97, 112, 112, 105, 110, 103, 85, 82, 76, 14, 114, 97, 98, 105, 110, 46, 119, 97, 115, 109, 46, 109, 97, 112]); // make it work async because browsers throw when a wasm module is bigger than 4kb and load sync

  return instantiateStreaming(new Response(new Blob([wasm], {
    type: 'application/wasm'
  })), imp);
}

module.exports = loadWebAssembly;

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var hasBigInt64 = typeof BigUint64Array !== "undefined";
var thisPtr = Symbol();
/** Gets a string from an U32 and an U16 view on a memory. */

function getStringImpl(U32, U16, ptr) {
  var dataLength = U32[ptr >>> 2];
  var dataOffset = ptr + 4 >>> 1;
  var dataRemain = dataLength;
  var parts = [];
  var chunkSize = 1024;

  while (dataRemain > chunkSize) {
    var last = U16[dataOffset + chunkSize - 1];
    var size = last >= 0xD800 && last < 0xDC00 ? chunkSize - 1 : chunkSize;
    var part = U16.subarray(dataOffset, dataOffset += size);
    parts.push(String.fromCharCode.apply(String, part));
    dataRemain -= size;
  }

  return parts.join("") + String.fromCharCode.apply(String, U16.subarray(dataOffset, dataOffset + dataRemain));
}
/** Prepares the base module prior to instantiation. */


function preInstantiate(imports) {
  var baseModule = {};

  function getString(memory, ptr) {
    if (!memory) return "<yet unknown>";
    var buffer = memory.buffer;
    return getStringImpl(new Uint32Array(buffer), new Uint16Array(buffer), ptr);
  } // add common imports used by stdlib for convenience


  var env = imports.env = imports.env || {};

  env.abort = env.abort || function abort(mesg, file, line, colm) {
    var memory = baseModule.memory || env.memory; // prefer exported, otherwise try imported

    throw Error("abort: " + getString(memory, mesg) + " at " + getString(memory, file) + ":" + line + ":" + colm);
  };

  env.trace = env.trace || function trace(mesg, n) {
    var memory = baseModule.memory || env.memory;
    console.log("trace: " + getString(memory, mesg) + (n ? " " : "") + Array.prototype.slice.call(arguments, 2, 2 + n).join(", "));
  };

  imports.Math = imports.Math || Math;
  imports.Date = imports.Date || Date;
  return baseModule;
}
/** Prepares the final module once instantiation is complete. */


function postInstantiate(baseModule, instance) {
  var rawExports = instance.exports;
  var memory = rawExports.memory;
  var memory_allocate = rawExports["memory.allocate"];
  var memory_fill = rawExports["memory.fill"];
  var memory_free = rawExports["memory.free"];
  var table = rawExports.table;

  var setargc = rawExports._setargc || function () {}; // Provide views for all sorts of basic values


  var buffer, I8, U8, I16, U16, I32, U32, F32, F64, I64, U64;
  /** Updates memory views if memory has grown meanwhile. */

  function checkMem() {
    // see: https://github.com/WebAssembly/design/issues/1210
    if (buffer !== memory.buffer) {
      buffer = memory.buffer;
      I8 = new Int8Array(buffer);
      U8 = new Uint8Array(buffer);
      I16 = new Int16Array(buffer);
      U16 = new Uint16Array(buffer);
      I32 = new Int32Array(buffer);
      U32 = new Uint32Array(buffer);

      if (hasBigInt64) {
        I64 = new BigInt64Array(buffer);
        U64 = new BigUint64Array(buffer);
      }

      F32 = new Float32Array(buffer);
      F64 = new Float64Array(buffer);
    }
  }

  checkMem();
  /** Allocates a new string in the module's memory and returns its pointer. */

  function newString(str) {
    var dataLength = str.length;
    var ptr = memory_allocate(4 + (dataLength << 1));
    var dataOffset = 4 + ptr >>> 1;
    checkMem();
    U32[ptr >>> 2] = dataLength;

    for (var i = 0; i < dataLength; ++i) {
      U16[dataOffset + i] = str.charCodeAt(i);
    }

    return ptr;
  }

  baseModule.newString = newString;
  /** Gets a string from the module's memory by its pointer. */

  function getString(ptr) {
    checkMem();
    return getStringImpl(U32, U16, ptr);
  }

  baseModule.getString = getString;

  function computeBufferSize(byteLength) {
    var HEADER_SIZE = 8;
    return 1 << 32 - Math.clz32(byteLength + HEADER_SIZE - 1);
  }
  /** Creates a new typed array in the module's memory and returns its pointer. */


  function newArray(view, length, unsafe) {
    var ctor = view.constructor;

    if (ctor === Function) {
      // TypedArray constructor created in memory
      ctor = view;
      view = null;
    } else {
      // TypedArray instance copied into memory
      if (length === undefined) length = view.length;
    }

    var elementSize = ctor.BYTES_PER_ELEMENT;
    if (!elementSize) throw Error("not a typed array");
    var byteLength = elementSize * length;
    var ptr = memory_allocate(12); // TypedArray header

    var buf = memory_allocate(computeBufferSize(byteLength)); // ArrayBuffer

    checkMem();
    U32[ptr >>> 2] = buf; // .buffer

    U32[ptr + 4 >>> 2] = 0; // .byteOffset

    U32[ptr + 8 >>> 2] = byteLength; // .byteLength

    U32[buf >>> 2] = byteLength; // .byteLength

    U32[buf + 4 >>> 2] = 0; // 0

    if (view) {
      new ctor(buffer, buf + 8, length).set(view);

      if (view.length < length && !unsafe) {
        var setLength = elementSize * view.length;
        memory_fill(buf + 8 + setLength, 0, byteLength - setLength);
      }
    } else if (!unsafe) {
      memory_fill(buf + 8, 0, byteLength);
    }

    return ptr;
  }

  baseModule.newArray = newArray;
  /** Gets a view on a typed array in the module's memory by its pointer. */

  function getArray(ctor, ptr) {
    var elementSize = ctor.BYTES_PER_ELEMENT;
    if (!elementSize) throw Error("not a typed array");
    checkMem();
    var buf = U32[ptr >>> 2];
    var byteOffset = U32[ptr + 4 >>> 2];
    var byteLength = U32[ptr + 8 >>> 2];
    return new ctor(buffer, buf + 8 + byteOffset, (byteLength - byteOffset) / elementSize);
  }

  baseModule.getArray = getArray;
  /** Frees a typed array in the module's memory. Must not be accessed anymore afterwards. */

  function freeArray(ptr) {
    checkMem();
    var buf = U32[ptr >>> 2];
    memory_free(buf);
    memory_free(ptr);
  }

  baseModule.freeArray = freeArray;
  /**
   * Creates a new function in the module's table and returns its pointer. Note that only actual
   * WebAssembly functions, i.e. as exported by the module, are supported.
   */

  function newFunction(fn) {
    if (typeof fn.original === "function") fn = fn.original;
    var index = table.length;
    table.grow(1);
    table.set(index, fn);
    return index;
  }

  baseModule.newFunction = newFunction;
  /** Gets a function by its pointer. */

  function getFunction(ptr) {
    return wrapFunction(table.get(ptr), setargc);
  }

  baseModule.getFunction = getFunction; // Pull basic exports to baseModule so code in preInstantiate can use them

  baseModule.memory = baseModule.memory || memory;
  baseModule.table = baseModule.table || table; // Demangle exports and provide the usual utility on the prototype

  return demangle(rawExports, Object.defineProperties(baseModule, {
    I8: {
      get: function get() {
        checkMem();
        return I8;
      }
    },
    U8: {
      get: function get() {
        checkMem();
        return U8;
      }
    },
    I16: {
      get: function get() {
        checkMem();
        return I16;
      }
    },
    U16: {
      get: function get() {
        checkMem();
        return U16;
      }
    },
    I32: {
      get: function get() {
        checkMem();
        return I32;
      }
    },
    U32: {
      get: function get() {
        checkMem();
        return U32;
      }
    },
    I64: {
      get: function get() {
        checkMem();
        return I64;
      }
    },
    U64: {
      get: function get() {
        checkMem();
        return U64;
      }
    },
    F32: {
      get: function get() {
        checkMem();
        return F32;
      }
    },
    F64: {
      get: function get() {
        checkMem();
        return F64;
      }
    }
  }));
}
/** Wraps a WebAssembly function while also taking care of variable arguments. */


function wrapFunction(fn, setargc) {
  var wrap = function wrap() {
    setargc(arguments.length);
    return fn.apply(void 0, arguments);
  }; // adding a function to the table with `newFunction` is limited to actual WebAssembly functions,
  // hence we can't use the wrapper and instead need to provide a reference to the original


  wrap.original = fn;
  return wrap;
}
/** Instantiates an AssemblyScript module using the specified imports. */


function instantiate(module, imports) {
  return postInstantiate(preInstantiate(imports || (imports = {})), new WebAssembly.Instance(module, imports));
}

exports.instantiate = instantiate;
/** Instantiates an AssemblyScript module from a buffer using the specified imports. */

function instantiateBuffer(buffer, imports) {
  return instantiate(new WebAssembly.Module(buffer), imports);
}

exports.instantiateBuffer = instantiateBuffer;
/** Instantiates an AssemblyScript module from a response using the specified imports. */

function instantiateStreaming(_x, _x2) {
  return _instantiateStreaming.apply(this, arguments);
}

function _instantiateStreaming() {
  _instantiateStreaming = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(response, imports) {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.t0 = postInstantiate;
            _context.t1 = preInstantiate(imports || (imports = {}));
            _context.next = 4;
            return WebAssembly.instantiateStreaming(response, imports);

          case 4:
            _context.t2 = _context.sent.instance;
            return _context.abrupt("return", (0, _context.t0)(_context.t1, _context.t2));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _instantiateStreaming.apply(this, arguments);
}

exports.instantiateStreaming = instantiateStreaming;
/** Demangles an AssemblyScript module's exports to a friendly object structure. */

function demangle(exports, baseModule) {
  var module = baseModule ? Object.create(baseModule) : {};

  var setargc = exports._setargc || function () {};

  function hasOwnProperty(elem, prop) {
    return Object.prototype.hasOwnProperty.call(elem, prop);
  }

  var _loop = function _loop(internalName) {
    if (!hasOwnProperty(exports, internalName)) return "continue";
    var elem = exports[internalName];
    var parts = internalName.split(".");
    var curr = module;

    while (parts.length > 1) {
      var part = parts.shift();
      if (!hasOwnProperty(curr, part)) curr[part] = {};
      curr = curr[part];
    }

    var name = parts[0];
    var hash = name.indexOf("#");

    if (hash >= 0) {
      var className = name.substring(0, hash);
      var classElem = curr[className];

      if (typeof classElem === "undefined" || !classElem.prototype) {
        var ctor = function ctor() {
          var _ctor$prototype;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return ctor.wrap((_ctor$prototype = ctor.prototype).constructor.apply(_ctor$prototype, [0].concat(args)));
        };

        ctor.prototype = {};

        ctor.wrap = function (thisValue) {
          return Object.create(ctor.prototype, _defineProperty({}, thisPtr, {
            value: thisValue,
            writable: false
          }));
        };

        if (classElem) Object.getOwnPropertyNames(classElem).forEach(function (name) {
          return Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name));
        });
        curr[className] = ctor;
      }

      name = name.substring(hash + 1);
      curr = curr[className].prototype;

      if (/^(get|set):/.test(name)) {
        if (!hasOwnProperty(curr, name = name.substring(4))) {
          var getter = exports[internalName.replace("set:", "get:")];
          var setter = exports[internalName.replace("get:", "set:")];
          Object.defineProperty(curr, name, {
            get: function get() {
              return getter(this[thisPtr]);
            },
            set: function set(value) {
              setter(this[thisPtr], value);
            },
            enumerable: true
          });
        }
      } else {
        if (name === 'constructor') {
          curr[name] = wrapFunction(elem, setargc);
        } else {
          // for methods
          Object.defineProperty(curr, name, {
            value: function value() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }

              setargc(args.length);
              return elem.apply(void 0, [this[thisPtr]].concat(args));
            }
          });
        }
      }
    } else {
      if (/^(get|set):/.test(name)) {
        if (!hasOwnProperty(curr, name = name.substring(4))) {
          Object.defineProperty(curr, name, {
            get: exports[internalName.replace("set:", "get:")],
            set: exports[internalName.replace("get:", "set:")],
            enumerable: true
          });
        }
      } else if (typeof elem === "function") {
        curr[name] = wrapFunction(elem, setargc);
      } else {
        curr[name] = elem;
      }
    }
  };

  for (var internalName in exports) {
    var _ret = _loop(internalName);

    if (_ret === "continue") continue;
  }

  return module;
}

exports.demangle = demangle;

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var errCode = __webpack_require__(2); // make sure the content only emits buffer-a-likes


function validateChunks(_x) {
  return _validateChunks.apply(this, arguments);
}

function _validateChunks() {
  _validateChunks = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(source) {
    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, content;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 2;
            _iterator = _asyncIterator(source);

          case 4:
            _context.next = 6;
            return _awaitAsyncGenerator(_iterator.next());

          case 6:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 10;
            return _awaitAsyncGenerator(_step.value);

          case 10:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 30;
              break;
            }

            content = _value;

            if (!(content.length === undefined)) {
              _context.next = 15;
              break;
            }

            throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');

          case 15:
            if (!(typeof content === 'string' || content instanceof String)) {
              _context.next = 20;
              break;
            }

            _context.next = 18;
            return Buffer.from(content, 'utf8');

          case 18:
            _context.next = 27;
            break;

          case 20:
            if (!Array.isArray(content)) {
              _context.next = 25;
              break;
            }

            _context.next = 23;
            return Buffer.from(content);

          case 23:
            _context.next = 27;
            break;

          case 25:
            _context.next = 27;
            return content;

          case 27:
            _iteratorNormalCompletion = true;
            _context.next = 4;
            break;

          case 30:
            _context.next = 36;
            break;

          case 32:
            _context.prev = 32;
            _context.t0 = _context["catch"](2);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 36:
            _context.prev = 36;
            _context.prev = 37;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 41;
              break;
            }

            _context.next = 41;
            return _awaitAsyncGenerator(_iterator["return"]());

          case 41:
            _context.prev = 41;

            if (!_didIteratorError) {
              _context.next = 44;
              break;
            }

            throw _iteratorError;

          case 44:
            return _context.finish(41);

          case 45:
            return _context.finish(36);

          case 46:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 32, 36, 46], [37,, 41, 45]]);
  }));
  return _validateChunks.apply(this, arguments);
}

module.exports = validateChunks;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var DirFlat = __webpack_require__(286);

var flatToShard = __webpack_require__(287);

var Dir = __webpack_require__(56);

var toPathComponents = __webpack_require__(288);

var errCode = __webpack_require__(2);

var first = __webpack_require__(289);

function addToTree(_x4, _x5, _x6) {
  return _addToTree.apply(this, arguments);
}

function _addToTree() {
  _addToTree = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(elem, tree, options) {
    var pathElems, lastIndex, parent, currentPath, i, pathElem, last, dir;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            pathElems = toPathComponents(elem.path || '');
            lastIndex = pathElems.length - 1;
            parent = tree;
            currentPath = '';
            i = 0;

          case 5:
            if (!(i < pathElems.length)) {
              _context2.next = 30;
              break;
            }

            pathElem = pathElems[i];
            currentPath += "".concat(currentPath ? '/' : '').concat(pathElem);
            last = i === lastIndex;
            parent.dirty = true;
            parent.cid = null;
            parent.size = null;

            if (!last) {
              _context2.next = 20;
              break;
            }

            _context2.next = 15;
            return parent.put(pathElem, elem);

          case 15:
            _context2.next = 17;
            return flatToShard(null, parent, options.shardSplitThreshold, options);

          case 17:
            tree = _context2.sent;
            _context2.next = 27;
            break;

          case 20:
            _context2.next = 22;
            return parent.get(pathElem);

          case 22:
            dir = _context2.sent;

            if (!dir || !(dir instanceof Dir)) {
              dir = new DirFlat({
                dir: true,
                parent: parent,
                parentKey: pathElem,
                path: currentPath,
                dirty: true,
                flat: true
              }, options);
            }

            _context2.next = 26;
            return parent.put(pathElem, dir);

          case 26:
            parent = dir;

          case 27:
            i++;
            _context2.next = 5;
            break;

          case 30:
            return _context2.abrupt("return", tree);

          case 31:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _addToTree.apply(this, arguments);
}

function treeBuilder(_x, _x2, _x3) {
  return _treeBuilder.apply(this, arguments);
}

function _treeBuilder() {
  _treeBuilder = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(source, ipld, options) {
    var tree, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry, unwrapped, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, _entry;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            tree = new DirFlat({
              root: true,
              dir: true,
              path: '',
              dirty: true,
              flat: true
            }, options);
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 3;
            _iterator = _asyncIterator(source);

          case 5:
            _context.next = 7;
            return _awaitAsyncGenerator(_iterator.next());

          case 7:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 11;
            return _awaitAsyncGenerator(_step.value);

          case 11:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 22;
              break;
            }

            entry = _value;
            _context.next = 16;
            return _awaitAsyncGenerator(addToTree(entry, tree, options));

          case 16:
            tree = _context.sent;
            _context.next = 19;
            return entry;

          case 19:
            _iteratorNormalCompletion = true;
            _context.next = 5;
            break;

          case 22:
            _context.next = 28;
            break;

          case 24:
            _context.prev = 24;
            _context.t0 = _context["catch"](3);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 28:
            _context.prev = 28;
            _context.prev = 29;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 33;
              break;
            }

            _context.next = 33;
            return _awaitAsyncGenerator(_iterator["return"]());

          case 33:
            _context.prev = 33;

            if (!_didIteratorError) {
              _context.next = 36;
              break;
            }

            throw _iteratorError;

          case 36:
            return _context.finish(33);

          case 37:
            return _context.finish(28);

          case 38:
            if (!tree) {
              _context.next = 84;
              break;
            }

            if (options.wrapWithDirectory) {
              _context.next = 48;
              break;
            }

            if (!(tree.childCount() > 1)) {
              _context.next = 42;
              break;
            }

            throw errCode(new Error('detected more than one root'), 'ERR_MORE_THAN_ONE_ROOT');

          case 42:
            _context.next = 44;
            return _awaitAsyncGenerator(first(tree.eachChildSeries()));

          case 44:
            unwrapped = _context.sent;

            if (unwrapped) {
              _context.next = 47;
              break;
            }

            return _context.abrupt("return");

          case 47:
            tree = unwrapped.child;

          case 48:
            if (tree.dir) {
              _context.next = 50;
              break;
            }

            return _context.abrupt("return");

          case 50:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _context.prev = 52;
            _iterator2 = _asyncIterator(tree.flush(tree.path, ipld));

          case 54:
            _context.next = 56;
            return _awaitAsyncGenerator(_iterator2.next());

          case 56:
            _step2 = _context.sent;
            _iteratorNormalCompletion2 = _step2.done;
            _context.next = 60;
            return _awaitAsyncGenerator(_step2.value);

          case 60:
            _value2 = _context.sent;

            if (_iteratorNormalCompletion2) {
              _context.next = 68;
              break;
            }

            _entry = _value2;
            _context.next = 65;
            return _entry;

          case 65:
            _iteratorNormalCompletion2 = true;
            _context.next = 54;
            break;

          case 68:
            _context.next = 74;
            break;

          case 70:
            _context.prev = 70;
            _context.t1 = _context["catch"](52);
            _didIteratorError2 = true;
            _iteratorError2 = _context.t1;

          case 74:
            _context.prev = 74;
            _context.prev = 75;

            if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
              _context.next = 79;
              break;
            }

            _context.next = 79;
            return _awaitAsyncGenerator(_iterator2["return"]());

          case 79:
            _context.prev = 79;

            if (!_didIteratorError2) {
              _context.next = 82;
              break;
            }

            throw _iteratorError2;

          case 82:
            return _context.finish(79);

          case 83:
            return _context.finish(74);

          case 84:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 24, 28, 38], [29,, 33, 37], [52, 70, 74, 84], [75,, 79, 83]]);
  }));
  return _treeBuilder.apply(this, arguments);
}

module.exports = treeBuilder;

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var _require = __webpack_require__(13),
    DAGLink = _require.DAGLink,
    DAGNode = _require.DAGNode;

var UnixFS = __webpack_require__(6);

var Dir = __webpack_require__(56);

var persist = __webpack_require__(35);

var DirFlat =
/*#__PURE__*/
function (_Dir) {
  _inherits(DirFlat, _Dir);

  function DirFlat(props, options) {
    var _this2;

    _classCallCheck(this, DirFlat);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DirFlat).call(this, props, options));
    _this2._children = {};
    return _this2;
  }

  _createClass(DirFlat, [{
    key: "put",
    value: function put(name, value) {
      this.cid = undefined;
      this.size = undefined;
      this._children[name] = value;
    }
  }, {
    key: "get",
    value: function get(name) {
      return this._children[name];
    }
  }, {
    key: "childCount",
    value: function childCount() {
      return Object.keys(this._children).length;
    }
  }, {
    key: "directChildrenCount",
    value: function directChildrenCount() {
      return this.childCount();
    }
  }, {
    key: "onlyChild",
    value: function onlyChild() {
      return this._children[Object.keys(this._children)[0]];
    }
  }, {
    key: "eachChildSeries",
    value:
    /*#__PURE__*/
    _regenerator["default"].mark(function eachChildSeries() {
      var keys, i, key;
      return _regenerator["default"].wrap(function eachChildSeries$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              keys = Object.keys(this._children);
              i = 0;

            case 2:
              if (!(i < keys.length)) {
                _context.next = 9;
                break;
              }

              key = keys[i];
              _context.next = 6;
              return {
                key: key,
                child: this._children[key]
              };

            case 6:
              i++;
              _context.next = 2;
              break;

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, eachChildSeries, this);
    })
  }, {
    key: "flush",
    value: function flush(path, ipld) {
      var _this = this;

      return _wrapAsyncGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var children, links, i, child, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry, unixfs, node, cid;

        return _regenerator["default"].wrap(function _callee$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                children = Object.keys(_this._children);
                links = [];
                i = 0;

              case 3:
                if (!(i < children.length)) {
                  _context2.next = 45;
                  break;
                }

                child = _this._children[children[i]];

                if (!(typeof child.flush === 'function')) {
                  _context2.next = 41;
                  break;
                }

                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _context2.prev = 8;
                _iterator = _asyncIterator(child.flush(child.path, ipld));

              case 10:
                _context2.next = 12;
                return _awaitAsyncGenerator(_iterator.next());

              case 12:
                _step = _context2.sent;
                _iteratorNormalCompletion = _step.done;
                _context2.next = 16;
                return _awaitAsyncGenerator(_step.value);

              case 16:
                _value = _context2.sent;

                if (_iteratorNormalCompletion) {
                  _context2.next = 25;
                  break;
                }

                entry = _value;
                child = entry;
                _context2.next = 22;
                return child;

              case 22:
                _iteratorNormalCompletion = true;
                _context2.next = 10;
                break;

              case 25:
                _context2.next = 31;
                break;

              case 27:
                _context2.prev = 27;
                _context2.t0 = _context2["catch"](8);
                _didIteratorError = true;
                _iteratorError = _context2.t0;

              case 31:
                _context2.prev = 31;
                _context2.prev = 32;

                if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
                  _context2.next = 36;
                  break;
                }

                _context2.next = 36;
                return _awaitAsyncGenerator(_iterator["return"]());

              case 36:
                _context2.prev = 36;

                if (!_didIteratorError) {
                  _context2.next = 39;
                  break;
                }

                throw _iteratorError;

              case 39:
                return _context2.finish(36);

              case 40:
                return _context2.finish(31);

              case 41:
                links.push(new DAGLink(children[i], child.node.length || child.node.size, child.cid));

              case 42:
                i++;
                _context2.next = 3;
                break;

              case 45:
                unixfs = new UnixFS('directory');
                node = DAGNode.create(unixfs.marshal(), links);
                _context2.next = 49;
                return _awaitAsyncGenerator(persist(node, ipld, _this.options));

              case 49:
                cid = _context2.sent;
                _this.cid = cid;
                _this.size = node.size;
                _context2.next = 54;
                return {
                  cid: cid,
                  unixfs: unixfs,
                  path: path,
                  node: node
                };

              case 54:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee, null, [[8, 27, 31, 41], [32,, 36, 40]]);
      }))();
    }
  }]);

  return DirFlat;
}(Dir);

module.exports = DirFlat;

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var DirSharded = __webpack_require__(34);

module.exports =
/*#__PURE__*/
function () {
  var _flatToShard = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(child, dir, threshold, options) {
    var newDir, parent;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            newDir = dir;

            if (!(dir.flat && dir.directChildrenCount() >= threshold)) {
              _context.next = 5;
              break;
            }

            _context.next = 4;
            return convertToShard(dir, options);

          case 4:
            newDir = _context.sent;

          case 5:
            parent = newDir.parent;

            if (!parent) {
              _context.next = 13;
              break;
            }

            if (!(newDir !== dir)) {
              _context.next = 11;
              break;
            }

            if (child) {
              child.parent = newDir;
            }

            _context.next = 11;
            return parent.put(newDir.parentKey, newDir);

          case 11:
            if (!parent) {
              _context.next = 13;
              break;
            }

            return _context.abrupt("return", flatToShard(newDir, parent, threshold, options));

          case 13:
            return _context.abrupt("return", newDir);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  function flatToShard(_x, _x2, _x3, _x4) {
    return _flatToShard.apply(this, arguments);
  }

  return flatToShard;
}();

function convertToShard(_x5, _x6) {
  return _convertToShard.apply(this, arguments);
}

function _convertToShard() {
  _convertToShard = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(oldDir, options) {
    var newDir, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, key, child;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            newDir = new DirSharded({
              root: oldDir.root,
              dir: true,
              parent: oldDir.parent,
              parentKey: oldDir.parentKey,
              path: oldDir.path,
              dirty: oldDir.dirty,
              flat: false
            }, options);
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context2.prev = 3;
            _iterator = _asyncIterator(oldDir.eachChildSeries());

          case 5:
            _context2.next = 7;
            return _iterator.next();

          case 7:
            _step = _context2.sent;
            _iteratorNormalCompletion = _step.done;
            _context2.next = 11;
            return _step.value;

          case 11:
            _value = _context2.sent;

            if (_iteratorNormalCompletion) {
              _context2.next = 19;
              break;
            }

            _value2 = _value, key = _value2.key, child = _value2.child;
            _context2.next = 16;
            return newDir.put(key, child);

          case 16:
            _iteratorNormalCompletion = true;
            _context2.next = 5;
            break;

          case 19:
            _context2.next = 25;
            break;

          case 21:
            _context2.prev = 21;
            _context2.t0 = _context2["catch"](3);
            _didIteratorError = true;
            _iteratorError = _context2.t0;

          case 25:
            _context2.prev = 25;
            _context2.prev = 26;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context2.next = 30;
              break;
            }

            _context2.next = 30;
            return _iterator["return"]();

          case 30:
            _context2.prev = 30;

            if (!_didIteratorError) {
              _context2.next = 33;
              break;
            }

            throw _iteratorError;

          case 33:
            return _context2.finish(30);

          case 34:
            return _context2.finish(25);

          case 35:
            return _context2.abrupt("return", newDir);

          case 36:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[3, 21, 25, 35], [26,, 30, 34]]);
  }));
  return _convertToShard.apply(this, arguments);
}

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toPathComponents = function toPathComponents() {
  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  // split on / unless escaped with \
  return (path.trim().match(/([^\\^/]|\\\/)+/g) || []).filter(Boolean);
};

module.exports = toPathComponents;

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var first =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(iterator) {
    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 2;
            _iterator = _asyncIterator(iterator);

          case 4:
            _context.next = 6;
            return _iterator.next();

          case 6:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 10;
            return _step.value;

          case 10:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 17;
              break;
            }

            entry = _value;
            return _context.abrupt("return", entry);

          case 14:
            _iteratorNormalCompletion = true;
            _context.next = 4;
            break;

          case 17:
            _context.next = 23;
            break;

          case 19:
            _context.prev = 19;
            _context.t0 = _context["catch"](2);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 23:
            _context.prev = 23;
            _context.prev = 24;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 28;
              break;
            }

            _context.next = 28;
            return _iterator["return"]();

          case 28:
            _context.prev = 28;

            if (!_didIteratorError) {
              _context.next = 31;
              break;
            }

            throw _iteratorError;

          case 31:
            return _context.finish(28);

          case 32:
            return _context.finish(23);

          case 33:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 19, 23, 33], [24,, 28, 32]]);
  }));

  return function first(_x) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = first;

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

var errCode = __webpack_require__(2);

var fs = __webpack_require__(291);

var log = __webpack_require__(5)('ipfs:mfs:utils:to-async-iterator');

var _require = __webpack_require__(8),
    MAX_CHUNK_SIZE = _require.MAX_CHUNK_SIZE;

var toAsyncIterator =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(content) {
    var index, iterator;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (content) {
              _context3.next = 2;
              break;
            }

            throw errCode(new Error('paths must start with a leading /'), 'ERR_INVALID_PATH');

          case 2:
            if (!(typeof content === 'string' || content instanceof String)) {
              _context3.next = 5;
              break;
            }

            // Paths, node only
            log('Content was a path');
            return _context3.abrupt("return", fs.createReadStream(content));

          case 5:
            if (!content.length) {
              _context3.next = 8;
              break;
            }

            log('Content was array-like');
            return _context3.abrupt("return", _defineProperty({}, Symbol.asyncIterator, function () {
              var _bufferContent = _wrapAsyncGenerator(
              /*#__PURE__*/
              _regenerator["default"].mark(function _callee() {
                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return content;

                      case 2:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              function bufferContent() {
                return _bufferContent.apply(this, arguments);
              }

              return bufferContent;
            }()));

          case 8:
            if (!content[Symbol.asyncIterator]) {
              _context3.next = 11;
              break;
            }

            log('Content was an async iterator');
            return _context3.abrupt("return", content);

          case 11:
            if (!content[Symbol.iterator]) {
              _context3.next = 14;
              break;
            }

            log('Content was an iterator');
            return _context3.abrupt("return", content);

          case 14:
            if (!(global.Blob && content instanceof global.Blob)) {
              _context3.next = 19;
              break;
            }

            // HTML5 Blob objects (including Files)
            log('Content was an HTML5 Blob');
            index = 0;
            iterator = {
              next: function () {
                var _next2 = _asyncToGenerator(
                /*#__PURE__*/
                _regenerator["default"].mark(function _callee2() {
                  return _regenerator["default"].wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          if (!(index > content.size)) {
                            _context2.next = 2;
                            break;
                          }

                          return _context2.abrupt("return", {
                            done: true
                          });

                        case 2:
                          return _context2.abrupt("return", new Promise(function (resolve, reject) {
                            var chunk = content.slice(index, MAX_CHUNK_SIZE);
                            index += MAX_CHUNK_SIZE;
                            var reader = new global.FileReader();

                            var handleLoad = function handleLoad(ev) {
                              reader.removeEventListener('loadend', handleLoad, false);

                              if (ev.error) {
                                return reject(ev.error);
                              }

                              resolve({
                                done: false,
                                value: Buffer.from(reader.result)
                              });
                            };

                            reader.addEventListener('loadend', handleLoad);
                            reader.readAsArrayBuffer(chunk);
                          }));

                        case 3:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }));

                function next() {
                  return _next2.apply(this, arguments);
                }

                return next;
              }()
            };
            return _context3.abrupt("return", _defineProperty({}, Symbol.asyncIterator, function () {
              return iterator;
            }));

          case 19:
            throw errCode(new Error("Don't know how to convert ".concat(content, " into an async iterator")), 'ERR_INVALID_PARAMS');

          case 20:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function toAsyncIterator(_x) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = toAsyncIterator;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4), __webpack_require__(1).Buffer))

/***/ }),
/* 291 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var exporter = __webpack_require__(20);

var applyDefaultOptions = __webpack_require__(10);

var toMfsPath = __webpack_require__(17);

var errCode = __webpack_require__(2);

var defaultOptions = {
  offset: 0,
  length: Infinity
};

module.exports = function (context) {
  return function mfsRead(path) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    options = applyDefaultOptions(options, defaultOptions);
    return _defineProperty({}, Symbol.asyncIterator, function () {
      var _read = _wrapAsyncGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var mfsPath, result, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, buf;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _awaitAsyncGenerator(toMfsPath(context, path));

              case 2:
                mfsPath = _context.sent;
                _context.next = 5;
                return _awaitAsyncGenerator(exporter(mfsPath.mfsPath, context.ipld));

              case 5:
                result = _context.sent;

                if (!(result.unixfs.type !== 'file')) {
                  _context.next = 8;
                  break;
                }

                throw errCode(new Error("".concat(path, " was not a file")), 'ERR_NOT_FILE');

              case 8:
                if (result.content) {
                  _context.next = 10;
                  break;
                }

                throw errCode(new Error("Could not load content stream from ".concat(path)), 'ERR_NO_CONTENT');

              case 10:
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _context.prev = 12;
                _iterator = _asyncIterator(result.content({
                  offset: options.offset,
                  length: options.length
                }));

              case 14:
                _context.next = 16;
                return _awaitAsyncGenerator(_iterator.next());

              case 16:
                _step = _context.sent;
                _iteratorNormalCompletion = _step.done;
                _context.next = 20;
                return _awaitAsyncGenerator(_step.value);

              case 20:
                _value = _context.sent;

                if (_iteratorNormalCompletion) {
                  _context.next = 28;
                  break;
                }

                buf = _value;
                _context.next = 25;
                return buf;

              case 25:
                _iteratorNormalCompletion = true;
                _context.next = 14;
                break;

              case 28:
                _context.next = 34;
                break;

              case 30:
                _context.prev = 30;
                _context.t0 = _context["catch"](12);
                _didIteratorError = true;
                _iteratorError = _context.t0;

              case 34:
                _context.prev = 34;
                _context.prev = 35;

                if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
                  _context.next = 39;
                  break;
                }

                _context.next = 39;
                return _awaitAsyncGenerator(_iterator["return"]());

              case 39:
                _context.prev = 39;

                if (!_didIteratorError) {
                  _context.next = 42;
                  break;
                }

                throw _iteratorError;

              case 42:
                return _context.finish(39);

              case 43:
                return _context.finish(34);

              case 44:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[12, 30, 34, 44], [35,, 39, 43]]);
      }));

      function read() {
        return _read.apply(this, arguments);
      }

      return read;
    }());
  };
};

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var exporter = __webpack_require__(20);

var applyDefaultOptions = __webpack_require__(10);

var toMfsPath = __webpack_require__(17);

var _require = __webpack_require__(8),
    FILE_SEPARATOR = _require.FILE_SEPARATOR,
    FILE_TYPES = _require.FILE_TYPES;

var defaultOptions = {};

var toOutput = function toOutput(fsEntry) {
  var type = 0;
  var size = fsEntry.node.size || fsEntry.node.length;

  if (fsEntry.unixfs) {
    size = fsEntry.unixfs.fileSize();
    type = FILE_TYPES[fsEntry.unixfs.type];
  }

  return {
    cid: fsEntry.cid,
    name: fsEntry.name,
    type: type,
    size: size
  };
};

module.exports = function (context) {
  return (
    /*#__PURE__*/
    function () {
      var _mfsLs = _wrapAsyncGenerator(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var path,
            options,
            mfsPath,
            fsDir,
            _iteratorNormalCompletion,
            _didIteratorError,
            _iteratorError,
            _iterator,
            _step,
            _value,
            fsEntry,
            _args = arguments;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                path = _args.length > 0 && _args[0] !== undefined ? _args[0] : FILE_SEPARATOR;
                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};

                if (_typeof(path) === 'object' && !(path instanceof String)) {
                  options = path;
                  path = FILE_SEPARATOR;
                }

                options = applyDefaultOptions(options, defaultOptions);
                _context.next = 6;
                return _awaitAsyncGenerator(toMfsPath(context, path));

              case 6:
                mfsPath = _context.sent;
                _context.next = 9;
                return _awaitAsyncGenerator(exporter(mfsPath.mfsPath, context.ipld));

              case 9:
                fsDir = _context.sent;

                if (!(!fsDir.unixfs || !fsDir.unixfs.type.includes('directory'))) {
                  _context.next = 14;
                  break;
                }

                _context.next = 13;
                return toOutput(fsDir);

              case 13:
                return _context.abrupt("return");

              case 14:
                // directory, perhaps sharded
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _context.prev = 16;
                _iterator = _asyncIterator(fsDir.content(options));

              case 18:
                _context.next = 20;
                return _awaitAsyncGenerator(_iterator.next());

              case 20:
                _step = _context.sent;
                _iteratorNormalCompletion = _step.done;
                _context.next = 24;
                return _awaitAsyncGenerator(_step.value);

              case 24:
                _value = _context.sent;

                if (_iteratorNormalCompletion) {
                  _context.next = 32;
                  break;
                }

                fsEntry = _value;
                _context.next = 29;
                return toOutput(fsEntry);

              case 29:
                _iteratorNormalCompletion = true;
                _context.next = 18;
                break;

              case 32:
                _context.next = 38;
                break;

              case 34:
                _context.prev = 34;
                _context.t0 = _context["catch"](16);
                _didIteratorError = true;
                _iteratorError = _context.t0;

              case 38:
                _context.prev = 38;
                _context.prev = 39;

                if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
                  _context.next = 43;
                  break;
                }

                _context.next = 43;
                return _awaitAsyncGenerator(_iterator["return"]());

              case 43:
                _context.prev = 43;

                if (!_didIteratorError) {
                  _context.next = 46;
                  break;
                }

                throw _iteratorError;

              case 46:
                return _context.finish(43);

              case 47:
                return _context.finish(38);

              case 48:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[16, 34, 38, 48], [39,, 43, 47]]);
      }));

      function mfsLs() {
        return _mfsLs.apply(this, arguments);
      }

      return mfsLs;
    }()
  );
};

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var cp = __webpack_require__(295);

var flush = __webpack_require__(296);

var ls = __webpack_require__(297);

var mkdir = __webpack_require__(306);

var mv = __webpack_require__(307);

var read = __webpack_require__(308);

var rm = __webpack_require__(309);

var stat = __webpack_require__(310);

var write = __webpack_require__(311);

module.exports = [cp, flush, ls, mkdir, mv, read, rm, stat, write];

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Joi = __webpack_require__(14);

var mfsCp = {
  method: 'POST',
  path: '/api/v0/files/cp',
  handler: function () {
    var _handler = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(request, h) {
      var ipfs, _request$query, arg, parents, format, hashAlg, shardSplitThreshold, args;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              ipfs = request.server.app.ipfs;
              _request$query = request.query, arg = _request$query.arg, parents = _request$query.parents, format = _request$query.format, hashAlg = _request$query.hashAlg, shardSplitThreshold = _request$query.shardSplitThreshold;
              args = arg.concat({
                parents: parents,
                format: format,
                hashAlg: hashAlg,
                shardSplitThreshold: shardSplitThreshold
              });
              _context.next = 5;
              return ipfs.files.cp.apply(null, args);

            case 5:
              return _context.abrupt("return", h.response());

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function handler(_x, _x2) {
      return _handler.apply(this, arguments);
    }

    return handler;
  }(),
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: Joi.object().keys({
        arg: Joi.array().items(Joi.string()).min(2),
        parents: Joi["boolean"]()["default"](false),
        format: Joi.string().valid(['dag-pb', 'dag-cbor'])["default"]('dag-pb'),
        hashAlg: Joi.string()["default"]('sha2-256')
      })
    }
  }
};
module.exports = mfsCp;

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Joi = __webpack_require__(14);

var mfsFlush = {
  method: 'POST',
  path: '/api/v0/files/flush',
  handler: function () {
    var _handler = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(request, h) {
      var ipfs, arg;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              ipfs = request.server.app.ipfs;
              arg = request.query.arg;
              _context.next = 4;
              return ipfs.files.flush.call(null, arg);

            case 4:
              return _context.abrupt("return", h.response());

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function handler(_x, _x2) {
      return _handler.apply(this, arguments);
    }

    return handler;
  }(),
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: Joi.object().keys({
        arg: Joi.string().required()
      })
    }
  }
};
module.exports = mfsFlush;

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Joi = __webpack_require__(14);

var _require = __webpack_require__(109),
    PassThrough = _require.PassThrough;

var mapEntry = function mapEntry(entry) {
  return {
    Name: entry.name,
    Type: entry.type,
    Size: entry.size,
    Hash: entry.hash
  };
};

var mfsLs = {
  method: 'POST',
  path: '/api/v0/files/ls',
  handler: function () {
    var _handler = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(request, h) {
      var ipfs, _request$query, arg, _long, cidBase, stream, responseStream, files;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              ipfs = request.server.app.ipfs;
              _request$query = request.query, arg = _request$query.arg, _long = _request$query["long"], cidBase = _request$query.cidBase, stream = _request$query.stream;

              if (!stream) {
                _context.next = 7;
                break;
              }

              _context.next = 5;
              return new Promise(function (resolve, reject) {
                var readableStream = ipfs.files.lsReadableStream(arg, {
                  "long": _long,
                  cidBase: cidBase
                });
                var passThrough;
                readableStream.on('data', function (entry) {
                  if (!passThrough) {
                    passThrough = new PassThrough();
                    resolve(passThrough);
                  }

                  passThrough.write(JSON.stringify(mapEntry(entry)) + '\n');
                });
                readableStream.once('end', function (entry) {
                  if (passThrough) {
                    passThrough.end(entry ? JSON.stringify(mapEntry(entry)) + '\n' : undefined);
                  }
                });
                readableStream.once('error', function (error) {
                  reject(error);
                });
              });

            case 5:
              responseStream = _context.sent;
              return _context.abrupt("return", h.response(responseStream).header('X-Stream-Output', '1'));

            case 7:
              _context.next = 9;
              return ipfs.files.ls(arg, {
                "long": _long,
                cidBase: cidBase
              });

            case 9:
              files = _context.sent;
              return _context.abrupt("return", h.response({
                Entries: files.map(mapEntry)
              }));

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function handler(_x, _x2) {
      return _handler.apply(this, arguments);
    }

    return handler;
  }(),
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: Joi.object().keys({
        arg: Joi.string()["default"]('/'),
        "long": Joi["boolean"]()["default"](false),
        cidBase: Joi.string()["default"]('base58btc'),
        stream: Joi["boolean"]()["default"](false)
      }).rename('l', 'long', {
        override: true,
        ignoreUndefined: true
      }).rename('s', 'stream', {
        override: true,
        ignoreUndefined: true
      })
    }
  }
};
module.exports = mfsLs;

/***/ }),
/* 298 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Buffer = __webpack_require__(63).Buffer;

var util = __webpack_require__(300);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = {
      data: v,
      next: null
    };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = {
      data: v,
      next: this.head
    };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;

    while (p = p.next) {
      ret += s + p.data;
    }

    return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;

    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }

    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({
      length: this.length
    });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),
/* 300 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(113);
/*<replacement>*/


var util = __webpack_require__(26);

util.inherits = __webpack_require__(7);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(64);

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(18);

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(62).Transform;

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(62).PassThrough;

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Joi = __webpack_require__(14);

var mfsMkdir = {
  method: 'POST',
  path: '/api/v0/files/mkdir',
  handler: function () {
    var _handler = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(request, h) {
      var ipfs, _request$query, arg, parents, format, hashAlg, cidVersion, flush, shardSplitThreshold;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              ipfs = request.server.app.ipfs;
              _request$query = request.query, arg = _request$query.arg, parents = _request$query.parents, format = _request$query.format, hashAlg = _request$query.hashAlg, cidVersion = _request$query.cidVersion, flush = _request$query.flush, shardSplitThreshold = _request$query.shardSplitThreshold;
              _context.next = 4;
              return ipfs.files.mkdir(arg, {
                parents: parents,
                format: format,
                hashAlg: hashAlg,
                cidVersion: cidVersion,
                flush: flush,
                shardSplitThreshold: shardSplitThreshold
              });

            case 4:
              return _context.abrupt("return", h.response());

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function handler(_x, _x2) {
      return _handler.apply(this, arguments);
    }

    return handler;
  }(),
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: Joi.object().keys({
        arg: Joi.string().required(),
        parents: Joi["boolean"]()["default"](false),
        format: Joi.string().valid(['dag-pb', 'dag-cbor'])["default"]('dag-pb'),
        hashAlg: Joi.string()["default"]('sha2-256'),
        cidVersion: Joi.number().integer().valid([0, 1])["default"](0),
        flush: Joi["boolean"]()["default"](true)
      }).rename('p', 'parents', {
        override: true,
        ignoreUndefined: true
      })
    }
  }
};
module.exports = mfsMkdir;

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Joi = __webpack_require__(14);

var mfsMv = {
  method: 'POST',
  path: '/api/v0/files/mv',
  handler: function () {
    var _handler = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(request, h) {
      var ipfs, _request$query, arg, parents, format, hashAlg, shardSplitThreshold, args;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              ipfs = request.server.app.ipfs;
              _request$query = request.query, arg = _request$query.arg, parents = _request$query.parents, format = _request$query.format, hashAlg = _request$query.hashAlg, shardSplitThreshold = _request$query.shardSplitThreshold;
              args = arg.concat({
                parents: parents,
                format: format,
                hashAlg: hashAlg,
                shardSplitThreshold: shardSplitThreshold
              });
              _context.next = 5;
              return ipfs.files.mv.apply(null, args);

            case 5:
              return _context.abrupt("return", h.response());

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function handler(_x, _x2) {
      return _handler.apply(this, arguments);
    }

    return handler;
  }(),
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: Joi.object().keys({
        arg: Joi.array().items(Joi.string()).min(2),
        parents: Joi["boolean"]()["default"](false),
        format: Joi.string().valid(['dag-pb', 'dag-cbor'])["default"]('dag-pb'),
        hashAlg: Joi.string()["default"]('sha2-256')
      })
    }
  }
};
module.exports = mfsMv;

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Joi = __webpack_require__(14);

var _require = __webpack_require__(109),
    PassThrough = _require.PassThrough;

var mfsRead = {
  method: 'POST',
  path: '/api/v0/files/read',
  handler: function () {
    var _handler = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(request, h) {
      var ipfs, _request$query, arg, offset, length, count, responseStream;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              ipfs = request.server.app.ipfs;
              _request$query = request.query, arg = _request$query.arg, offset = _request$query.offset, length = _request$query.length, count = _request$query.count;
              _context.next = 4;
              return new Promise(function (resolve, reject) {
                var stream = ipfs.files.readReadableStream(arg, {
                  offset: offset,
                  length: length,
                  count: count
                });
                stream.once('data', function (chunk) {
                  var passThrough = new PassThrough();
                  resolve(passThrough);
                  passThrough.write(chunk);
                  stream.pipe(passThrough);
                });
                stream.once('error', function (error) {
                  reject(error);
                });
              });

            case 4:
              responseStream = _context.sent;
              return _context.abrupt("return", h.response(responseStream).header('X-Stream-Output', '1'));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function handler(_x, _x2) {
      return _handler.apply(this, arguments);
    }

    return handler;
  }(),
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: Joi.object().keys({
        arg: Joi.string().required(),
        offset: Joi.number().integer().min(0),
        length: Joi.number().integer().min(0)
      }).rename('o', 'offset', {
        override: true,
        ignoreUndefined: true
      }).rename('n', 'length', {
        override: true,
        ignoreUndefined: true
      })
    }
  }
};
module.exports = mfsRead;

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Joi = __webpack_require__(14);

var mfsRm = {
  method: 'POST',
  path: '/api/v0/files/rm',
  handler: function () {
    var _handler = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(request, h) {
      var ipfs, _request$query, arg, recursive;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              ipfs = request.server.app.ipfs;
              _request$query = request.query, arg = _request$query.arg, recursive = _request$query.recursive;
              _context.next = 4;
              return ipfs.files.rm(arg, {
                recursive: recursive
              });

            case 4:
              return _context.abrupt("return", h.response());

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function handler(_x, _x2) {
      return _handler.apply(this, arguments);
    }

    return handler;
  }(),
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: Joi.object().keys({
        arg: Joi.string().required(),
        recursive: Joi["boolean"]()["default"](false)
      }).rename('r', 'recursive', {
        override: true,
        ignoreUndefined: true
      })
    }
  }
};
module.exports = mfsRm;

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Joi = __webpack_require__(14);

var mfsStat = {
  method: 'POST',
  path: '/api/v0/files/stat',
  handler: function () {
    var _handler = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(request, h) {
      var ipfs, _request$query, arg, hash, size, withLocal, cidBase, stats;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              ipfs = request.server.app.ipfs;
              _request$query = request.query, arg = _request$query.arg, hash = _request$query.hash, size = _request$query.size, withLocal = _request$query.withLocal, cidBase = _request$query.cidBase;
              _context.next = 4;
              return ipfs.files.stat(arg, {
                hash: hash,
                size: size,
                withLocal: withLocal,
                cidBase: cidBase
              });

            case 4:
              stats = _context.sent;
              return _context.abrupt("return", h.response({
                Type: stats.type,
                Blocks: stats.blocks,
                Size: stats.size,
                Hash: stats.hash,
                CumulativeSize: stats.cumulativeSize,
                WithLocality: stats.withLocality,
                Local: stats.local,
                SizeLocal: stats.sizeLocal
              }));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function handler(_x, _x2) {
      return _handler.apply(this, arguments);
    }

    return handler;
  }(),
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: Joi.object().keys({
        arg: Joi.string()["default"]('/'),
        hash: Joi["boolean"]()["default"](false),
        size: Joi["boolean"]()["default"](false),
        withLocal: Joi["boolean"]()["default"](false),
        cidBase: Joi.string()["default"]('base58btc')
      })
    }
  }
};
module.exports = mfsStat;

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var Joi = __webpack_require__(14);

var multipart = __webpack_require__(312);

var Boom = __webpack_require__(115);

var mfsWrite = {
  method: 'POST',
  path: '/api/v0/files/write',
  handler: function () {
    var _handler = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(request, h) {
      var ipfs, _request$query, arg, offset, length, create, truncate, rawLeaves, cidVersion, hashAlg, format, parents, progress, strategy, flush, shardSplitThreshold, files, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              ipfs = request.server.app.ipfs;
              _request$query = request.query, arg = _request$query.arg, offset = _request$query.offset, length = _request$query.length, create = _request$query.create, truncate = _request$query.truncate, rawLeaves = _request$query.rawLeaves, cidVersion = _request$query.cidVersion, hashAlg = _request$query.hashAlg, format = _request$query.format, parents = _request$query.parents, progress = _request$query.progress, strategy = _request$query.strategy, flush = _request$query.flush, shardSplitThreshold = _request$query.shardSplitThreshold;
              files = 0;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _context.prev = 5;
              _iterator = _asyncIterator(multipart(request));

            case 7:
              _context.next = 9;
              return _iterator.next();

            case 9:
              _step = _context.sent;
              _iteratorNormalCompletion = _step.done;
              _context.next = 13;
              return _step.value;

            case 13:
              _value = _context.sent;

              if (_iteratorNormalCompletion) {
                _context.next = 25;
                break;
              }

              entry = _value;

              if (!(entry.type === 'file')) {
                _context.next = 22;
                break;
              }

              files++;

              if (!(files > 1)) {
                _context.next = 20;
                break;
              }

              throw Boom.badRequest('Please only send one file');

            case 20:
              _context.next = 22;
              return ipfs.files.write(arg, entry.content, {
                offset: offset,
                length: length,
                create: create,
                truncate: truncate,
                rawLeaves: rawLeaves,
                cidVersion: cidVersion,
                hashAlg: hashAlg,
                format: format,
                parents: parents,
                progress: progress,
                strategy: strategy,
                flush: flush,
                shardSplitThreshold: shardSplitThreshold
              });

            case 22:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 25:
              _context.next = 31;
              break;

            case 27:
              _context.prev = 27;
              _context.t0 = _context["catch"](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 31:
              _context.prev = 31;
              _context.prev = 32;

              if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
                _context.next = 36;
                break;
              }

              _context.next = 36;
              return _iterator["return"]();

            case 36:
              _context.prev = 36;

              if (!_didIteratorError) {
                _context.next = 39;
                break;
              }

              throw _iteratorError;

            case 39:
              return _context.finish(36);

            case 40:
              return _context.finish(31);

            case 41:
              return _context.abrupt("return", h.response());

            case 42:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[5, 27, 31, 41], [32,, 36, 40]]);
    }));

    function handler(_x, _x2) {
      return _handler.apply(this, arguments);
    }

    return handler;
  }(),
  options: {
    payload: {
      parse: false,
      output: 'stream'
    },
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: Joi.object().keys({
        arg: Joi.string().required(),
        offset: Joi.number().integer().min(0),
        length: Joi.number().integer().min(0),
        create: Joi["boolean"]()["default"](false),
        truncate: Joi["boolean"]()["default"](false),
        rawLeaves: Joi["boolean"]()["default"](false),
        cidVersion: Joi.number().integer().valid([0, 1])["default"](0),
        hashAlg: Joi.string().valid(['sha2-256'])["default"]('sha2-256'),
        format: Joi.string().valid(['dag-pb', 'dag-cbor'])["default"]('dag-pb'),
        parents: Joi["boolean"]()["default"](false),
        progress: Joi.func(),
        strategy: Joi.string().valid(['flat', 'balanced', 'trickle'])["default"]('trickle'),
        flush: Joi["boolean"]()["default"](true)
      }).rename('o', 'offset', {
        override: true,
        ignoreUndefined: true
      }).rename('e', 'create', {
        override: true,
        ignoreUndefined: true
      }).rename('t', 'truncate', {
        override: true,
        ignoreUndefined: true
      })
    }
  }
};
module.exports = mfsWrite;

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var content = __webpack_require__(114);

var parser = __webpack_require__(326);
/**
 * Request Parser
 *
 * @param {Object} req - Request
 * @param {Object} options - Options passed to stream constructors
 * @returns {Object} an async iterable
 */


module.exports = function (req) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  options.boundary = content.type(req.headers['content-type']).boundary;
  return parser(req.payload || req, options);
};

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var internals = {};
module.exports = {
  applyToDefaults: __webpack_require__(314),
  assert: __webpack_require__(23),
  Bench: __webpack_require__(315),
  block: __webpack_require__(316),
  clone: __webpack_require__(65),
  contain: __webpack_require__(317),
  deepEqual: __webpack_require__(121),
  Error: __webpack_require__(116),
  escapeHeaderAttribute: __webpack_require__(318),
  escapeHtml: __webpack_require__(319),
  escapeJson: __webpack_require__(320),
  escapeRegex: __webpack_require__(122),
  flatten: __webpack_require__(321),
  ignore: __webpack_require__(120),
  intersect: __webpack_require__(322),
  merge: __webpack_require__(119),
  once: __webpack_require__(323),
  reach: __webpack_require__(66),
  reachTemplate: __webpack_require__(324),
  stringify: __webpack_require__(117),
  wait: __webpack_require__(325)
};

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Assert = __webpack_require__(23);

var Clone = __webpack_require__(65);

var Merge = __webpack_require__(119);

var Utils = __webpack_require__(42);

var internals = {};

module.exports = function (defaults, source) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Assert(defaults && _typeof(defaults) === 'object', 'Invalid defaults value: must be an object');
  Assert(!source || source === true || _typeof(source) === 'object', 'Invalid source value: must be true, falsy or an object');
  Assert(_typeof(options) === 'object', 'Invalid options: must be an object');

  if (!source) {
    // If no source, return null
    return null;
  }

  if (options.shallow) {
    return internals.applyToDefaultsWithShallow(defaults, source, options);
  }

  var copy = Clone(defaults);

  if (source === true) {
    // If source is set to true, use defaults
    return copy;
  }

  var nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;
  return Merge(copy, source, {
    nullOverride: nullOverride,
    mergeArrays: false
  });
};

internals.applyToDefaultsWithShallow = function (defaults, source, options) {
  var keys = options.shallow;
  Assert(Array.isArray(keys), 'Invalid keys');
  options = Object.assign({}, options);
  options.shallow = false;
  var copy = Clone(defaults, {
    shallow: keys
  });

  if (source === true) {
    // If source is set to true, use defaults
    return copy;
  }

  var storage = Utils.store(source, keys); // Move shallow copy items to storage

  Merge(copy, source, {
    mergeArrays: false,
    nullOverride: false
  }); // Deep copy the rest

  Utils.restore(copy, source, storage); // Shallow copy the stored items and restore

  return copy;
};

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var internals = {};

module.exports = internals.Bench =
/*#__PURE__*/
function () {
  function _class() {
    _classCallCheck(this, _class);

    this.ts = 0;
    this.reset();
  }

  _createClass(_class, [{
    key: "reset",
    value: function reset() {
      this.ts = internals.Bench.now();
    }
  }, {
    key: "elapsed",
    value: function elapsed() {
      return internals.Bench.now() - this.ts;
    }
  }], [{
    key: "now",
    value: function now() {
      var ts = process.hrtime();
      return ts[0] * 1e3 + ts[1] / 1e6;
    }
  }]);

  return _class;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Ignore = __webpack_require__(120);

var internals = {};

module.exports = function () {
  return new Promise(Ignore); // $lab:coverage:ignore$
};

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Assert = __webpack_require__(23);

var DeepEqual = __webpack_require__(121);

var EscapeRegex = __webpack_require__(122);

var Utils = __webpack_require__(42);

var internals = {};

module.exports = function (ref, values) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  // options: { deep, once, only, part, symbols }

  /*
      string -> string(s)
      array -> item(s)
      object -> key(s)
      object -> object (key:value)
  */
  var valuePairs = null;

  if (_typeof(ref) === 'object' && _typeof(values) === 'object' && !Array.isArray(ref) && !Array.isArray(values)) {
    valuePairs = values;
    var symbols = Object.getOwnPropertySymbols(values).filter(Object.prototype.propertyIsEnumerable.bind(values));
    values = [].concat(_toConsumableArray(Object.keys(values)), _toConsumableArray(symbols));
  } else {
    values = [].concat(values);
  }

  Assert(typeof ref === 'string' || _typeof(ref) === 'object', 'Reference must be string or an object');
  Assert(values.length, 'Values array cannot be empty');
  var compare;
  var compareFlags;

  if (options.deep) {
    compare = DeepEqual;
    var hasOnly = options.only !== undefined;
    var hasPart = options.part !== undefined;
    compareFlags = {
      prototype: hasOnly ? options.only : hasPart ? !options.part : false,
      part: hasOnly ? !options.only : hasPart ? options.part : false
    };
  } else {
    compare = function compare(a, b) {
      return a === b;
    };
  }

  var misses = false;
  var matches = new Array(values.length);

  for (var i = 0; i < matches.length; ++i) {
    matches[i] = 0;
  }

  if (typeof ref === 'string') {
    if (ref === '') {
      if (values.length === 1 && values[0] === '' || // '' contains ''
      !options.once && !values.some(function (v) {
        return v !== '';
      })) {
        // '' contains multiple '' if !once
        return true;
      }

      return false;
    }

    var pattern = '(';

    for (var _i = 0; _i < values.length; ++_i) {
      var value = values[_i];
      Assert(typeof value === 'string', 'Cannot compare string reference to non-string value');
      pattern += (_i ? '|' : '') + EscapeRegex(value);
    }

    var regex = new RegExp(pattern + ')', 'g');
    var leftovers = ref.replace(regex, function ($0, $1) {
      var index = values.indexOf($1);
      ++matches[index];
      return ''; // Remove from string
    });
    misses = !!leftovers;
  } else if (Array.isArray(ref)) {
    if (!ref.length) {
      return false;
    }

    var onlyOnce = !!(options.only && options.once);

    if (onlyOnce && ref.length !== values.length) {
      return false;
    }

    for (var _i2 = 0; _i2 < ref.length; ++_i2) {
      var matched = false;

      for (var j = 0; j < values.length && matched === false; ++j) {
        if (!onlyOnce || matches[j] === 0) {
          matched = compare(values[j], ref[_i2], compareFlags) && j;
        }
      }

      if (matched !== false) {
        ++matches[matched];
      } else {
        misses = true;
      }
    }
  } else {
    var keys = Utils.keys(ref, options);

    if (!keys.length) {
      return false;
    }

    for (var _i3 = 0; _i3 < keys.length; ++_i3) {
      var key = keys[_i3];
      var pos = values.indexOf(key);

      if (pos !== -1) {
        if (valuePairs && !compare(valuePairs[key], ref[key], compareFlags)) {
          return false;
        }

        ++matches[pos];
      } else {
        misses = true;
      }
    }
  }

  if (options.only) {
    if (misses || !options.once) {
      return !misses;
    }
  }

  var result = false;

  for (var _i4 = 0; _i4 < matches.length; ++_i4) {
    result = result || !!matches[_i4];

    if (options.once && matches[_i4] > 1 || !options.part && !matches[_i4]) {
      return false;
    }
  }

  return result;
};

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Assert = __webpack_require__(23);

var internals = {};

module.exports = function (attribute) {
  // Allowed value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9, \, "
  Assert(/^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~\"\\]*$/.test(attribute), 'Bad attribute value (' + attribute + ')');
  return attribute.replace(/\\/g, '\\\\').replace(/\"/g, '\\"'); // Escape quotes and slash
};

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var internals = {};

module.exports = function (input) {
  if (!input) {
    return '';
  }

  var escaped = '';

  for (var i = 0; i < input.length; ++i) {
    var charCode = input.charCodeAt(i);

    if (internals.isSafe(charCode)) {
      escaped += input[i];
    } else {
      escaped += internals.escapeHtmlChar(charCode);
    }
  }

  return escaped;
};

internals.escapeHtmlChar = function (charCode) {
  var namedEscape = internals.namedHtml[charCode];

  if (typeof namedEscape !== 'undefined') {
    return namedEscape;
  }

  if (charCode >= 256) {
    return '&#' + charCode + ';';
  }

  var hexValue = charCode.toString(16).padStart(2, '0');
  return "&#x".concat(hexValue, ";");
};

internals.isSafe = function (charCode) {
  return typeof internals.safeCharCodes[charCode] !== 'undefined';
};

internals.namedHtml = {
  '38': '&amp;',
  '60': '&lt;',
  '62': '&gt;',
  '34': '&quot;',
  '160': '&nbsp;',
  '162': '&cent;',
  '163': '&pound;',
  '164': '&curren;',
  '169': '&copy;',
  '174': '&reg;'
};

internals.safeCharCodes = function () {
  var safe = {};

  for (var i = 32; i < 123; ++i) {
    if (i >= 97 || // a-z
    i >= 65 && i <= 90 || // A-Z
    i >= 48 && i <= 57 || // 0-9
    i === 32 || // space
    i === 46 || // .
    i === 44 || // ,
    i === 45 || // -
    i === 58 || // :
    i === 95) {
      // _
      safe[i] = null;
    }
  }

  return safe;
}();

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var internals = {};

module.exports = function (input) {
  if (!input) {
    return '';
  }

  var lessThan = 0x3C;
  var greaterThan = 0x3E;
  var andSymbol = 0x26;
  var lineSeperator = 0x2028; // replace method

  var charCode;
  return input.replace(/[<>&\u2028\u2029]/g, function (match) {
    charCode = match.charCodeAt(0);

    if (charCode === lessThan) {
      return "\\u003c";
    }

    if (charCode === greaterThan) {
      return "\\u003e";
    }

    if (charCode === andSymbol) {
      return "\\u0026";
    }

    if (charCode === lineSeperator) {
      return "\\u2028";
    }

    return "\\u2029";
  });
};

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var internals = {};

module.exports = internals.flatten = function (array, target) {
  var result = target || [];

  for (var i = 0; i < array.length; ++i) {
    if (Array.isArray(array[i])) {
      internals.flatten(array[i], result);
    } else {
      result.push(array[i]);
    }
  }

  return result;
};

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var internals = {};

module.exports = function (array1, array2) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!array1 || !array2) {
    return options.first ? null : [];
  }

  var common = [];
  var hash = Array.isArray(array1) ? new Set(array1) : array1;
  var found = new Set();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = array2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var value = _step.value;

      if (internals.has(hash, value) && !found.has(value)) {
        if (options.first) {
          return value;
        }

        common.push(value);
        found.add(value);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return options.first ? null : common;
};

internals.has = function (ref, key) {
  if (typeof ref.has === 'function') {
    return ref.has(key);
  }

  return ref[key] !== undefined;
};

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var internals = {};

module.exports = function (method) {
  if (method._hoekOnce) {
    return method;
  }

  var once = false;

  var wrapped = function wrapped() {
    if (!once) {
      once = true;
      method.apply(void 0, arguments);
    }
  };

  wrapped._hoekOnce = true;
  return wrapped;
};

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Reach = __webpack_require__(66);

var internals = {};

module.exports = function (obj, template, options) {
  return template.replace(/{([^}]+)}/g, function ($0, chain) {
    var value = Reach(obj, chain, options);
    return value === undefined || value === null ? '' : value;
  });
};

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var internals = {};

module.exports = function (timeout) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, timeout);
  });
};

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var Content = __webpack_require__(114);

var multipart = __webpack_require__(327);

var multipartFormdataType = 'multipart/form-data';
var applicationDirectory = 'application/x-directory';
var applicationSymlink = 'application/symlink';

var isDirectory = function isDirectory(mediatype) {
  return mediatype === multipartFormdataType || mediatype === applicationDirectory;
};

var parseDisposition = function parseDisposition(disposition) {
  var details = {};
  details.type = disposition.split(';')[0];

  if (details.type === 'file' || details.type === 'form-data') {
    var namePattern = / filename="(.[^"]+)"/;
    var matches = disposition.match(namePattern);
    details.name = matches ? matches[1] : '';
  }

  return details;
};

var parseHeader = function parseHeader(header) {
  var type = Content.type(header['content-type']);
  var disposition = parseDisposition(header['content-disposition']);
  var details = type;
  details.name = decodeURIComponent(disposition.name);
  details.type = disposition.type;
  return details;
};

var collect =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(stream) {
    var buffers, size, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, buf;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            buffers = [];
            size = 0;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 4;
            _iterator = _asyncIterator(stream);

          case 6:
            _context.next = 8;
            return _iterator.next();

          case 8:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 12;
            return _step.value;

          case 12:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 20;
              break;
            }

            buf = _value;
            size += buf.length;
            buffers.push(buf);

          case 17:
            _iteratorNormalCompletion = true;
            _context.next = 6;
            break;

          case 20:
            _context.next = 26;
            break;

          case 22:
            _context.prev = 22;
            _context.t0 = _context["catch"](4);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 26:
            _context.prev = 26;
            _context.prev = 27;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 31;
              break;
            }

            _context.next = 31;
            return _iterator["return"]();

          case 31:
            _context.prev = 31;

            if (!_didIteratorError) {
              _context.next = 34;
              break;
            }

            throw _iteratorError;

          case 34:
            return _context.finish(31);

          case 35:
            return _context.finish(26);

          case 36:
            return _context.abrupt("return", Buffer.concat(buffers, size));

          case 37:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 22, 26, 36], [27,, 31, 35]]);
  }));

  return function collect(_x3) {
    return _ref.apply(this, arguments);
  };
}();

var ignore =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(stream) {
    var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, _;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _context2.prev = 2;
            _iterator2 = _asyncIterator(stream);

          case 4:
            _context2.next = 6;
            return _iterator2.next();

          case 6:
            _step2 = _context2.sent;
            _iteratorNormalCompletion2 = _step2.done;
            _context2.next = 10;
            return _step2.value;

          case 10:
            _value2 = _context2.sent;

            if (_iteratorNormalCompletion2) {
              _context2.next = 16;
              break;
            }

            _ = _value2;

          case 13:
            _iteratorNormalCompletion2 = true;
            _context2.next = 4;
            break;

          case 16:
            _context2.next = 22;
            break;

          case 18:
            _context2.prev = 18;
            _context2.t0 = _context2["catch"](2);
            _didIteratorError2 = true;
            _iteratorError2 = _context2.t0;

          case 22:
            _context2.prev = 22;
            _context2.prev = 23;

            if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
              _context2.next = 27;
              break;
            }

            _context2.next = 27;
            return _iterator2["return"]();

          case 27:
            _context2.prev = 27;

            if (!_didIteratorError2) {
              _context2.next = 30;
              break;
            }

            throw _iteratorError2;

          case 30:
            return _context2.finish(27);

          case 31:
            return _context2.finish(22);

          case 32:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[2, 18, 22, 32], [23,, 27, 31]]);
  }));

  return function ignore(_x4) {
    return _ref2.apply(this, arguments);
  };
}();

function parser(_x, _x2) {
  return _parser.apply(this, arguments);
}

function _parser() {
  _parser = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(stream, options) {
    var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, part, partHeader, target, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _value4, entry;

    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _context3.prev = 2;
            _iterator3 = _asyncIterator(multipart(stream, options.boundary));

          case 4:
            _context3.next = 6;
            return _awaitAsyncGenerator(_iterator3.next());

          case 6:
            _step3 = _context3.sent;
            _iteratorNormalCompletion3 = _step3.done;
            _context3.next = 10;
            return _awaitAsyncGenerator(_step3.value);

          case 10:
            _value3 = _context3.sent;

            if (_iteratorNormalCompletion3) {
              _context3.next = 68;
              break;
            }

            part = _value3;
            partHeader = parseHeader(part.headers);

            if (!isDirectory(partHeader.mime)) {
              _context3.next = 20;
              break;
            }

            _context3.next = 17;
            return {
              type: 'directory',
              name: partHeader.name
            };

          case 17:
            _context3.next = 19;
            return _awaitAsyncGenerator(ignore(part.body));

          case 19:
            return _context3.abrupt("continue", 65);

          case 20:
            if (!(partHeader.mime === applicationSymlink)) {
              _context3.next = 27;
              break;
            }

            _context3.next = 23;
            return _awaitAsyncGenerator(collect(part.body));

          case 23:
            target = _context3.sent;
            _context3.next = 26;
            return {
              type: 'symlink',
              name: partHeader.name,
              target: target.toString('utf8')
            };

          case 26:
            return _context3.abrupt("continue", 65);

          case 27:
            if (!partHeader.boundary) {
              _context3.next = 63;
              break;
            }

            // recursively parse nested multiparts
            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _context3.prev = 30;
            _iterator4 = _asyncIterator(parser(part, _objectSpread({}, options, {
              boundary: partHeader.boundary
            })));

          case 32:
            _context3.next = 34;
            return _awaitAsyncGenerator(_iterator4.next());

          case 34:
            _step4 = _context3.sent;
            _iteratorNormalCompletion4 = _step4.done;
            _context3.next = 38;
            return _awaitAsyncGenerator(_step4.value);

          case 38:
            _value4 = _context3.sent;

            if (_iteratorNormalCompletion4) {
              _context3.next = 46;
              break;
            }

            entry = _value4;
            _context3.next = 43;
            return entry;

          case 43:
            _iteratorNormalCompletion4 = true;
            _context3.next = 32;
            break;

          case 46:
            _context3.next = 52;
            break;

          case 48:
            _context3.prev = 48;
            _context3.t0 = _context3["catch"](30);
            _didIteratorError4 = true;
            _iteratorError4 = _context3.t0;

          case 52:
            _context3.prev = 52;
            _context3.prev = 53;

            if (!(!_iteratorNormalCompletion4 && _iterator4["return"] != null)) {
              _context3.next = 57;
              break;
            }

            _context3.next = 57;
            return _awaitAsyncGenerator(_iterator4["return"]());

          case 57:
            _context3.prev = 57;

            if (!_didIteratorError4) {
              _context3.next = 60;
              break;
            }

            throw _iteratorError4;

          case 60:
            return _context3.finish(57);

          case 61:
            return _context3.finish(52);

          case 62:
            return _context3.abrupt("continue", 65);

          case 63:
            _context3.next = 65;
            return {
              type: 'file',
              name: partHeader.name,
              content: part.body
            };

          case 65:
            _iteratorNormalCompletion3 = true;
            _context3.next = 4;
            break;

          case 68:
            _context3.next = 74;
            break;

          case 70:
            _context3.prev = 70;
            _context3.t1 = _context3["catch"](2);
            _didIteratorError3 = true;
            _iteratorError3 = _context3.t1;

          case 74:
            _context3.prev = 74;
            _context3.prev = 75;

            if (!(!_iteratorNormalCompletion3 && _iterator3["return"] != null)) {
              _context3.next = 79;
              break;
            }

            _context3.next = 79;
            return _awaitAsyncGenerator(_iterator3["return"]());

          case 79:
            _context3.prev = 79;

            if (!_didIteratorError3) {
              _context3.next = 82;
              break;
            }

            throw _iteratorError3;

          case 82:
            return _context3.finish(79);

          case 83:
            return _context3.finish(74);

          case 84:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[2, 70, 74, 84], [30, 48, 52, 62], [53,, 57, 61], [75,, 79, 83]]);
  }));
  return _parser.apply(this, arguments);
}

module.exports = parser;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _regenerator = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen["return"] !== "function") { this["return"] = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype["throw"] = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype["return"] = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var bIndexOf = __webpack_require__(328);

var parseHeaders = __webpack_require__(329);

module.exports = multipart;

function multipart(_x, _x2) {
  return _multipart.apply(this, arguments);
} // yield chunks of buffer until a the needle is reached. consume the needle without yielding it


function _multipart() {
  _multipart = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(stream, boundary) {
    var headerEnd, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk, headers, result, part;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!boundary) {
              boundary = stream.headers['content-type'].split('boundary=')[1].trim();
            }

            boundary = "--".concat(boundary);
            headerEnd = Buffer.from('\r\n\r\n'); // allow pushing data back into stream

            stream = prefixStream(stream); // consume initial boundary

            _context.next = 6;
            return _awaitAsyncGenerator(consumeUntilAfter(stream, Buffer.from(boundary)));

          case 6:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 8;
            _iterator = _asyncIterator(stream);

          case 10:
            _context.next = 12;
            return _awaitAsyncGenerator(_iterator.next());

          case 12:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 16;
            return _awaitAsyncGenerator(_step.value);

          case 16:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 34;
              break;
            }

            chunk = _value;
            stream.push(chunk);
            _context.next = 22;
            return _awaitAsyncGenerator(collect(yieldUntilAfter(stream, headerEnd)));

          case 22:
            headers = _context.sent.toString();

            if (!(headers === '--\r\n')) {
              _context.next = 25;
              break;
            }

            return _context.abrupt("return");

          case 25:
            // wait for this part's body to be consumed before we try reading the next one
            result = waitForStreamToBeConsumed(yieldUntilAfter(stream, Buffer.from("\r\n".concat(boundary))));
            part = {
              headers: parseHeaders(headers),
              body: result.iterator // body: yieldUntilAfter(stream, Buffer.from(`\r\n${boundary}`))

            };
            _context.next = 29;
            return part;

          case 29:
            _context.next = 31;
            return _awaitAsyncGenerator(result.complete);

          case 31:
            _iteratorNormalCompletion = true;
            _context.next = 10;
            break;

          case 34:
            _context.next = 40;
            break;

          case 36:
            _context.prev = 36;
            _context.t0 = _context["catch"](8);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 40:
            _context.prev = 40;
            _context.prev = 41;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 45;
              break;
            }

            _context.next = 45;
            return _awaitAsyncGenerator(_iterator["return"]());

          case 45:
            _context.prev = 45;

            if (!_didIteratorError) {
              _context.next = 48;
              break;
            }

            throw _iteratorError;

          case 48:
            return _context.finish(45);

          case 49:
            return _context.finish(40);

          case 50:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[8, 36, 40, 50], [41,, 45, 49]]);
  }));
  return _multipart.apply(this, arguments);
}

function yieldUntilAfter(_x3, _x4) {
  return _yieldUntilAfter.apply(this, arguments);
}

function _yieldUntilAfter() {
  _yieldUntilAfter = _wrapAsyncGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(haystack, needle) {
    var buffer, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, chunk, index;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            buffer = Buffer.alloc(0);
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _context2.prev = 3;
            _iterator2 = _asyncIterator(haystack);

          case 5:
            _context2.next = 7;
            return _awaitAsyncGenerator(_iterator2.next());

          case 7:
            _step2 = _context2.sent;
            _iteratorNormalCompletion2 = _step2.done;
            _context2.next = 11;
            return _awaitAsyncGenerator(_step2.value);

          case 11:
            _value2 = _context2.sent;

            if (_iteratorNormalCompletion2) {
              _context2.next = 29;
              break;
            }

            chunk = _value2;
            buffer = Buffer.concat([buffer, chunk], buffer.length + chunk.length); // slow

            index = bIndexOf(buffer, needle);

            if (!(index !== -1)) {
              _context2.next = 22;
              break;
            }

            if (!(index > 0)) {
              _context2.next = 20;
              break;
            }

            _context2.next = 20;
            return buffer.slice(0, index);

          case 20:
            // consume needle but preserve rest of chunk
            haystack.push(buffer.slice(index + needle.length));
            return _context2.abrupt("return");

          case 22:
            if (!(buffer.length > needle.length)) {
              _context2.next = 26;
              break;
            }

            _context2.next = 25;
            return buffer.slice(0, buffer.length - needle.length);

          case 25:
            // cache the rest for next time
            buffer = buffer.slice(buffer.length - needle.length);

          case 26:
            _iteratorNormalCompletion2 = true;
            _context2.next = 5;
            break;

          case 29:
            _context2.next = 35;
            break;

          case 31:
            _context2.prev = 31;
            _context2.t0 = _context2["catch"](3);
            _didIteratorError2 = true;
            _iteratorError2 = _context2.t0;

          case 35:
            _context2.prev = 35;
            _context2.prev = 36;

            if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
              _context2.next = 40;
              break;
            }

            _context2.next = 40;
            return _awaitAsyncGenerator(_iterator2["return"]());

          case 40:
            _context2.prev = 40;

            if (!_didIteratorError2) {
              _context2.next = 43;
              break;
            }

            throw _iteratorError2;

          case 43:
            return _context2.finish(40);

          case 44:
            return _context2.finish(35);

          case 45:
            if (!buffer.length) {
              _context2.next = 48;
              break;
            }

            _context2.next = 48;
            return buffer;

          case 48:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[3, 31, 35, 45], [36,, 40, 44]]);
  }));
  return _yieldUntilAfter.apply(this, arguments);
}

function consumeUntilAfter(_x5, _x6) {
  return _consumeUntilAfter.apply(this, arguments);
} // a stream that lets us push content back into it for consumption elsewhere


function _consumeUntilAfter() {
  _consumeUntilAfter = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee5(haystack, needle) {
    var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, chunk;

    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _context5.prev = 2;
            _iterator3 = _asyncIterator(yieldUntilAfter(haystack, needle));

          case 4:
            _context5.next = 6;
            return _iterator3.next();

          case 6:
            _step3 = _context5.sent;
            _iteratorNormalCompletion3 = _step3.done;
            _context5.next = 10;
            return _step3.value;

          case 10:
            _value3 = _context5.sent;

            if (_iteratorNormalCompletion3) {
              _context5.next = 16;
              break;
            }

            chunk = _value3;

          case 13:
            _iteratorNormalCompletion3 = true;
            _context5.next = 4;
            break;

          case 16:
            _context5.next = 22;
            break;

          case 18:
            _context5.prev = 18;
            _context5.t0 = _context5["catch"](2);
            _didIteratorError3 = true;
            _iteratorError3 = _context5.t0;

          case 22:
            _context5.prev = 22;
            _context5.prev = 23;

            if (!(!_iteratorNormalCompletion3 && _iterator3["return"] != null)) {
              _context5.next = 27;
              break;
            }

            _context5.next = 27;
            return _iterator3["return"]();

          case 27:
            _context5.prev = 27;

            if (!_didIteratorError3) {
              _context5.next = 30;
              break;
            }

            throw _iteratorError3;

          case 30:
            return _context5.finish(27);

          case 31:
            return _context5.finish(22);

          case 32:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, null, [[2, 18, 22, 32], [23,, 27, 31]]);
  }));
  return _consumeUntilAfter.apply(this, arguments);
}

function prefixStream(stream) {
  var _iterator5;

  var buffer = [];
  var streamIterator = stream[Symbol.asyncIterator]();
  var iterator = (_iterator5 = {}, _defineProperty(_iterator5, Symbol.asyncIterator, function () {
    return iterator;
  }), _defineProperty(_iterator5, "next", function next() {
    if (buffer.length) {
      return {
        done: false,
        value: buffer.shift()
      };
    }

    return streamIterator.next();
  }), _defineProperty(_iterator5, "push", function push(buf) {
    buffer.push(buf);
  }), _iterator5);
  return iterator;
}

function waitForStreamToBeConsumed(stream) {
  var _iterator6;

  var pending;
  var complete = new Promise(function (resolve, reject) {
    pending = {
      resolve: resolve,
      reject: reject
    };
  });
  var streamIterator = stream[Symbol.asyncIterator]();
  var iterator = (_iterator6 = {}, _defineProperty(_iterator6, Symbol.asyncIterator, function () {
    return iterator;
  }), _defineProperty(_iterator6, "next", function () {
    var _next2 = _asyncToGenerator(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee3() {
      var _next3;

      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              _context3.next = 3;
              return streamIterator.next();

            case 3:
              _next3 = _context3.sent;

              if (_next3.done) {
                pending.resolve();
              }

              return _context3.abrupt("return", _next3);

            case 8:
              _context3.prev = 8;
              _context3.t0 = _context3["catch"](0);
              pending.reject(_context3.t0);

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[0, 8]]);
    }));

    function next() {
      return _next2.apply(this, arguments);
    }

    return next;
  }()), _iterator6);
  return {
    complete: complete,
    iterator: iterator
  };
}

var collect =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee4(stream) {
    var buffers, size, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _value4, buf;

    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            buffers = [];
            size = 0;
            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _context4.prev = 4;
            _iterator4 = _asyncIterator(stream);

          case 6:
            _context4.next = 8;
            return _iterator4.next();

          case 8:
            _step4 = _context4.sent;
            _iteratorNormalCompletion4 = _step4.done;
            _context4.next = 12;
            return _step4.value;

          case 12:
            _value4 = _context4.sent;

            if (_iteratorNormalCompletion4) {
              _context4.next = 20;
              break;
            }

            buf = _value4;
            size += buf.length;
            buffers.push(buf);

          case 17:
            _iteratorNormalCompletion4 = true;
            _context4.next = 6;
            break;

          case 20:
            _context4.next = 26;
            break;

          case 22:
            _context4.prev = 22;
            _context4.t0 = _context4["catch"](4);
            _didIteratorError4 = true;
            _iteratorError4 = _context4.t0;

          case 26:
            _context4.prev = 26;
            _context4.prev = 27;

            if (!(!_iteratorNormalCompletion4 && _iterator4["return"] != null)) {
              _context4.next = 31;
              break;
            }

            _context4.next = 31;
            return _iterator4["return"]();

          case 31:
            _context4.prev = 31;

            if (!_didIteratorError4) {
              _context4.next = 34;
              break;
            }

            throw _iteratorError4;

          case 34:
            return _context4.finish(31);

          case 35:
            return _context4.finish(26);

          case 36:
            return _context4.abrupt("return", Buffer.concat(buffers, size));

          case 37:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[4, 22, 26, 36], [27,, 31, 35]]);
  }));

  return function collect(_x7) {
    return _ref.apply(this, arguments);
  };
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

module.exports = function bufferIndexOf(buff, search, offset, encoding) {
  if (!Buffer.isBuffer(buff)) {
    throw TypeError('buffer is not a buffer');
  } // allow optional offset when providing an encoding


  if (encoding === undefined && typeof offset === 'string') {
    encoding = offset;
    offset = undefined;
  }

  if (typeof search === 'string') {
    search = new Buffer(search, encoding || 'utf8');
  } else if (typeof search === 'number' && !isNaN(search)) {
    search = new Buffer([search]);
  } else if (!Buffer.isBuffer(search)) {
    throw TypeError('search is not a bufferable object');
  }

  if (search.length === 0) {
    return -1;
  }

  if (offset === undefined || typeof offset === 'number' && isNaN(offset)) {
    offset = 0;
  } else if (typeof offset !== 'number') {
    throw TypeError('offset is not a number');
  }

  if (offset < 0) {
    offset = buff.length + offset;
  }

  if (offset < 0) {
    offset = 0;
  }

  var m = 0;
  var s = -1;

  for (var i = offset; i < buff.length; ++i) {
    if (buff[i] != search[m]) {
      s = -1; // <-- go back
      // match abc to aabc
      // 'aabc'
      // 'aab'
      //    ^ no match
      // a'abc'
      //   ^ set index here now and look at these again.
      //   'abc' yay!

      i -= m - 1;
      m = 0;
    }

    if (buff[i] == search[m]) {
      if (s == -1) {
        s = i;
      }

      ++m;

      if (m == search.length) {
        break;
      }
    }
  }

  if (s > -1 && buff.length - s < search.length) {
    return -1;
  }

  return s;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1).Buffer))

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var trim = __webpack_require__(330),
    forEach = __webpack_require__(345),
    isArray = function isArray(arg) {
  return Object.prototype.toString.call(arg) === '[object Array]';
};

module.exports = function (headers) {
  if (!headers) return {};
  var result = {};
  forEach(trim(headers).split('\n'), function (row) {
    var index = row.indexOf(':'),
        key = trim(row.slice(0, index)).toLowerCase(),
        value = trim(row.slice(index + 1));

    if (typeof result[key] === 'undefined') {
      result[key] = value;
    } else if (isArray(result[key])) {
      result[key].push(value);
    } else {
      result[key] = [result[key], value];
    }
  });
  return result;
};

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(43);

var define = __webpack_require__(123);

var implementation = __webpack_require__(125);

var getPolyfill = __webpack_require__(126);

var shim = __webpack_require__(344);

var boundTrim = bind.call(Function.call, getPolyfill());
define(boundTrim, {
  getPolyfill: getPolyfill,
  implementation: implementation,
  shim: shim
});
module.exports = boundTrim;

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
  var target = this;

  if (typeof target !== 'function' || toStr.call(target) !== funcType) {
    throw new TypeError(ERROR_MESSAGE + target);
  }

  var args = slice.call(arguments, 1);
  var bound;

  var binder = function binder() {
    if (this instanceof bound) {
      var result = target.apply(this, args.concat(slice.call(arguments)));

      if (Object(result) === result) {
        return result;
      }

      return this;
    } else {
      return target.apply(that, args.concat(slice.call(arguments)));
    }
  };

  var boundLength = Math.max(0, target.length - args.length);
  var boundArgs = [];

  for (var i = 0; i < boundLength; i++) {
    boundArgs.push('$' + i);
  }

  bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

  if (target.prototype) {
    var Empty = function Empty() {};

    Empty.prototype = target.prototype;
    bound.prototype = new Empty();
    Empty.prototype = null;
  }

  return bound;
};

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var slice = Array.prototype.slice;

var isArgs = __webpack_require__(124);

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) {
  return origKeys(o);
} : __webpack_require__(333);
var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
  if (Object.keys) {
    var keysWorksWithArguments = function () {
      // Safari 5.0 bug
      var args = Object.keys(arguments);
      return args && args.length === arguments.length;
    }(1, 2);

    if (!keysWorksWithArguments) {
      Object.keys = function keys(object) {
        // eslint-disable-line func-name-matching
        if (isArgs(object)) {
          return originalKeys(slice.call(object));
        }

        return originalKeys(object);
      };
    }
  } else {
    Object.keys = keysShim;
  }

  return Object.keys || keysShim;
};

module.exports = keysShim;

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var keysShim;

if (!Object.keys) {
  // modified from https://github.com/es-shims/es5-shim
  var has = Object.prototype.hasOwnProperty;
  var toStr = Object.prototype.toString;

  var isArgs = __webpack_require__(124); // eslint-disable-line global-require


  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var hasDontEnumBug = !isEnumerable.call({
    toString: null
  }, 'toString');
  var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
  var dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];

  var equalsConstructorPrototype = function equalsConstructorPrototype(o) {
    var ctor = o.constructor;
    return ctor && ctor.prototype === o;
  };

  var excludedKeys = {
    $applicationCache: true,
    $console: true,
    $external: true,
    $frame: true,
    $frameElement: true,
    $frames: true,
    $innerHeight: true,
    $innerWidth: true,
    $onmozfullscreenchange: true,
    $onmozfullscreenerror: true,
    $outerHeight: true,
    $outerWidth: true,
    $pageXOffset: true,
    $pageYOffset: true,
    $parent: true,
    $scrollLeft: true,
    $scrollTop: true,
    $scrollX: true,
    $scrollY: true,
    $self: true,
    $webkitIndexedDB: true,
    $webkitStorageInfo: true,
    $window: true
  };

  var hasAutomationEqualityBug = function () {
    /* global window */
    if (typeof window === 'undefined') {
      return false;
    }

    for (var k in window) {
      try {
        if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && _typeof(window[k]) === 'object') {
          try {
            equalsConstructorPrototype(window[k]);
          } catch (e) {
            return true;
          }
        }
      } catch (e) {
        return true;
      }
    }

    return false;
  }();

  var equalsConstructorPrototypeIfNotBuggy = function equalsConstructorPrototypeIfNotBuggy(o) {
    /* global window */
    if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
      return equalsConstructorPrototype(o);
    }

    try {
      return equalsConstructorPrototype(o);
    } catch (e) {
      return false;
    }
  };

  keysShim = function keys(object) {
    var isObject = object !== null && _typeof(object) === 'object';
    var isFunction = toStr.call(object) === '[object Function]';
    var isArguments = isArgs(object);
    var isString = isObject && toStr.call(object) === '[object String]';
    var theKeys = [];

    if (!isObject && !isFunction && !isArguments) {
      throw new TypeError('Object.keys called on a non-object');
    }

    var skipProto = hasProtoEnumBug && isFunction;

    if (isString && object.length > 0 && !has.call(object, 0)) {
      for (var i = 0; i < object.length; ++i) {
        theKeys.push(String(i));
      }
    }

    if (isArguments && object.length > 0) {
      for (var j = 0; j < object.length; ++j) {
        theKeys.push(String(j));
      }
    } else {
      for (var name in object) {
        if (!(skipProto && name === 'prototype') && has.call(object, name)) {
          theKeys.push(String(name));
        }
      }
    }

    if (hasDontEnumBug) {
      var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

      for (var k = 0; k < dontEnums.length; ++k) {
        if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
          theKeys.push(dontEnums[k]);
        }
      }
    }

    return theKeys;
  };
}

module.exports = keysShim;

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var GetIntrinsic = __webpack_require__(44);

var $Object = GetIntrinsic('%Object%');
var $TypeError = GetIntrinsic('%TypeError%');
var $String = GetIntrinsic('%String%');
var $Number = GetIntrinsic('%Number%');

var assertRecord = __webpack_require__(335);

var isPropertyDescriptor = __webpack_require__(336);

var $isNaN = __webpack_require__(337);

var $isFinite = __webpack_require__(338);

var sign = __webpack_require__(339);

var mod = __webpack_require__(340);

var IsCallable = __webpack_require__(68);

var toPrimitive = __webpack_require__(341);

var has = __webpack_require__(67);

var callBind = __webpack_require__(343);

var strSlice = callBind($String.prototype.slice);

var isPrefixOf = function isPrefixOf(prefix, string) {
  if (prefix === string) {
    return true;
  }

  if (prefix.length > string.length) {
    return false;
  }

  return strSlice(string, 0, prefix.length) === prefix;
}; // https://es5.github.io/#x9


var ES5 = {
  ToPrimitive: toPrimitive,
  ToBoolean: function ToBoolean(value) {
    return !!value;
  },
  ToNumber: function ToNumber(value) {
    return +value; // eslint-disable-line no-implicit-coercion
  },
  ToInteger: function ToInteger(value) {
    var number = this.ToNumber(value);

    if ($isNaN(number)) {
      return 0;
    }

    if (number === 0 || !$isFinite(number)) {
      return number;
    }

    return sign(number) * Math.floor(Math.abs(number));
  },
  ToInt32: function ToInt32(x) {
    return this.ToNumber(x) >> 0;
  },
  ToUint32: function ToUint32(x) {
    return this.ToNumber(x) >>> 0;
  },
  ToUint16: function ToUint16(value) {
    var number = this.ToNumber(value);

    if ($isNaN(number) || number === 0 || !$isFinite(number)) {
      return 0;
    }

    var posInt = sign(number) * Math.floor(Math.abs(number));
    return mod(posInt, 0x10000);
  },
  ToString: function ToString(value) {
    return $String(value);
  },
  ToObject: function ToObject(value) {
    this.CheckObjectCoercible(value);
    return $Object(value);
  },
  CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
    /* jshint eqnull:true */
    if (value == null) {
      throw new $TypeError(optMessage || 'Cannot call method on ' + value);
    }

    return value;
  },
  IsCallable: IsCallable,
  SameValue: function SameValue(x, y) {
    if (x === y) {
      // 0 === -0, but they are not identical.
      if (x === 0) {
        return 1 / x === 1 / y;
      }

      return true;
    }

    return $isNaN(x) && $isNaN(y);
  },
  // https://www.ecma-international.org/ecma-262/5.1/#sec-8
  Type: function Type(x) {
    if (x === null) {
      return 'Null';
    }

    if (typeof x === 'undefined') {
      return 'Undefined';
    }

    if (typeof x === 'function' || _typeof(x) === 'object') {
      return 'Object';
    }

    if (typeof x === 'number') {
      return 'Number';
    }

    if (typeof x === 'boolean') {
      return 'Boolean';
    }

    if (typeof x === 'string') {
      return 'String';
    }
  },
  // https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
  IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
    return isPropertyDescriptor(this, Desc);
  },
  // https://ecma-international.org/ecma-262/5.1/#sec-8.10.1
  IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
    if (typeof Desc === 'undefined') {
      return false;
    }

    assertRecord(this, 'Property Descriptor', 'Desc', Desc);

    if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
      return false;
    }

    return true;
  },
  // https://ecma-international.org/ecma-262/5.1/#sec-8.10.2
  IsDataDescriptor: function IsDataDescriptor(Desc) {
    if (typeof Desc === 'undefined') {
      return false;
    }

    assertRecord(this, 'Property Descriptor', 'Desc', Desc);

    if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
      return false;
    }

    return true;
  },
  // https://ecma-international.org/ecma-262/5.1/#sec-8.10.3
  IsGenericDescriptor: function IsGenericDescriptor(Desc) {
    if (typeof Desc === 'undefined') {
      return false;
    }

    assertRecord(this, 'Property Descriptor', 'Desc', Desc);

    if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
      return true;
    }

    return false;
  },
  // https://ecma-international.org/ecma-262/5.1/#sec-8.10.4
  FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
    if (typeof Desc === 'undefined') {
      return Desc;
    }

    assertRecord(this, 'Property Descriptor', 'Desc', Desc);

    if (this.IsDataDescriptor(Desc)) {
      return {
        value: Desc['[[Value]]'],
        writable: !!Desc['[[Writable]]'],
        enumerable: !!Desc['[[Enumerable]]'],
        configurable: !!Desc['[[Configurable]]']
      };
    } else if (this.IsAccessorDescriptor(Desc)) {
      return {
        get: Desc['[[Get]]'],
        set: Desc['[[Set]]'],
        enumerable: !!Desc['[[Enumerable]]'],
        configurable: !!Desc['[[Configurable]]']
      };
    } else {
      throw new $TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
    }
  },
  // https://ecma-international.org/ecma-262/5.1/#sec-8.10.5
  ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
    if (this.Type(Obj) !== 'Object') {
      throw new $TypeError('ToPropertyDescriptor requires an object');
    }

    var desc = {};

    if (has(Obj, 'enumerable')) {
      desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
    }

    if (has(Obj, 'configurable')) {
      desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
    }

    if (has(Obj, 'value')) {
      desc['[[Value]]'] = Obj.value;
    }

    if (has(Obj, 'writable')) {
      desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
    }

    if (has(Obj, 'get')) {
      var getter = Obj.get;

      if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
        throw new TypeError('getter must be a function');
      }

      desc['[[Get]]'] = getter;
    }

    if (has(Obj, 'set')) {
      var setter = Obj.set;

      if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
        throw new $TypeError('setter must be a function');
      }

      desc['[[Set]]'] = setter;
    }

    if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
      throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
    }

    return desc;
  },
  // https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3
  'Abstract Equality Comparison': function AbstractEqualityComparison(x, y) {
    var xType = this.Type(x);
    var yType = this.Type(y);

    if (xType === yType) {
      return x === y; // ES6+ specified this shortcut anyways.
    }

    if (x == null && y == null) {
      return true;
    }

    if (xType === 'Number' && yType === 'String') {
      return this['Abstract Equality Comparison'](x, this.ToNumber(y));
    }

    if (xType === 'String' && yType === 'Number') {
      return this['Abstract Equality Comparison'](this.ToNumber(x), y);
    }

    if (xType === 'Boolean') {
      return this['Abstract Equality Comparison'](this.ToNumber(x), y);
    }

    if (yType === 'Boolean') {
      return this['Abstract Equality Comparison'](x, this.ToNumber(y));
    }

    if ((xType === 'String' || xType === 'Number') && yType === 'Object') {
      return this['Abstract Equality Comparison'](x, this.ToPrimitive(y));
    }

    if (xType === 'Object' && (yType === 'String' || yType === 'Number')) {
      return this['Abstract Equality Comparison'](this.ToPrimitive(x), y);
    }

    return false;
  },
  // https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.6
  'Strict Equality Comparison': function StrictEqualityComparison(x, y) {
    var xType = this.Type(x);
    var yType = this.Type(y);

    if (xType !== yType) {
      return false;
    }

    if (xType === 'Undefined' || xType === 'Null') {
      return true;
    }

    return x === y; // shortcut for steps 4-7
  },
  // https://www.ecma-international.org/ecma-262/5.1/#sec-11.8.5
  // eslint-disable-next-line max-statements
  'Abstract Relational Comparison': function AbstractRelationalComparison(x, y, LeftFirst) {
    if (this.Type(LeftFirst) !== 'Boolean') {
      throw new $TypeError('Assertion failed: LeftFirst argument must be a Boolean');
    }

    var px;
    var py;

    if (LeftFirst) {
      px = this.ToPrimitive(x, $Number);
      py = this.ToPrimitive(y, $Number);
    } else {
      py = this.ToPrimitive(y, $Number);
      px = this.ToPrimitive(x, $Number);
    }

    var bothStrings = this.Type(px) === 'String' && this.Type(py) === 'String';

    if (!bothStrings) {
      var nx = this.ToNumber(px);
      var ny = this.ToNumber(py);

      if ($isNaN(nx) || $isNaN(ny)) {
        return undefined;
      }

      if ($isFinite(nx) && $isFinite(ny) && nx === ny) {
        return false;
      }

      if (nx === 0 && ny === 0) {
        return false;
      }

      if (nx === Infinity) {
        return false;
      }

      if (ny === Infinity) {
        return true;
      }

      if (ny === -Infinity) {
        return false;
      }

      if (nx === -Infinity) {
        return true;
      }

      return nx < ny; // by now, these are both nonzero, finite, and not equal
    }

    if (isPrefixOf(py, px)) {
      return false;
    }

    if (isPrefixOf(px, py)) {
      return true;
    }

    return px < py; // both strings, neither a prefix of the other. shortcut for steps c-f
  }
};
module.exports = ES5;

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var GetIntrinsic = __webpack_require__(44);

var $TypeError = GetIntrinsic('%TypeError%');
var $SyntaxError = GetIntrinsic('%SyntaxError%');

var has = __webpack_require__(67);

var predicates = {
  // https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
  'Property Descriptor': function isPropertyDescriptor(ES, Desc) {
    if (ES.Type(Desc) !== 'Object') {
      return false;
    }

    var allowed = {
      '[[Configurable]]': true,
      '[[Enumerable]]': true,
      '[[Get]]': true,
      '[[Set]]': true,
      '[[Value]]': true,
      '[[Writable]]': true
    };

    for (var key in Desc) {
      // eslint-disable-line
      if (has(Desc, key) && !allowed[key]) {
        return false;
      }
    }

    var isData = has(Desc, '[[Value]]');
    var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');

    if (isData && IsAccessor) {
      throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
    }

    return true;
  }
};

module.exports = function assertRecord(ES, recordType, argumentName, value) {
  var predicate = predicates[recordType];

  if (typeof predicate !== 'function') {
    throw new $SyntaxError('unknown record type: ' + recordType);
  }

  if (!predicate(ES, value)) {
    throw new $TypeError(argumentName + ' must be a ' + recordType);
  }
};

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var GetIntrinsic = __webpack_require__(44);

var has = __webpack_require__(67);

var $TypeError = GetIntrinsic('%TypeError%');

module.exports = function IsPropertyDescriptor(ES, Desc) {
  if (ES.Type(Desc) !== 'Object') {
    return false;
  }

  var allowed = {
    '[[Configurable]]': true,
    '[[Enumerable]]': true,
    '[[Get]]': true,
    '[[Set]]': true,
    '[[Value]]': true,
    '[[Writable]]': true
  };

  for (var key in Desc) {
    // eslint-disable-line
    if (has(Desc, key) && !allowed[key]) {
      return false;
    }
  }

  if (ES.IsDataDescriptor(Desc) && ES.IsAccessorDescriptor(Desc)) {
    throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
  }

  return true;
};

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = Number.isNaN || function isNaN(a) {
  return a !== a;
};

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $isNaN = Number.isNaN || function (a) {
  return a !== a;
};

module.exports = Number.isFinite || function (x) {
  return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity;
};

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function sign(number) {
  return number >= 0 ? 1 : -1;
};

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function mod(number, modulo) {
  var remain = number % modulo;
  return Math.floor(remain >= 0 ? remain : remain + modulo);
};

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toStr = Object.prototype.toString;

var isPrimitive = __webpack_require__(342);

var isCallable = __webpack_require__(68); // http://ecma-international.org/ecma-262/5.1/#sec-8.12.8


var ES5internalSlots = {
  '[[DefaultValue]]': function DefaultValue(O) {
    var actualHint;

    if (arguments.length > 1) {
      actualHint = arguments[1];
    } else {
      actualHint = toStr.call(O) === '[object Date]' ? String : Number;
    }

    if (actualHint === String || actualHint === Number) {
      var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
      var value, i;

      for (i = 0; i < methods.length; ++i) {
        if (isCallable(O[methods[i]])) {
          value = O[methods[i]]();

          if (isPrimitive(value)) {
            return value;
          }
        }
      }

      throw new TypeError('No default value');
    }

    throw new TypeError('invalid [[DefaultValue]] hint supplied');
  }
}; // http://ecma-international.org/ecma-262/5.1/#sec-9.1

module.exports = function ToPrimitive(input) {
  if (isPrimitive(input)) {
    return input;
  }

  if (arguments.length > 1) {
    return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
  }

  return ES5internalSlots['[[DefaultValue]]'](input);
};

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function isPrimitive(value) {
  return value === null || typeof value !== 'function' && _typeof(value) !== 'object';
};

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(43);

var GetIntrinsic = __webpack_require__(44);

var $Function = GetIntrinsic('%Function%');
var $apply = $Function.apply;
var $call = $Function.call;

module.exports = function callBind() {
  return bind.apply($call, arguments);
};

module.exports.apply = function applyBind() {
  return bind.apply($apply, arguments);
};

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var define = __webpack_require__(123);

var getPolyfill = __webpack_require__(126);

module.exports = function shimStringTrim() {
  var polyfill = getPolyfill();
  define(String.prototype, {
    trim: polyfill
  }, {
    trim: function testTrim() {
      return String.prototype.trim !== polyfill;
    }
  });
  return polyfill;
};

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isCallable = __webpack_require__(68);

var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

var forEachArray = function forEachArray(array, iterator, receiver) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (hasOwnProperty.call(array, i)) {
      if (receiver == null) {
        iterator(array[i], i, array);
      } else {
        iterator.call(receiver, array[i], i, array);
      }
    }
  }
};

var forEachString = function forEachString(string, iterator, receiver) {
  for (var i = 0, len = string.length; i < len; i++) {
    // no such thing as a sparse string.
    if (receiver == null) {
      iterator(string.charAt(i), i, string);
    } else {
      iterator.call(receiver, string.charAt(i), i, string);
    }
  }
};

var forEachObject = function forEachObject(object, iterator, receiver) {
  for (var k in object) {
    if (hasOwnProperty.call(object, k)) {
      if (receiver == null) {
        iterator(object[k], k, object);
      } else {
        iterator.call(receiver, object[k], k, object);
      }
    }
  }
};

var forEach = function forEach(list, iterator, thisArg) {
  if (!isCallable(iterator)) {
    throw new TypeError('iterator must be a function');
  }

  var receiver;

  if (arguments.length >= 3) {
    receiver = thisArg;
  }

  if (toStr.call(list) === '[object Array]') {
    forEachArray(list, iterator, receiver);
  } else if (typeof list === 'string') {
    forEachString(list, iterator, receiver);
  } else {
    forEachObject(list, iterator, receiver);
  }
};

module.exports = forEach;

/***/ })
/******/ ]);
});
//# sourceMappingURL=index.js.map