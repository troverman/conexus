{
  "machine": "escape-as-command-line-opt",
  "expectations": [

    // Number
    {
      "using": {
        "value": 4
      },
      "outcome": "success",
      "returns": "4"
    },

    // Boolean
    {
      "using": {
        "value": true
      },
      "outcome": "success",
      "returns": "true"
    },

    // Basic string
    {
      "using": {
        "value": "hello"
      },
      "outcome": "success",
      "returns": "hello"
    },

    // String with nasty single quotes everywhere
    {
      "using": {
        "value": "st'''uff w/ nasty quotes''' everywhere'"
      },
      "outcome": "success",
      "returns": "st'\\'''\\'''\\''uff w/ nasty quotes'\\'''\\'''\\'' everywhere'\\''"
    },

    // Tricky string that happens to be a JSON string
    {
      "using": {
        "value": "{ \"some encoded dict\" : \"st'''uff w/ nasty quotes''' everywhere'\"}"
      },
      "outcome": "success",
      "returns": "{\"some encoded dict\":\"st'\\'''\\'''\\''uff w/ nasty quotes'\\'''\\'''\\'' everywhere'\\''\"}"
    },

    // A dictionary
    {
      "using": {
        "value": {
          "some nested dict" : {
            "foo": ["st'''uff w/ nasty quotes''' everywhere'"]
          },
          "some nested number": 32,
          "some nested string" : "more st'''uff w/ nasty quotes''' everywhere'",
        }
      },
      "outcome": "success",
      "returns": "{\"some nested dict\":{\"foo\":[\"st'\\'''\\'''\\''uff w/ nasty quotes'\\'''\\'''\\'' everywhere'\\''\"]},\"some nested number\":32,\"some nested string\":\"more st'\\'''\\'''\\''uff w/ nasty quotes'\\'''\\'''\\'' everywhere'\\''\"}"
    }

  ]
}
