{
  "machine": "template",
  "expectations": [
    {
      "using": {
        "templateStr": "Hey look some apostrophes! '''''''''   \\n ## Inputs  | `example`                | actual value provided  | yields... | ------------------------ | ---------------------- | ----------------------<% _.each(validationTests, function (test) { %> | <%= util.inspect(test.example, false, null) %>      | <%= util.inspect(test.actual, false, null) %>     | <%= util.inspect(test.result, false, null) %><% }); %>   ## Special cases + If a custom `validate()` function was provided for an input, all built-in validation and/or coercion is skipped. + The configured `inputs` object accessible to `getExample()` and `validate()` are not guaranteed to have been coerced.  You should make sure your custom `getExample()` and `validate()` functions take this into account (e.g. if a user passes the value `\"3\"` into some input (x) with a numeric example, the `validate` function for some other input (y) might receive `inputs.x` as either `\"3\"` or `3`)   ## Exits  | `example`                | actual value provided  | yields... | ------------------------ | ---------------------- | ----------------------<% _.each(coercionTests, function (test) { %> | <%= util.inspect(test.example, false, null) %>      | <%= util.inspect(test.actual, false, null) %>     | <%= util.inspect(test.result, false, null) %><% }); %>  ## Special cases + If the `error` exit does not have an `example` or `getExample()`, it outputs an instance of Error. + The configured `inputs` object accessible to `getExample()` are not guaranteed to have been coerced.  You should make sure your custom `getExample()` function takes this into account (e.g. if a user passes the value `\"3\"` into some input (x) with a numeric example, the `getExample` function for one of your exits might receive `inputs.x` as either `\"3\"` or `3`)",
        "data": {
          "validationTests": [],
          "coercionTests": []
        }
      },
      "outcome": "success",
      "returns": "Hey look some apostrophes! '''''''''   \\n ## Inputs  | `example`                | actual value provided  | yields... | ------------------------ | ---------------------- | ----------------------   ## Special cases + If a custom `validate()` function was provided for an input, all built-in validation and/or coercion is skipped. + The configured `inputs` object accessible to `getExample()` and `validate()` are not guaranteed to have been coerced.  You should make sure your custom `getExample()` and `validate()` functions take this into account (e.g. if a user passes the value `\"3\"` into some input (x) with a numeric example, the `validate` function for some other input (y) might receive `inputs.x` as either `\"3\"` or `3`)   ## Exits  | `example`                | actual value provided  | yields... | ------------------------ | ---------------------- | ----------------------  ## Special cases + If the `error` exit does not have an `example` or `getExample()`, it outputs an instance of Error. + The configured `inputs` object accessible to `getExample()` are not guaranteed to have been coerced.  You should make sure your custom `getExample()` function takes this into account (e.g. if a user passes the value `\"3\"` into some input (x) with a numeric example, the `getExample` function for one of your exits might receive `inputs.x` as either `\"3\"` or `3`)"
    },
    {
      "using": {
        "templateStr": "Hey look some apostrophes! '''''''''   \\n ## Inputs  | `example`                | actual value provided  | yields... | ------------------------ | ---------------------- | ----------------------<% _.each(validationTests, function (test) { %> | <%= util.inspect(test.example, false, null) %>      | <%= util.inspect(test.actual, false, null) %>     | <%= util.inspect(test.result, false, null) %><% }); %>   ## Special cases + If a custom `validate()` function was provided for an input, all built-in validation and/or coercion is skipped. + The configured `inputs` object accessible to `getExample()` and `validate()` are not guaranteed to have been coerced.  You should make sure your custom `getExample()` and `validate()` functions take this into account (e.g. if a user passes the value `\"3\"` into some input (x) with a numeric example, the `validate` function for some other input (y) might receive `inputs.x` as either `\"3\"` or `3`)   ## Exits  | `example`                | actual value provided  | yields... | ------------------------ | ---------------------- | ----------------------<% _.each(coercionTests, function (test) { %> | <%= util.inspect(test.example, false, null) %>      | <%= util.inspect(test.actual, false, null) %>     | <%= util.inspect(test.result, false, null) %><% }); %>  ## Special cases + If the `error` exit does not have an `example` or `getExample()`, it outputs an instance of Error. + The configured `inputs` object accessible to `getExample()` are not guaranteed to have been coerced.  You should make sure your custom `getExample()` function takes this into account (e.g. if a user passes the value `\"3\"` into some input (x) with a numeric example, the `getExample` function for one of your exits might receive `inputs.x` as either `\"3\"` or `3`)",
        "data": {
          "validationTests": []
        }
      },
      "outcome": "missingData",
      "returns": {
        "message": "A variable (`coercionTests`) were used in template \"undefined\", but not provided in the template data dictionary.",
        "missingVariables": [
          "coercionTests"
        ]
      }
    },
    {
      "using": {
        "templateStr": "Hey look some apostrophes! '''''''''   \\n ## Inputs  | `example`                | actual value provided  | yields... | ------------------------ | ---------------------- | ----------------------<% _.each(validationTests, function (test) { %> | <%= util.inspect(test.example, false, null) %>      | <%= util.inspect(test.actual, false, null) %>     | <%= util.inspect(test.result, false, null) %><% }); %>   ## Special cases + If a custom `validate()` function was provided for an input, all built-in validation and/or coercion is skipped. + The configured `inputs` object accessible to `getExample()` and `validate()` are not guaranteed to have been coerced.  You should make sure your custom `getExample()` and `validate()` functions take this into account (e.g. if a user passes the value `\"3\"` into some input (x) with a numeric example, the `validate` function for some other input (y) might receive `inputs.x` as either `\"3\"` or `3`)   ## Exits  | `example`                | actual value provided  | yields... | ------------------------ | ---------------------- | ----------------------<% _.each(coercionTests, function (test) { %> | <%= util.inspect(test.example, false, null) %>      | <%= util.inspect(test.actual, false, null) %>     | <%= util.inspect(test.result, false, null) %><% }); %>  ## Special cases + If the `error` exit does not have an `example` or `getExample()`, it outputs an instance of Error. + The configured `inputs` object accessible to `getExample()` are not guaranteed to have been coerced.  You should make sure your custom `getExample()` function takes this into account (e.g. if a user passes the value `\"3\"` into some input (x) with a numeric example, the `getExample` function for one of your exits might receive `inputs.x` as either `\"3\"` or `3`)",
        "data": {}
      },
      "outcome": "missingData",
      "returns": {
        "message": "Some variables (`validationTests`,`coercionTests`) were used in template \"undefined\", but not provided in the template data dictionary.",
        "missingVariables": [
          "validationTests",
          "coercionTests"
        ]
      }
    },
    {
      "using": {
        "templateStr": "Hey look some apostrophes! '''''''''   \\n ## Inputs  | `example`                | actual value provided  | yields... | ------------------------ | ---------------------- | ----------------------<% _.each(validationTests, function (test) { %> | <%= util.inspect(test.example, false, null) %>      | <%= util.inspect(test.actual, false, null) %>     | <%= util.inspect(test.result, false, null) %><% }); %>   ## Special cases + If a custom `validate()` function was provided for an input, all built-in validation and/or coercion is skipped. + The configured `inputs` object accessible to `getExample()` and `validate()` are not guaranteed to have been coerced.  You should make sure your custom `getExample()` and `validate()` functions take this into account (e.g. if a user passes the value `\"3\"` into some input (x) with a numeric example, the `validate` function for some other input (y) might receive `inputs.x` as either `\"3\"` or `3`)   ## Exits  | `example`                | actual value provided  | yields... | ------------------------ | ---------------------- | ----------------------<% _.each(coercionTests, function (test) { %> | <%= util.inspect(test.example, false, null) %>      | <%= util.inspect(test.actual, false, null) %>     | <%= util.inspect(test.result, false, null) %><% }); %>  ## Special cases + If the `error` exit does not have an `example` or `getExample()`, it outputs an instance of Error. + The configured `inputs` object accessible to `getExample()` are not guaranteed to have been coerced.  You should make sure your custom `getExample()` function takes this into account (e.g. if a user passes the value `\"3\"` into some input (x) with a numeric example, the `getExample` function for one of your exits might receive `inputs.x` as either `\"3\"` or `3`)"
      },
      "outcome": "missingData",
      "returns": {
        "message": "Some variables (`validationTests`,`coercionTests`) were used in template \"undefined\", but not provided in the template data dictionary.",
        "missingVariables": [
          "validationTests",
          "coercionTests"
        ]
      }
    }
  ]
}